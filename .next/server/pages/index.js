/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./styles/Home.module.css":
/*!********************************!*\
  !*** ./styles/Home.module.css ***!
  \********************************/
/***/ ((module) => {

eval("// Exports\nmodule.exports = {\n\t\"container\": \"Home_container__d256j\",\n\t\"main\": \"Home_main__VkIEL\",\n\t\"title\": \"Home_title__hYX6j\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmdsLWRvdC1ncmlkLW12cC8uL3N0eWxlcy9Ib21lLm1vZHVsZS5jc3M/YmMyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJjb250YWluZXJcIjogXCJIb21lX2NvbnRhaW5lcl9fZDI1NmpcIixcblx0XCJtYWluXCI6IFwiSG9tZV9tYWluX19Wa0lFTFwiLFxuXHRcInRpdGxlXCI6IFwiSG9tZV90aXRsZV9faFlYNmpcIlxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./styles/Home.module.css\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./node_modules/next/dist/pages/_app.js\");\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _pages_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/index.js */ \"./pages/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_index_js__WEBPACK_IMPORTED_MODULE_5__]);\n_pages_index_js__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/index\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: (private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default()),\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _pages_index_js__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZpbmRleC5qcyZhYnNvbHV0ZUFwcFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2FwcCZhYnNvbHV0ZURvY3VtZW50UGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZG9jdW1lbnQmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUNoQztBQUNMO0FBQzFEO0FBQ29EO0FBQ1Y7QUFDMUM7QUFDNkM7QUFDN0M7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDRDQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLHVCQUF1Qix3RUFBSyxDQUFDLDRDQUFRO0FBQ3JDLHVCQUF1Qix3RUFBSyxDQUFDLDRDQUFRO0FBQ3JDLDJCQUEyQix3RUFBSyxDQUFDLDRDQUFRO0FBQ3pDLGVBQWUsd0VBQUssQ0FBQyw0Q0FBUTtBQUM3Qix3QkFBd0Isd0VBQUssQ0FBQyw0Q0FBUTtBQUM3QztBQUNPLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLGlDQUFpQyx3RUFBSyxDQUFDLDRDQUFRO0FBQy9DLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLG9DQUFvQyx3RUFBSyxDQUFDLDRDQUFRO0FBQ3pEO0FBQ08sd0JBQXdCLHlHQUFnQjtBQUMvQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViZ2wtZG90LWdyaWQtbXZwLz8xNDNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgYXBwIGFuZCBkb2N1bWVudCBtb2R1bGVzLlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2RvY3VtZW50XCI7XG5pbXBvcnQgQXBwIGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2FwcFwiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvaW5kZXguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgY29tcG9uZW50IChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcImdldFN0YXRpY1Byb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1BhdGhzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U3RhdGljUGF0aHNcIik7XG5leHBvcnQgY29uc3QgZ2V0U2VydmVyU2lkZVByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U2VydmVyU2lkZVByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbmV4cG9ydCBjb25zdCByZXBvcnRXZWJWaXRhbHMgPSBob2lzdCh1c2VybGFuZCwgXCJyZXBvcnRXZWJWaXRhbHNcIik7XG4vLyBSZS1leHBvcnQgbGVnYWN5IG1ldGhvZHMuXG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTdGF0aWNQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhdGhzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1BhcmFtcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhcmFtc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wc1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTLFxuICAgICAgICBwYWdlOiBcIi9pbmRleFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBEb2N1bWVudFxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./components/CircleMaterial.tsx":
/*!***************************************!*\
  !*** ./components/CircleMaterial.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Simple vertex shader\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  attribute float a_activated; // Will be used in Feature 4\n  varying float v_activated;   // Will be used in Feature 4\n  void main() {\n    vUv = uv;\n    v_activated = a_activated; // Pass activation state\n    gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader to draw two concentric circles\nconst fragmentShader = /*glsl*/ `\n  uniform float u_radiusA;      // Outer radius (scaled relative to instance size)\n  uniform float u_radiusB;      // Inner radius (scaled relative to instance size)\n  uniform vec3 u_bgColor;       // Background color (or transparent)\n  uniform vec3 u_outerColor;    // Color of the outer ring\n  uniform vec3 u_innerColorEmpty; // Color of the inner circle when inactive\n  uniform vec3 u_innerColorActive;// Color of the inner circle when active\n\n  varying vec2 vUv;\n  varying float v_activated; // Read from vertex shader (comes from a_activated attribute)\n\n  void main() {\n    float dist = distance(vUv, vec2(0.5));\n\n    // Discard if outside the outer circle\n    if (dist > u_radiusA) {\n        discard;\n    }\n\n    // Check activation state first\n    if (v_activated == 1.0) {\n        // If activated, only draw the inner circle (black)\n        if (dist <= u_radiusB) {\n            gl_FragColor = vec4(u_innerColorActive, 1.0); // Solid black inner circle\n        } else {\n            discard; // Make outer ring transparent when activated\n        }\n    } else {\n        // Not activated - draw both inner and outer circles\n        if (dist > u_radiusB) {\n            // In the outer ring\n            gl_FragColor = vec4(u_outerColor, 1.0);\n        } else {\n            // In the inner circle - empty/inactive\n            gl_FragColor = vec4(u_innerColorEmpty, 1.0);\n        }\n    }\n  }\n`;\n// Create the shader material using drei/shaderMaterial\nconst CircleMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_radiusA: 0.5,\n    u_radiusB: 0.4,\n    u_bgColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#ffffff\"),\n    u_outerColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#cccccc\"),\n    u_innerColorEmpty: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#ffffff\"),\n    u_innerColorActive: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#000000\")\n}, vertexShader, fragmentShader);\n// Extend R3F to recognize the material\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    CircleMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CircleMaterial);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0NpcmNsZU1hdGVyaWFsLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0I7QUFDb0I7QUFDUDtBQUU1Qyx1QkFBdUI7QUFDdkIsTUFBTUcsZUFBZSxNQUFNLEdBQUcsQ0FBQzs7Ozs7Ozs7O0FBUy9CLENBQUM7QUFFRCxpREFBaUQ7QUFDakQsTUFBTUMsaUJBQWlCLE1BQU0sR0FBRyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDakMsQ0FBQztBQUVELHVEQUF1RDtBQUN2RCxNQUFNQyxpQkFBaUJKLGlFQUFjQSxDQUNuQztJQUNFSyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVyxJQUFJUix3Q0FBVyxDQUFDO0lBQzNCVSxjQUFjLElBQUlWLHdDQUFXLENBQUM7SUFDOUJXLG1CQUFtQixJQUFJWCx3Q0FBVyxDQUFDO0lBQ25DWSxvQkFBb0IsSUFBSVosd0NBQVcsQ0FBQztBQUN0QyxHQUNBRyxjQUNBQztBQUdGLHVDQUF1QztBQUN2Q0YsMERBQU1BLENBQUM7SUFBRUc7QUFBZTtBQVd4QixpRUFBZUEsY0FBY0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmdsLWRvdC1ncmlkLW12cC8uL2NvbXBvbmVudHMvQ2lyY2xlTWF0ZXJpYWwudHN4PzQyNTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgc2hhZGVyTWF0ZXJpYWwgfSBmcm9tICdAcmVhY3QtdGhyZWUvZHJlaSc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuXG4vLyBTaW1wbGUgdmVydGV4IHNoYWRlclxuY29uc3QgdmVydGV4U2hhZGVyID0gLypnbHNsKi8gYFxuICB2YXJ5aW5nIHZlYzIgdlV2O1xuICBhdHRyaWJ1dGUgZmxvYXQgYV9hY3RpdmF0ZWQ7IC8vIFdpbGwgYmUgdXNlZCBpbiBGZWF0dXJlIDRcbiAgdmFyeWluZyBmbG9hdCB2X2FjdGl2YXRlZDsgICAvLyBXaWxsIGJlIHVzZWQgaW4gRmVhdHVyZSA0XG4gIHZvaWQgbWFpbigpIHtcbiAgICB2VXYgPSB1djtcbiAgICB2X2FjdGl2YXRlZCA9IGFfYWN0aXZhdGVkOyAvLyBQYXNzIGFjdGl2YXRpb24gc3RhdGVcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiBpbnN0YW5jZU1hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG4gIH1cbmA7XG5cbi8vIEZyYWdtZW50IHNoYWRlciB0byBkcmF3IHR3byBjb25jZW50cmljIGNpcmNsZXNcbmNvbnN0IGZyYWdtZW50U2hhZGVyID0gLypnbHNsKi8gYFxuICB1bmlmb3JtIGZsb2F0IHVfcmFkaXVzQTsgICAgICAvLyBPdXRlciByYWRpdXMgKHNjYWxlZCByZWxhdGl2ZSB0byBpbnN0YW5jZSBzaXplKVxuICB1bmlmb3JtIGZsb2F0IHVfcmFkaXVzQjsgICAgICAvLyBJbm5lciByYWRpdXMgKHNjYWxlZCByZWxhdGl2ZSB0byBpbnN0YW5jZSBzaXplKVxuICB1bmlmb3JtIHZlYzMgdV9iZ0NvbG9yOyAgICAgICAvLyBCYWNrZ3JvdW5kIGNvbG9yIChvciB0cmFuc3BhcmVudClcbiAgdW5pZm9ybSB2ZWMzIHVfb3V0ZXJDb2xvcjsgICAgLy8gQ29sb3Igb2YgdGhlIG91dGVyIHJpbmdcbiAgdW5pZm9ybSB2ZWMzIHVfaW5uZXJDb2xvckVtcHR5OyAvLyBDb2xvciBvZiB0aGUgaW5uZXIgY2lyY2xlIHdoZW4gaW5hY3RpdmVcbiAgdW5pZm9ybSB2ZWMzIHVfaW5uZXJDb2xvckFjdGl2ZTsvLyBDb2xvciBvZiB0aGUgaW5uZXIgY2lyY2xlIHdoZW4gYWN0aXZlXG5cbiAgdmFyeWluZyB2ZWMyIHZVdjtcbiAgdmFyeWluZyBmbG9hdCB2X2FjdGl2YXRlZDsgLy8gUmVhZCBmcm9tIHZlcnRleCBzaGFkZXIgKGNvbWVzIGZyb20gYV9hY3RpdmF0ZWQgYXR0cmlidXRlKVxuXG4gIHZvaWQgbWFpbigpIHtcbiAgICBmbG9hdCBkaXN0ID0gZGlzdGFuY2UodlV2LCB2ZWMyKDAuNSkpO1xuXG4gICAgLy8gRGlzY2FyZCBpZiBvdXRzaWRlIHRoZSBvdXRlciBjaXJjbGVcbiAgICBpZiAoZGlzdCA+IHVfcmFkaXVzQSkge1xuICAgICAgICBkaXNjYXJkO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGFjdGl2YXRpb24gc3RhdGUgZmlyc3RcbiAgICBpZiAodl9hY3RpdmF0ZWQgPT0gMS4wKSB7XG4gICAgICAgIC8vIElmIGFjdGl2YXRlZCwgb25seSBkcmF3IHRoZSBpbm5lciBjaXJjbGUgKGJsYWNrKVxuICAgICAgICBpZiAoZGlzdCA8PSB1X3JhZGl1c0IpIHtcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9pbm5lckNvbG9yQWN0aXZlLCAxLjApOyAvLyBTb2xpZCBibGFjayBpbm5lciBjaXJjbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc2NhcmQ7IC8vIE1ha2Ugb3V0ZXIgcmluZyB0cmFuc3BhcmVudCB3aGVuIGFjdGl2YXRlZFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm90IGFjdGl2YXRlZCAtIGRyYXcgYm90aCBpbm5lciBhbmQgb3V0ZXIgY2lyY2xlc1xuICAgICAgICBpZiAoZGlzdCA+IHVfcmFkaXVzQikge1xuICAgICAgICAgICAgLy8gSW4gdGhlIG91dGVyIHJpbmdcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9vdXRlckNvbG9yLCAxLjApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gdGhlIGlubmVyIGNpcmNsZSAtIGVtcHR5L2luYWN0aXZlXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfaW5uZXJDb2xvckVtcHR5LCAxLjApO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG4vLyBDcmVhdGUgdGhlIHNoYWRlciBtYXRlcmlhbCB1c2luZyBkcmVpL3NoYWRlck1hdGVyaWFsXG5jb25zdCBDaXJjbGVNYXRlcmlhbCA9IHNoYWRlck1hdGVyaWFsKFxuICB7XG4gICAgdV9yYWRpdXNBOiAwLjUsIC8vIERlZmF1bHQgdmFsdWUsIHdpbGwgYmUgdXBkYXRlZFxuICAgIHVfcmFkaXVzQjogMC40LCAvLyBEZWZhdWx0IHZhbHVlLCB3aWxsIGJlIHVwZGF0ZWRcbiAgICB1X2JnQ29sb3I6IG5ldyBUSFJFRS5Db2xvcignI2ZmZmZmZicpLCAvLyBEZWZhdWx0IGJnXG4gICAgdV9vdXRlckNvbG9yOiBuZXcgVEhSRUUuQ29sb3IoJyNjY2NjY2MnKSwgLy8gTGlnaHQgZ3JleSBvdXRlciByaW5nXG4gICAgdV9pbm5lckNvbG9yRW1wdHk6IG5ldyBUSFJFRS5Db2xvcignI2ZmZmZmZicpLCAvLyBXaGl0ZS90cmFuc3BhcmVudCBpbm5lciBlbXB0eVxuICAgIHVfaW5uZXJDb2xvckFjdGl2ZTogbmV3IFRIUkVFLkNvbG9yKCcjMDAwMDAwJyksIC8vIEJsYWNrIGlubmVyIGFjdGl2ZVxuICB9LFxuICB2ZXJ0ZXhTaGFkZXIsXG4gIGZyYWdtZW50U2hhZGVyXG4pO1xuXG4vLyBFeHRlbmQgUjNGIHRvIHJlY29nbml6ZSB0aGUgbWF0ZXJpYWxcbmV4dGVuZCh7IENpcmNsZU1hdGVyaWFsIH0pO1xuXG4vLyBEZWZpbmUgVHlwZVNjcmlwdCB0eXBlIGZvciBKU1ggdXNhZ2VcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIEpTWCB7XG4gICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgIGNpcmNsZU1hdGVyaWFsOiBhbnk7IC8vIFVzZSBcXCdhbnlcXCcgb3IgZGVmaW5lIG1vcmUgc3BlY2lmaWMgdHlwZXNcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlTWF0ZXJpYWw7ICJdLCJuYW1lcyI6WyJUSFJFRSIsInNoYWRlck1hdGVyaWFsIiwiZXh0ZW5kIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJDaXJjbGVNYXRlcmlhbCIsInVfcmFkaXVzQSIsInVfcmFkaXVzQiIsInVfYmdDb2xvciIsIkNvbG9yIiwidV9vdXRlckNvbG9yIiwidV9pbm5lckNvbG9yRW1wdHkiLCJ1X2lubmVyQ29sb3JBY3RpdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/CircleMaterial.tsx\n");

/***/ }),

/***/ "./components/CmdHorizConnectorMaterial.tsx":
/*!**************************************************!*\
  !*** ./components/CmdHorizConnectorMaterial.tsx ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Constants from GridScene/ConnectorMaterial needed for calculations\nconst BASE_RADIUS_A = 0.5; // Outer radius relative to spacing=1\nconst BASE_RADIUS_B = 0.4; // Inner radius relative to spacing=1\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.9\n// Vertex shader: Pass UVs (same as ConnectorMaterial)\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader: Only for Cmd-Click Horizontal Connectors\nconst fragmentShader = /*glsl*/ `\n  uniform sampler2D u_stateTexture;             // Need state to confirm circles are active\n  uniform sampler2D u_cmdHorizConnectorTexture; // Texture for cmd-click horizontal connectors\n  uniform vec2 u_gridDimensions;            // Grid size (width, height) in cells\n  uniform vec2 u_textureResolution;         // State Texture size (width, height) in pixels\n  uniform float u_radiusA;                  // Outer radius (base value)\n  uniform float u_radiusB;                  // Inner radius (base value)\n  uniform float u_gridSpacing;              // Visual scale factor (from Leva)\n  uniform float u_fixedSpacing;             // Base spacing between circle centers (e.g., 0.9)\n  // World space uniforms\n  uniform vec2 u_centerOffset;              // World offset for centering grid\n  uniform vec2 u_planeSize;                 // World size of connector plane\n\n  varying vec2 vUv;\n\n  // --- SDF Helper Functions ---\n  float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n  }\n\n  // SDF function for rectangle with sharp corners\n  float sdBox2D(vec2 p, vec2 halfSize) {\n    vec2 d = abs(p) - halfSize;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n  }\n\n  // --- State Sampling Helper ---\n  float getState(ivec2 cellCoord) {\n    // Use u_textureResolution (size of stateTexture) for clamping\n    ivec2 clampedCoord = clamp(cellCoord, ivec2(0), ivec2(u_textureResolution) - ivec2(1));\n    if (cellCoord != clampedCoord) return 0.0;\n    return texelFetch(u_stateTexture, clampedCoord, 0).r;\n  }\n\n  // --- Cmd-Click Horizontal Connector Sampling ---\n  float getCmdHorizConnector(ivec2 cellCoord) {\n    // The cmd-horiz texture is (gridWidth-1) x gridHeight\n    ivec2 horizTextureSize = ivec2(u_gridDimensions.x - 1.0, u_gridDimensions.y);\n     // Check bounds against the actual size of the cmdHorizConnectorTexture\n    if (cellCoord.x < 0 || cellCoord.x >= horizTextureSize.x ||\n        cellCoord.y < 0 || cellCoord.y >= horizTextureSize.y) {\n      return 0.0;\n    }\n    // Fetch from the dedicated texture\n    return texelFetch(u_cmdHorizConnectorTexture, cellCoord, 0).r;\n  }\n\n  // --- Get Cell Center in World Space ---\n  vec2 getCellWorldCenter(ivec2 cell) {\n    // Calculate scaled spacing\n    float scaledSpacing = u_fixedSpacing * u_gridSpacing;\n    float worldX = float(cell.x) * scaledSpacing + u_centerOffset.x;\n    float worldY = float(cell.y) * scaledSpacing + u_centerOffset.y;\n    return vec2(worldX, worldY);\n  }\n\n  // --- Function to calculate SDF for a given row ---\n  float calculateConnectorSDF(ivec2 baseCell, vec2 fragPos, float worldRadA, float worldRadB, float scaledSpacing) {\n    float sdf = 1e6; // Default to outside\n\n    float cmdConn = getCmdHorizConnector(baseCell);\n    if (cmdConn > 0.0) {\n        ivec2 rightCell = baseCell + ivec2(1, 0);\n        float stateL = getState(baseCell);\n        float stateR = getState(rightCell);\n\n        if (stateL == 1.0 && stateR == 1.0) {\n            vec2 centerL = getCellWorldCenter(baseCell); // Uses scaled spacing internally now\n            vec2 centerR = getCellWorldCenter(rightCell); // Uses scaled spacing internally now\n\n            vec2 connCenter = (centerL + centerR) * 0.5;\n\n            // Use scaled spacing for width calculation too\n            float connWidth = scaledSpacing; // Width is simply the distance between centers\n            // Use inner radius (RadiusB) for thinner connector matching circle thickness\n            // Add a small epsilon to ensure overlap between rows\n            float connHeight = worldRadB * 2.0 + 0.01 * u_gridSpacing; // Added small overlap based on scale\n\n            vec2 p = fragPos - connCenter;\n\n            sdf = sdBox2D(p, vec2(connWidth * 0.5, connHeight * 0.5));\n        }\n    }\n    return sdf;\n  }\n\n\n  void main() {\n    // Calculate fragment's world position\n    vec2 planeOrigin = -u_planeSize * 0.5;\n    vec2 fragWorldPos = planeOrigin + vUv * u_planeSize;\n\n    // Calculate scaled spacing consistently\n    float scaledSpacing = u_fixedSpacing * u_gridSpacing;\n\n    // Determine the potential bottom-left cell based on floor, using scaled spacing\n    // Add a small offset (0.5) before flooring to handle positions exactly on the boundary better? Maybe not needed yet.\n    vec2 gridCoord = (fragWorldPos - u_centerOffset) / scaledSpacing;\n    ivec2 cell_bl_current = ivec2(floor(gridCoord)); // Cell for the current row floor\n\n    // Define the cell for the row above\n    ivec2 cell_bl_above = cell_bl_current + ivec2(0, 1);\n\n    // Calculate world-space radii (these are already scaled by u_gridSpacing in GridScene and passed)\n    // Wait, radiusA/B are BASE values. Scale them here.\n    float worldRadiusA = u_radiusA * u_gridSpacing;\n    float worldRadiusB = u_radiusB * u_gridSpacing;\n\n    // Calculate SDF for the connector potentially in the current row\n    float sdf_current = calculateConnectorSDF(cell_bl_current, fragWorldPos, worldRadiusA, worldRadiusB, scaledSpacing);\n\n    // Calculate SDF for the connector potentially in the row above\n    float sdf_above = calculateConnectorSDF(cell_bl_above, fragWorldPos, worldRadiusA, worldRadiusB, scaledSpacing);\n\n    // The final SDF is the minimum of the two (closest connector wins)\n    float finalSdf = min(sdf_current, sdf_above);\n\n    // Final Output: Draw if inside the combined SDF\n    if (finalSdf < 0.0) {\n      float smoothFactor = fwidth(finalSdf) * 0.8; // Anti-aliasing\n      float alpha = smoothstep(smoothFactor, -smoothFactor, finalSdf);\n\n      if (alpha > 0.01) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, alpha); // Black connector\n      } else {\n        discard; // Discard transparent fragments\n      }\n    } else {\n      discard; // Discard fragments outside the shape\n    }\n  }\n`;\n// Create the shader material\nconst CmdHorizConnectorMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_stateTexture: null,\n    u_cmdHorizConnectorTexture: null,\n    u_gridDimensions: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_textureResolution: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_radiusA: BASE_RADIUS_A,\n    u_radiusB: BASE_RADIUS_B,\n    u_gridSpacing: 1.0,\n    u_fixedSpacing: FIXED_SPACING,\n    u_centerOffset: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0),\n    u_planeSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10)\n}, vertexShader, fragmentShader);\n// Extend R3F\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    CmdHorizConnectorMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CmdHorizConnectorMaterial);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/CmdHorizConnectorMaterial.tsx\n");

/***/ }),

/***/ "./components/ConnectorMaterial.tsx":
/*!******************************************!*\
  !*** ./components/ConnectorMaterial.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Define constants matching GridScene for defaults\n// Moved to top to fix linter errors\nconst BASE_GRID_SPACING = 1.0;\nconst BASE_RADIUS_A = 0.5; // Outer radius relative to spacing=1\nconst BASE_RADIUS_B = 0.4; // Inner radius relative to spacing=1\n// Fixed spacing is BASE_RADIUS_A + BASE_RADIUS_B = 0.9\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B;\n// Define connector types as constants - must match GridScene.tsx\nconst CONNECTOR_NONE = 0;\nconst CONNECTOR_DIAG_TL_BR = 1; // Diagonal \\\nconst CONNECTOR_DIAG_BL_TR = 2; // Diagonal /\nconst CONNECTOR_HORIZ_CMD = 3; // New: Cmd-click horizontal connector\n// Vertex shader: Pass UVs\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader: Updated to use world space coordinates\nconst fragmentShader = /*glsl*/ `\n  uniform sampler2D u_stateTexture;\n  uniform sampler2D u_intendedConnectorTexture;\n  uniform vec2 u_gridDimensions;    // Grid size (width, height) in cells\n  uniform vec2 u_textureResolution; // Texture size (width, height) in pixels\n  uniform float u_radiusA;          // Outer radius (base value)\n  uniform float u_radiusB;          // Inner radius (base value)\n  uniform float u_gridSpacing;      // Visual scale factor\n  // World space uniforms\n  uniform vec2 u_centerOffset;      // World offset for centering grid\n  uniform vec2 u_planeSize;         // World size of connector plane\n\n  varying vec2 vUv;\n\n  // --- SDF Helper Functions ---\n  float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n  }\n\n  float sdBox(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n  }\n\n  float sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n  }\n\n  float sdCapsule(vec2 p, vec2 a, vec2 b, float r) {\n    return sdSegment(p, a, b) - r;\n  }\n\n  float opUnion(float d1, float d2) { return min(d1, d2); }\n  float opIntersection(float d1, float d2) { return max(d1, d2); }\n  float opSubtraction(float d1, float d2) { return max(d1, -d2); }\n\n  // --- State Sampling Helper ---\n  float getState(ivec2 cellCoord) {\n    ivec2 clampedCoord = clamp(cellCoord, ivec2(0), ivec2(u_textureResolution) - ivec2(1));\n    if (cellCoord != clampedCoord) return 0.0;\n    return texelFetch(u_stateTexture, clampedCoord, 0).r;\n  }\n\n  // --- Intended Connector Sampling ---\n  float getIntendedConnector(ivec2 cellCoord) {\n    ivec2 maxCoord = ivec2(u_textureResolution) - ivec2(1);\n    if (cellCoord.x < 0 || cellCoord.x >= maxCoord.x || \n        cellCoord.y < 0 || cellCoord.y >= maxCoord.y) {\n      return 0.0;\n    }\n    return texelFetch(u_intendedConnectorTexture, cellCoord, 0).r;\n  }\n\n  // --- Get Cell Center in World Space ---\n  vec2 getCellWorldCenter(ivec2 cell) {\n    float worldX = float(cell.x) * ${FIXED_SPACING} + u_centerOffset.x;\n    float worldY = float(cell.y) * ${FIXED_SPACING} + u_centerOffset.y;\n    return vec2(worldX, worldY);\n  }\n\n  void main() {\n    // Calculate fragment's world position\n    vec2 planeOrigin = -u_planeSize * 0.5; // Assuming plane is centered at (0,0)\n    vec2 fragWorldPos = planeOrigin + vUv * u_planeSize;\n    \n    // Determine which cell this fragment is in (find nearest cell)\n    vec2 gridCoord = (fragWorldPos - u_centerOffset) / ${FIXED_SPACING};\n    ivec2 cell_bl = ivec2(floor(gridCoord));\n    \n    // Define neighbor cells\n    ivec2 cell_br = cell_bl + ivec2(1, 0);\n    ivec2 cell_tl = cell_bl + ivec2(0, 1);\n    ivec2 cell_tr = cell_bl + ivec2(1, 1);\n\n    // Get states for all 4 cells around this fragment\n    float state_bl = getState(cell_bl);\n    float state_br = getState(cell_br);\n    float state_tl = getState(cell_tl);\n    float state_tr = getState(cell_tr);\n\n    // Get intended connector for this cell group\n    float intendedConnector = getIntendedConnector(cell_bl);\n\n    // Get cell centers in world space\n    vec2 center_bl = getCellWorldCenter(cell_bl);\n    vec2 center_br = getCellWorldCenter(cell_br);\n    vec2 center_tl = getCellWorldCenter(cell_tl);\n    vec2 center_tr = getCellWorldCenter(cell_tr);\n\n    // Calculate bounding box in world space\n    vec2 bboxCenter = (center_bl + center_br + center_tl + center_tr) * 0.25;\n    vec2 bboxHalfSize = vec2(${FIXED_SPACING} * 0.5);\n\n    // Calculate world-space radii\n    float worldRadiusA = u_radiusA * u_gridSpacing;\n    float worldRadiusB = u_radiusB * u_gridSpacing;\n\n    float finalSdf = 1e6;\n\n    // --- Diagonal \\\\ (TL to BR) Connector ---\n    if (state_tl == 1.0 && state_br == 1.0 && intendedConnector == 1.0) {\n      // Create connector path\n      float sdf_capsule_tl_br = sdCapsule(fragWorldPos, center_tl, center_br, worldRadiusB);\n      \n      // Must be outside the outer circles of TR and BL\n      float sdf_outside_tr_outer = sdCircle(fragWorldPos - center_tr, worldRadiusA);\n      float sdf_outside_bl_outer = sdCircle(fragWorldPos - center_bl, worldRadiusA);\n      \n      // Combine all constraints\n      float sdf_diag1 = sdf_capsule_tl_br;\n      sdf_diag1 = max(sdf_diag1, -sdf_outside_tr_outer);\n      sdf_diag1 = max(sdf_diag1, -sdf_outside_bl_outer);\n\n      finalSdf = min(finalSdf, sdf_diag1);\n    }\n\n    // --- Diagonal / (BL to TR) Connector ---\n    if (state_bl == 1.0 && state_tr == 1.0 && intendedConnector == 2.0) {\n      // Create connector path\n      float sdf_capsule_bl_tr = sdCapsule(fragWorldPos, center_bl, center_tr, worldRadiusB);\n      \n      // Must be outside the outer circles of TL and BR\n      float sdf_outside_tl_outer = sdCircle(fragWorldPos - center_tl, worldRadiusA);\n      float sdf_outside_br_outer = sdCircle(fragWorldPos - center_br, worldRadiusA);\n      \n      // Combine all constraints\n      float sdf_diag2 = sdf_capsule_bl_tr;\n      sdf_diag2 = max(sdf_diag2, -sdf_outside_tl_outer);\n      sdf_diag2 = max(sdf_diag2, -sdf_outside_br_outer);\n\n      finalSdf = min(finalSdf, sdf_diag2);\n    }\n\n    // --- Horizontal (BL to BR) Connector ---\n    if (state_bl == 1.0 && state_br == 1.0 && intendedConnector == 4.0) {\n      float sdf_h_bottom = sdCapsule(fragWorldPos, center_bl, center_br, worldRadiusB);\n      finalSdf = min(finalSdf, sdf_h_bottom);\n    }\n\n    // --- Horizontal (TL to TR) Connector ---\n    if (state_tl == 1.0 && state_tr == 1.0 && intendedConnector == 3.0) {\n      float sdf_h_top = sdCapsule(fragWorldPos, center_tl, center_tr, worldRadiusB);\n      finalSdf = min(finalSdf, sdf_h_top);\n    }\n\n    // --- Final Output with Anti-aliasing ---\n    if (finalSdf < 0.0) {\n      float smoothFactor = fwidth(finalSdf) * 0.8;\n      float alpha = smoothstep(smoothFactor, -smoothFactor, finalSdf);\n      \n      if (alpha > 0.01) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\n      } else {\n        discard;\n      }\n    } else {\n      discard;\n    }\n  }\n`;\n// Create the shader material\nconst ConnectorMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_stateTexture: null,\n    u_intendedConnectorTexture: null,\n    u_gridDimensions: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_textureResolution: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_radiusA: BASE_RADIUS_A,\n    u_radiusB: BASE_RADIUS_B,\n    u_gridSpacing: BASE_GRID_SPACING,\n    // World space uniforms\n    u_centerOffset: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0),\n    u_planeSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10)\n}, vertexShader, fragmentShader);\n// Extend R3F\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    ConnectorMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConnectorMaterial); // Define constants matching GridScene for defaults (optional, but helps IDE)\n // Moved to top - Removing these commented out versions\n // const BASE_GRID_SPACING = 1.0;\n // const BASE_RADIUS_A = 0.5;\n // const BASE_RADIUS_B = 0.4; \n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0Nvbm5lY3Rvck1hdGVyaWFsLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0I7QUFDb0I7QUFDUDtBQUU1QyxtREFBbUQ7QUFDbkQsb0NBQW9DO0FBQ3BDLE1BQU1HLG9CQUFvQjtBQUMxQixNQUFNQyxnQkFBZ0IsS0FBSyxxQ0FBcUM7QUFDaEUsTUFBTUMsZ0JBQWdCLEtBQUsscUNBQXFDO0FBQ2hFLHVEQUF1RDtBQUN2RCxNQUFNQyxnQkFBZ0JGLGdCQUFnQkM7QUFFdEMsaUVBQWlFO0FBQ2pFLE1BQU1FLGlCQUFpQjtBQUN2QixNQUFNQyx1QkFBdUIsR0FBRyxhQUFhO0FBQzdDLE1BQU1DLHVCQUF1QixHQUFHLGFBQWE7QUFDN0MsTUFBTUMsc0JBQXNCLEdBQUksc0NBQXNDO0FBRXRFLDBCQUEwQjtBQUMxQixNQUFNQyxlQUFlLE1BQU0sR0FBRyxDQUFDOzs7Ozs7QUFNL0IsQ0FBQztBQUVELDBEQUEwRDtBQUMxRCxNQUFNQyxpQkFBaUIsTUFBTSxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0F5REUsRUFBRU4sY0FBYzttQ0FDaEIsRUFBRUEsY0FBYzs7Ozs7Ozs7Ozt1REFVSSxFQUFFQSxjQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQXlCMUMsRUFBRUEsY0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvRTdDLENBQUM7QUFFRCw2QkFBNkI7QUFDN0IsTUFBTU8sb0JBQW9CWixpRUFBY0EsQ0FDdEM7SUFDRWEsZ0JBQWdCO0lBQ2hCQyw0QkFBNEI7SUFDNUJDLGtCQUFrQixJQUFJaEIsMENBQWEsQ0FBQyxJQUFJO0lBQ3hDa0IscUJBQXFCLElBQUlsQiwwQ0FBYSxDQUFDLElBQUk7SUFDM0NtQixXQUFXZjtJQUNYZ0IsV0FBV2Y7SUFDWGdCLGVBQWVsQjtJQUNmLHVCQUF1QjtJQUN2Qm1CLGdCQUFnQixJQUFJdEIsMENBQWEsQ0FBQyxHQUFHO0lBQ3JDdUIsYUFBYSxJQUFJdkIsMENBQWEsQ0FBQyxJQUFJO0FBQ3JDLEdBQ0FXLGNBQ0FDO0FBR0YsYUFBYTtBQUNiViwwREFBTUEsQ0FBQztJQUFFVztBQUFrQjtBQVczQixpRUFBZUEsaUJBQWlCQSxFQUFDLENBQ2pDLDZFQUE2RTtDQUM3RSx1REFBdUQ7Q0FDdkQsaUNBQWlDO0NBQ2pDLDZCQUE2QjtDQUM3Qiw4QkFBOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9jb21wb25lbnRzL0Nvbm5lY3Rvck1hdGVyaWFsLnRzeD82MjUzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IHNoYWRlck1hdGVyaWFsIH0gZnJvbSAnQHJlYWN0LXRocmVlL2RyZWknO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnQHJlYWN0LXRocmVlL2ZpYmVyJztcblxuLy8gRGVmaW5lIGNvbnN0YW50cyBtYXRjaGluZyBHcmlkU2NlbmUgZm9yIGRlZmF1bHRzXG4vLyBNb3ZlZCB0byB0b3AgdG8gZml4IGxpbnRlciBlcnJvcnNcbmNvbnN0IEJBU0VfR1JJRF9TUEFDSU5HID0gMS4wO1xuY29uc3QgQkFTRV9SQURJVVNfQSA9IDAuNTsgLy8gT3V0ZXIgcmFkaXVzIHJlbGF0aXZlIHRvIHNwYWNpbmc9MVxuY29uc3QgQkFTRV9SQURJVVNfQiA9IDAuNDsgLy8gSW5uZXIgcmFkaXVzIHJlbGF0aXZlIHRvIHNwYWNpbmc9MVxuLy8gRml4ZWQgc3BhY2luZyBpcyBCQVNFX1JBRElVU19BICsgQkFTRV9SQURJVVNfQiA9IDAuOVxuY29uc3QgRklYRURfU1BBQ0lORyA9IEJBU0VfUkFESVVTX0EgKyBCQVNFX1JBRElVU19CO1xuXG4vLyBEZWZpbmUgY29ubmVjdG9yIHR5cGVzIGFzIGNvbnN0YW50cyAtIG11c3QgbWF0Y2ggR3JpZFNjZW5lLnRzeFxuY29uc3QgQ09OTkVDVE9SX05PTkUgPSAwO1xuY29uc3QgQ09OTkVDVE9SX0RJQUdfVExfQlIgPSAxOyAvLyBEaWFnb25hbCBcXFxuY29uc3QgQ09OTkVDVE9SX0RJQUdfQkxfVFIgPSAyOyAvLyBEaWFnb25hbCAvXG5jb25zdCBDT05ORUNUT1JfSE9SSVpfQ01EID0gMzsgIC8vIE5ldzogQ21kLWNsaWNrIGhvcml6b250YWwgY29ubmVjdG9yXG5cbi8vIFZlcnRleCBzaGFkZXI6IFBhc3MgVVZzXG5jb25zdCB2ZXJ0ZXhTaGFkZXIgPSAvKmdsc2wqLyBgXG4gIHZhcnlpbmcgdmVjMiB2VXY7XG4gIHZvaWQgbWFpbigpIHtcbiAgICB2VXYgPSB1djtcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICB9XG5gO1xuXG4vLyBGcmFnbWVudCBzaGFkZXI6IFVwZGF0ZWQgdG8gdXNlIHdvcmxkIHNwYWNlIGNvb3JkaW5hdGVzXG5jb25zdCBmcmFnbWVudFNoYWRlciA9IC8qZ2xzbCovIGBcbiAgdW5pZm9ybSBzYW1wbGVyMkQgdV9zdGF0ZVRleHR1cmU7XG4gIHVuaWZvcm0gc2FtcGxlcjJEIHVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlO1xuICB1bmlmb3JtIHZlYzIgdV9ncmlkRGltZW5zaW9uczsgICAgLy8gR3JpZCBzaXplICh3aWR0aCwgaGVpZ2h0KSBpbiBjZWxsc1xuICB1bmlmb3JtIHZlYzIgdV90ZXh0dXJlUmVzb2x1dGlvbjsgLy8gVGV4dHVyZSBzaXplICh3aWR0aCwgaGVpZ2h0KSBpbiBwaXhlbHNcbiAgdW5pZm9ybSBmbG9hdCB1X3JhZGl1c0E7ICAgICAgICAgIC8vIE91dGVyIHJhZGl1cyAoYmFzZSB2YWx1ZSlcbiAgdW5pZm9ybSBmbG9hdCB1X3JhZGl1c0I7ICAgICAgICAgIC8vIElubmVyIHJhZGl1cyAoYmFzZSB2YWx1ZSlcbiAgdW5pZm9ybSBmbG9hdCB1X2dyaWRTcGFjaW5nOyAgICAgIC8vIFZpc3VhbCBzY2FsZSBmYWN0b3JcbiAgLy8gV29ybGQgc3BhY2UgdW5pZm9ybXNcbiAgdW5pZm9ybSB2ZWMyIHVfY2VudGVyT2Zmc2V0OyAgICAgIC8vIFdvcmxkIG9mZnNldCBmb3IgY2VudGVyaW5nIGdyaWRcbiAgdW5pZm9ybSB2ZWMyIHVfcGxhbmVTaXplOyAgICAgICAgIC8vIFdvcmxkIHNpemUgb2YgY29ubmVjdG9yIHBsYW5lXG5cbiAgdmFyeWluZyB2ZWMyIHZVdjtcblxuICAvLyAtLS0gU0RGIEhlbHBlciBGdW5jdGlvbnMgLS0tXG4gIGZsb2F0IHNkQ2lyY2xlKHZlYzIgcCwgZmxvYXQgcikge1xuICAgIHJldHVybiBsZW5ndGgocCkgLSByO1xuICB9XG5cbiAgZmxvYXQgc2RCb3godmVjMiBwLCB2ZWMyIGIpIHtcbiAgICB2ZWMyIGQgPSBhYnMocCkgLSBiO1xuICAgIHJldHVybiBsZW5ndGgobWF4KGQsIDAuMCkpICsgbWluKG1heChkLngsIGQueSksIDAuMCk7XG4gIH1cblxuICBmbG9hdCBzZFNlZ21lbnQodmVjMiBwLCB2ZWMyIGEsIHZlYzIgYikge1xuICAgIHZlYzIgcGEgPSBwIC0gYSwgYmEgPSBiIC0gYTtcbiAgICBmbG9hdCBoID0gY2xhbXAoZG90KHBhLCBiYSkgLyBkb3QoYmEsIGJhKSwgMC4wLCAxLjApO1xuICAgIHJldHVybiBsZW5ndGgocGEgLSBiYSAqIGgpO1xuICB9XG5cbiAgZmxvYXQgc2RDYXBzdWxlKHZlYzIgcCwgdmVjMiBhLCB2ZWMyIGIsIGZsb2F0IHIpIHtcbiAgICByZXR1cm4gc2RTZWdtZW50KHAsIGEsIGIpIC0gcjtcbiAgfVxuXG4gIGZsb2F0IG9wVW5pb24oZmxvYXQgZDEsIGZsb2F0IGQyKSB7IHJldHVybiBtaW4oZDEsIGQyKTsgfVxuICBmbG9hdCBvcEludGVyc2VjdGlvbihmbG9hdCBkMSwgZmxvYXQgZDIpIHsgcmV0dXJuIG1heChkMSwgZDIpOyB9XG4gIGZsb2F0IG9wU3VidHJhY3Rpb24oZmxvYXQgZDEsIGZsb2F0IGQyKSB7IHJldHVybiBtYXgoZDEsIC1kMik7IH1cblxuICAvLyAtLS0gU3RhdGUgU2FtcGxpbmcgSGVscGVyIC0tLVxuICBmbG9hdCBnZXRTdGF0ZShpdmVjMiBjZWxsQ29vcmQpIHtcbiAgICBpdmVjMiBjbGFtcGVkQ29vcmQgPSBjbGFtcChjZWxsQ29vcmQsIGl2ZWMyKDApLCBpdmVjMih1X3RleHR1cmVSZXNvbHV0aW9uKSAtIGl2ZWMyKDEpKTtcbiAgICBpZiAoY2VsbENvb3JkICE9IGNsYW1wZWRDb29yZCkgcmV0dXJuIDAuMDtcbiAgICByZXR1cm4gdGV4ZWxGZXRjaCh1X3N0YXRlVGV4dHVyZSwgY2xhbXBlZENvb3JkLCAwKS5yO1xuICB9XG5cbiAgLy8gLS0tIEludGVuZGVkIENvbm5lY3RvciBTYW1wbGluZyAtLS1cbiAgZmxvYXQgZ2V0SW50ZW5kZWRDb25uZWN0b3IoaXZlYzIgY2VsbENvb3JkKSB7XG4gICAgaXZlYzIgbWF4Q29vcmQgPSBpdmVjMih1X3RleHR1cmVSZXNvbHV0aW9uKSAtIGl2ZWMyKDEpO1xuICAgIGlmIChjZWxsQ29vcmQueCA8IDAgfHwgY2VsbENvb3JkLnggPj0gbWF4Q29vcmQueCB8fCBcbiAgICAgICAgY2VsbENvb3JkLnkgPCAwIHx8IGNlbGxDb29yZC55ID49IG1heENvb3JkLnkpIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuICAgIHJldHVybiB0ZXhlbEZldGNoKHVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlLCBjZWxsQ29vcmQsIDApLnI7XG4gIH1cblxuICAvLyAtLS0gR2V0IENlbGwgQ2VudGVyIGluIFdvcmxkIFNwYWNlIC0tLVxuICB2ZWMyIGdldENlbGxXb3JsZENlbnRlcihpdmVjMiBjZWxsKSB7XG4gICAgZmxvYXQgd29ybGRYID0gZmxvYXQoY2VsbC54KSAqICR7RklYRURfU1BBQ0lOR30gKyB1X2NlbnRlck9mZnNldC54O1xuICAgIGZsb2F0IHdvcmxkWSA9IGZsb2F0KGNlbGwueSkgKiAke0ZJWEVEX1NQQUNJTkd9ICsgdV9jZW50ZXJPZmZzZXQueTtcbiAgICByZXR1cm4gdmVjMih3b3JsZFgsIHdvcmxkWSk7XG4gIH1cblxuICB2b2lkIG1haW4oKSB7XG4gICAgLy8gQ2FsY3VsYXRlIGZyYWdtZW50J3Mgd29ybGQgcG9zaXRpb25cbiAgICB2ZWMyIHBsYW5lT3JpZ2luID0gLXVfcGxhbmVTaXplICogMC41OyAvLyBBc3N1bWluZyBwbGFuZSBpcyBjZW50ZXJlZCBhdCAoMCwwKVxuICAgIHZlYzIgZnJhZ1dvcmxkUG9zID0gcGxhbmVPcmlnaW4gKyB2VXYgKiB1X3BsYW5lU2l6ZTtcbiAgICBcbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggY2VsbCB0aGlzIGZyYWdtZW50IGlzIGluIChmaW5kIG5lYXJlc3QgY2VsbClcbiAgICB2ZWMyIGdyaWRDb29yZCA9IChmcmFnV29ybGRQb3MgLSB1X2NlbnRlck9mZnNldCkgLyAke0ZJWEVEX1NQQUNJTkd9O1xuICAgIGl2ZWMyIGNlbGxfYmwgPSBpdmVjMihmbG9vcihncmlkQ29vcmQpKTtcbiAgICBcbiAgICAvLyBEZWZpbmUgbmVpZ2hib3IgY2VsbHNcbiAgICBpdmVjMiBjZWxsX2JyID0gY2VsbF9ibCArIGl2ZWMyKDEsIDApO1xuICAgIGl2ZWMyIGNlbGxfdGwgPSBjZWxsX2JsICsgaXZlYzIoMCwgMSk7XG4gICAgaXZlYzIgY2VsbF90ciA9IGNlbGxfYmwgKyBpdmVjMigxLCAxKTtcblxuICAgIC8vIEdldCBzdGF0ZXMgZm9yIGFsbCA0IGNlbGxzIGFyb3VuZCB0aGlzIGZyYWdtZW50XG4gICAgZmxvYXQgc3RhdGVfYmwgPSBnZXRTdGF0ZShjZWxsX2JsKTtcbiAgICBmbG9hdCBzdGF0ZV9iciA9IGdldFN0YXRlKGNlbGxfYnIpO1xuICAgIGZsb2F0IHN0YXRlX3RsID0gZ2V0U3RhdGUoY2VsbF90bCk7XG4gICAgZmxvYXQgc3RhdGVfdHIgPSBnZXRTdGF0ZShjZWxsX3RyKTtcblxuICAgIC8vIEdldCBpbnRlbmRlZCBjb25uZWN0b3IgZm9yIHRoaXMgY2VsbCBncm91cFxuICAgIGZsb2F0IGludGVuZGVkQ29ubmVjdG9yID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoY2VsbF9ibCk7XG5cbiAgICAvLyBHZXQgY2VsbCBjZW50ZXJzIGluIHdvcmxkIHNwYWNlXG4gICAgdmVjMiBjZW50ZXJfYmwgPSBnZXRDZWxsV29ybGRDZW50ZXIoY2VsbF9ibCk7XG4gICAgdmVjMiBjZW50ZXJfYnIgPSBnZXRDZWxsV29ybGRDZW50ZXIoY2VsbF9icik7XG4gICAgdmVjMiBjZW50ZXJfdGwgPSBnZXRDZWxsV29ybGRDZW50ZXIoY2VsbF90bCk7XG4gICAgdmVjMiBjZW50ZXJfdHIgPSBnZXRDZWxsV29ybGRDZW50ZXIoY2VsbF90cik7XG5cbiAgICAvLyBDYWxjdWxhdGUgYm91bmRpbmcgYm94IGluIHdvcmxkIHNwYWNlXG4gICAgdmVjMiBiYm94Q2VudGVyID0gKGNlbnRlcl9ibCArIGNlbnRlcl9iciArIGNlbnRlcl90bCArIGNlbnRlcl90cikgKiAwLjI1O1xuICAgIHZlYzIgYmJveEhhbGZTaXplID0gdmVjMigke0ZJWEVEX1NQQUNJTkd9ICogMC41KTtcblxuICAgIC8vIENhbGN1bGF0ZSB3b3JsZC1zcGFjZSByYWRpaVxuICAgIGZsb2F0IHdvcmxkUmFkaXVzQSA9IHVfcmFkaXVzQSAqIHVfZ3JpZFNwYWNpbmc7XG4gICAgZmxvYXQgd29ybGRSYWRpdXNCID0gdV9yYWRpdXNCICogdV9ncmlkU3BhY2luZztcblxuICAgIGZsb2F0IGZpbmFsU2RmID0gMWU2O1xuXG4gICAgLy8gLS0tIERpYWdvbmFsIFxcXFwgKFRMIHRvIEJSKSBDb25uZWN0b3IgLS0tXG4gICAgaWYgKHN0YXRlX3RsID09IDEuMCAmJiBzdGF0ZV9iciA9PSAxLjAgJiYgaW50ZW5kZWRDb25uZWN0b3IgPT0gMS4wKSB7XG4gICAgICAvLyBDcmVhdGUgY29ubmVjdG9yIHBhdGhcbiAgICAgIGZsb2F0IHNkZl9jYXBzdWxlX3RsX2JyID0gc2RDYXBzdWxlKGZyYWdXb3JsZFBvcywgY2VudGVyX3RsLCBjZW50ZXJfYnIsIHdvcmxkUmFkaXVzQik7XG4gICAgICBcbiAgICAgIC8vIE11c3QgYmUgb3V0c2lkZSB0aGUgb3V0ZXIgY2lyY2xlcyBvZiBUUiBhbmQgQkxcbiAgICAgIGZsb2F0IHNkZl9vdXRzaWRlX3RyX291dGVyID0gc2RDaXJjbGUoZnJhZ1dvcmxkUG9zIC0gY2VudGVyX3RyLCB3b3JsZFJhZGl1c0EpO1xuICAgICAgZmxvYXQgc2RmX291dHNpZGVfYmxfb3V0ZXIgPSBzZENpcmNsZShmcmFnV29ybGRQb3MgLSBjZW50ZXJfYmwsIHdvcmxkUmFkaXVzQSk7XG4gICAgICBcbiAgICAgIC8vIENvbWJpbmUgYWxsIGNvbnN0cmFpbnRzXG4gICAgICBmbG9hdCBzZGZfZGlhZzEgPSBzZGZfY2Fwc3VsZV90bF9icjtcbiAgICAgIHNkZl9kaWFnMSA9IG1heChzZGZfZGlhZzEsIC1zZGZfb3V0c2lkZV90cl9vdXRlcik7XG4gICAgICBzZGZfZGlhZzEgPSBtYXgoc2RmX2RpYWcxLCAtc2RmX291dHNpZGVfYmxfb3V0ZXIpO1xuXG4gICAgICBmaW5hbFNkZiA9IG1pbihmaW5hbFNkZiwgc2RmX2RpYWcxKTtcbiAgICB9XG5cbiAgICAvLyAtLS0gRGlhZ29uYWwgLyAoQkwgdG8gVFIpIENvbm5lY3RvciAtLS1cbiAgICBpZiAoc3RhdGVfYmwgPT0gMS4wICYmIHN0YXRlX3RyID09IDEuMCAmJiBpbnRlbmRlZENvbm5lY3RvciA9PSAyLjApIHtcbiAgICAgIC8vIENyZWF0ZSBjb25uZWN0b3IgcGF0aFxuICAgICAgZmxvYXQgc2RmX2NhcHN1bGVfYmxfdHIgPSBzZENhcHN1bGUoZnJhZ1dvcmxkUG9zLCBjZW50ZXJfYmwsIGNlbnRlcl90ciwgd29ybGRSYWRpdXNCKTtcbiAgICAgIFxuICAgICAgLy8gTXVzdCBiZSBvdXRzaWRlIHRoZSBvdXRlciBjaXJjbGVzIG9mIFRMIGFuZCBCUlxuICAgICAgZmxvYXQgc2RmX291dHNpZGVfdGxfb3V0ZXIgPSBzZENpcmNsZShmcmFnV29ybGRQb3MgLSBjZW50ZXJfdGwsIHdvcmxkUmFkaXVzQSk7XG4gICAgICBmbG9hdCBzZGZfb3V0c2lkZV9icl9vdXRlciA9IHNkQ2lyY2xlKGZyYWdXb3JsZFBvcyAtIGNlbnRlcl9iciwgd29ybGRSYWRpdXNBKTtcbiAgICAgIFxuICAgICAgLy8gQ29tYmluZSBhbGwgY29uc3RyYWludHNcbiAgICAgIGZsb2F0IHNkZl9kaWFnMiA9IHNkZl9jYXBzdWxlX2JsX3RyO1xuICAgICAgc2RmX2RpYWcyID0gbWF4KHNkZl9kaWFnMiwgLXNkZl9vdXRzaWRlX3RsX291dGVyKTtcbiAgICAgIHNkZl9kaWFnMiA9IG1heChzZGZfZGlhZzIsIC1zZGZfb3V0c2lkZV9icl9vdXRlcik7XG5cbiAgICAgIGZpbmFsU2RmID0gbWluKGZpbmFsU2RmLCBzZGZfZGlhZzIpO1xuICAgIH1cblxuICAgIC8vIC0tLSBIb3Jpem9udGFsIChCTCB0byBCUikgQ29ubmVjdG9yIC0tLVxuICAgIGlmIChzdGF0ZV9ibCA9PSAxLjAgJiYgc3RhdGVfYnIgPT0gMS4wICYmIGludGVuZGVkQ29ubmVjdG9yID09IDQuMCkge1xuICAgICAgZmxvYXQgc2RmX2hfYm90dG9tID0gc2RDYXBzdWxlKGZyYWdXb3JsZFBvcywgY2VudGVyX2JsLCBjZW50ZXJfYnIsIHdvcmxkUmFkaXVzQik7XG4gICAgICBmaW5hbFNkZiA9IG1pbihmaW5hbFNkZiwgc2RmX2hfYm90dG9tKTtcbiAgICB9XG5cbiAgICAvLyAtLS0gSG9yaXpvbnRhbCAoVEwgdG8gVFIpIENvbm5lY3RvciAtLS1cbiAgICBpZiAoc3RhdGVfdGwgPT0gMS4wICYmIHN0YXRlX3RyID09IDEuMCAmJiBpbnRlbmRlZENvbm5lY3RvciA9PSAzLjApIHtcbiAgICAgIGZsb2F0IHNkZl9oX3RvcCA9IHNkQ2Fwc3VsZShmcmFnV29ybGRQb3MsIGNlbnRlcl90bCwgY2VudGVyX3RyLCB3b3JsZFJhZGl1c0IpO1xuICAgICAgZmluYWxTZGYgPSBtaW4oZmluYWxTZGYsIHNkZl9oX3RvcCk7XG4gICAgfVxuXG4gICAgLy8gLS0tIEZpbmFsIE91dHB1dCB3aXRoIEFudGktYWxpYXNpbmcgLS0tXG4gICAgaWYgKGZpbmFsU2RmIDwgMC4wKSB7XG4gICAgICBmbG9hdCBzbW9vdGhGYWN0b3IgPSBmd2lkdGgoZmluYWxTZGYpICogMC44O1xuICAgICAgZmxvYXQgYWxwaGEgPSBzbW9vdGhzdGVwKHNtb290aEZhY3RvciwgLXNtb290aEZhY3RvciwgZmluYWxTZGYpO1xuICAgICAgXG4gICAgICBpZiAoYWxwaGEgPiAwLjAxKSB7XG4gICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgYWxwaGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzY2FyZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlzY2FyZDtcbiAgICB9XG4gIH1cbmA7XG5cbi8vIENyZWF0ZSB0aGUgc2hhZGVyIG1hdGVyaWFsXG5jb25zdCBDb25uZWN0b3JNYXRlcmlhbCA9IHNoYWRlck1hdGVyaWFsKFxuICB7XG4gICAgdV9zdGF0ZVRleHR1cmU6IG51bGwsIFxuICAgIHVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlOiBudWxsLFxuICAgIHVfZ3JpZERpbWVuc2lvbnM6IG5ldyBUSFJFRS5WZWN0b3IyKDEwLCAxMCksXG4gICAgdV90ZXh0dXJlUmVzb2x1dGlvbjogbmV3IFRIUkVFLlZlY3RvcjIoMTAsIDEwKSxcbiAgICB1X3JhZGl1c0E6IEJBU0VfUkFESVVTX0EsXG4gICAgdV9yYWRpdXNCOiBCQVNFX1JBRElVU19CLFxuICAgIHVfZ3JpZFNwYWNpbmc6IEJBU0VfR1JJRF9TUEFDSU5HLFxuICAgIC8vIFdvcmxkIHNwYWNlIHVuaWZvcm1zXG4gICAgdV9jZW50ZXJPZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IyKDAsIDApLFxuICAgIHVfcGxhbmVTaXplOiBuZXcgVEhSRUUuVmVjdG9yMigxMCwgMTApLFxuICB9LFxuICB2ZXJ0ZXhTaGFkZXIsXG4gIGZyYWdtZW50U2hhZGVyXG4pO1xuXG4vLyBFeHRlbmQgUjNGXG5leHRlbmQoeyBDb25uZWN0b3JNYXRlcmlhbCB9KTtcblxuLy8gRGVmaW5lIFR5cGVTY3JpcHQgdHlwZSBmb3IgSlNYIHVzYWdlXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBKU1gge1xuICAgIGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyB7XG4gICAgICBjb25uZWN0b3JNYXRlcmlhbDogYW55OyBcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdG9yTWF0ZXJpYWw7XG4vLyBEZWZpbmUgY29uc3RhbnRzIG1hdGNoaW5nIEdyaWRTY2VuZSBmb3IgZGVmYXVsdHMgKG9wdGlvbmFsLCBidXQgaGVscHMgSURFKVxuLy8gTW92ZWQgdG8gdG9wIC0gUmVtb3ZpbmcgdGhlc2UgY29tbWVudGVkIG91dCB2ZXJzaW9uc1xuLy8gY29uc3QgQkFTRV9HUklEX1NQQUNJTkcgPSAxLjA7XG4vLyBjb25zdCBCQVNFX1JBRElVU19BID0gMC41O1xuLy8gY29uc3QgQkFTRV9SQURJVVNfQiA9IDAuNDsgXG4iXSwibmFtZXMiOlsiVEhSRUUiLCJzaGFkZXJNYXRlcmlhbCIsImV4dGVuZCIsIkJBU0VfR1JJRF9TUEFDSU5HIiwiQkFTRV9SQURJVVNfQSIsIkJBU0VfUkFESVVTX0IiLCJGSVhFRF9TUEFDSU5HIiwiQ09OTkVDVE9SX05PTkUiLCJDT05ORUNUT1JfRElBR19UTF9CUiIsIkNPTk5FQ1RPUl9ESUFHX0JMX1RSIiwiQ09OTkVDVE9SX0hPUklaX0NNRCIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiQ29ubmVjdG9yTWF0ZXJpYWwiLCJ1X3N0YXRlVGV4dHVyZSIsInVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlIiwidV9ncmlkRGltZW5zaW9ucyIsIlZlY3RvcjIiLCJ1X3RleHR1cmVSZXNvbHV0aW9uIiwidV9yYWRpdXNBIiwidV9yYWRpdXNCIiwidV9ncmlkU3BhY2luZyIsInVfY2VudGVyT2Zmc2V0IiwidV9wbGFuZVNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ConnectorMaterial.tsx\n");

/***/ }),

/***/ "./components/GridScene.tsx":
/*!**********************************!*\
  !*** ./components/GridScene.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leva */ \"leva\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leva__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CircleMaterial */ \"./components/CircleMaterial.tsx\");\n/* harmony import */ var _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectorMaterial */ \"./components/ConnectorMaterial.tsx\");\n/* harmony import */ var _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CmdHorizConnectorMaterial */ \"./components/CmdHorizConnectorMaterial.tsx\");\n/* harmony import */ var three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/examples/jsm/libs/stats.module */ \"./node_modules/three/examples/jsm/libs/stats.module.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants */ \"./components/constants.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_2__, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__]);\n([three__WEBPACK_IMPORTED_MODULE_2__, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n // Assuming constants are moved\n// === Feature 1: Grid Data & Configuration ===\n// Constants for base geometry - REMOVED, now imported\n// const BASE_RADIUS_A = 0.5; // Outer radius\n// const BASE_RADIUS_B = 0.4; // Inner radius\n// const FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.9\nconst BASE_GRID_SPACING = 1.0; // Keep for reference if needed\n// Helper Functions\nconst getIndex = (row, col, gridWidth)=>{\n    return row * gridWidth + col;\n};\nconst getCoords = (index, gridWidth)=>{\n    const row = Math.floor(index / gridWidth);\n    const col = index % gridWidth;\n    return {\n        row,\n        col\n    };\n};\n// Modified to use fixed spacing\nconst getCenterOffset = (gridWidth, gridHeight, spacing)=>{\n    const totalWidth = (gridWidth - 1) * spacing;\n    const totalHeight = (gridHeight - 1) * spacing;\n    return new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(-totalWidth / 2, -totalHeight / 2);\n};\n// Modified to use fixed spacing\nconst getWorldPosition = (row, col, gridWidth, gridHeight, spacing, centerOffset)=>{\n    const x = col * spacing + centerOffset.x;\n    const y = row * spacing + centerOffset.y;\n    return {\n        x,\n        y\n    };\n};\n// Define connector types as constants\nconst CONNECTOR_NONE = 0;\nconst CONNECTOR_DIAG_TL_BR = 1; // Diagonal \\\nconst CONNECTOR_DIAG_BL_TR = 2; // Diagonal /\nconst CONNECTOR_HORIZ_T = 3; // Horizontal Top\nconst CONNECTOR_HORIZ_B = 4; // Horizontal Bottom\nconst CONNECTOR_HORIZ_CMD = 5; // New: Cmd-click horizontal connector\n// === GridScene Component ===\n// Dummy object for matrix calculations\nconst dummy = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\nconst tempMatrix = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst tempVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n// New: Helper for horizontal cmd-click connector key generation\nconst getHorizCmdConnectorKey = (x, y)=>`hcmd:${x},${y}`;\nconst GridScene = ()=>{\n    // Leva controls for grid parameters\n    const { GRID_WIDTH, GRID_HEIGHT, visualScale } = (0,leva__WEBPACK_IMPORTED_MODULE_3__.useControls)(\"Grid\", {\n        GRID_WIDTH: {\n            value: 10,\n            min: 2,\n            max: 100,\n            step: 1\n        },\n        GRID_HEIGHT: {\n            value: 10,\n            min: 2,\n            max: 100,\n            step: 1\n        },\n        visualScale: {\n            value: 1.0,\n            min: 0.1,\n            max: 5,\n            step: 0.1,\n            label: \"Visual Scale\" // Updated label\n        }\n    });\n    // Add dynamic instance management\n    const instanceCount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        // Only create as many instances as visible in viewport\n        const visibleWidth = Math.min(GRID_WIDTH, Math.ceil(window.innerWidth / (_constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING * visualScale)) + 2);\n        const visibleHeight = Math.min(GRID_HEIGHT, Math.ceil(window.innerHeight / (_constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING * visualScale)) + 2);\n        return visibleWidth * visibleHeight;\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        visualScale\n    ]);\n    // Derived values calculation using useMemo for optimization\n    const { TOTAL_CIRCLES, centerOffset, planeWidth, planeHeight// Based on FIXED_SPACING\n     } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const total = GRID_WIDTH * GRID_HEIGHT;\n        // Offset and plane dimensions depend on the fixed spacing between centers\n        const offset = getCenterOffset(GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        // Calculate actual grid extent based on fixed spacing\n        const width = (GRID_WIDTH > 1 ? (GRID_WIDTH - 1) * _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING : 0) + visualScale * _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A * 2; // Add diameter margin\n        const height = (GRID_HEIGHT > 1 ? (GRID_HEIGHT - 1) * _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING : 0) + visualScale * _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A * 2; // Add diameter margin\n        console.log(`Layout Spacing: ${_constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING.toFixed(2)}`);\n        console.log(`Calculated Center Offset: x=${offset.x.toFixed(2)}, y=${offset.y.toFixed(2)}`);\n        console.log(`Calculated Plane Size: w=${width.toFixed(2)}, h=${height.toFixed(2)}`);\n        return {\n            TOTAL_CIRCLES: total,\n            centerOffset: offset,\n            planeWidth: width,\n            planeHeight: height\n        };\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        visualScale\n    ]); // Depend on grid size and visual scale for plane margin\n    // Refs for mesh and material\n    const meshRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const materialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Use 'any' or specific type for CircleMaterial\n    const activationAttributeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const connectorMaterialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Ref for connector material\n    // === Feature 3: Circle Activation State ===\n    const [activationState, setActivationState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>new Float32Array(TOTAL_CIRCLES).fill(0.0) // 0.0 inactive, 1.0 active\n    );\n    // New: Add horizontal cmd-click connector state\n    const [cmdHorizConnectors, setCmdHorizConnectors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // === Feature 8: Connector Interaction State and Helpers (Moved UP) ===\n    const [intendedConnectors, setIntendedConnectors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // Helper to get the key for a 2x2 cell group (Moved UP)\n    const getCellGroupKey = (cellX, cellY)=>`${cellX},${cellY}`;\n    // Helper to get the intended connector for a 2x2 cell group (Moved UP)\n    const getIntendedConnector = (cellX, cellY)=>{\n        // Check bounds first\n        if (cellX < 0 || cellX >= GRID_WIDTH - 1 || cellY < 0 || cellY >= GRID_HEIGHT - 1) {\n            return CONNECTOR_NONE;\n        }\n        const key = getCellGroupKey(cellX, cellY);\n        return intendedConnectors[key] || CONNECTOR_NONE;\n    };\n    // State needs to be reset if TOTAL_CIRCLES changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Resetting activation state due to grid size change\");\n        setActivationState(new Float32Array(TOTAL_CIRCLES).fill(0.0));\n        setIntendedConnectors({}); // Also reset intended connectors\n        setCmdHorizConnectors({}); // Also reset cmd-horiz connectors\n    }, [\n        TOTAL_CIRCLES\n    ]);\n    // Update buffer attribute when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (activationAttributeRef.current) {\n            activationAttributeRef.current.array = activationState;\n            activationAttributeRef.current.needsUpdate = true;\n        // console.log('Updated activation buffer attribute.'); // Less noisy log\n        }\n    }, [\n        activationState\n    ]);\n    // === Feature 2: Static Circle Rendering ===\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        // Calculate and set instance matrices\n        for(let index = 0; index < TOTAL_CIRCLES; index++){\n            const { row, col } = getCoords(index, GRID_WIDTH);\n            const { x, y } = getWorldPosition(row, col, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n            dummy.position.set(x, y, 0); // Z=0 for circles\n            // Retrieve existing scale/rotation before setting position to avoid overwriting scale effect\n            const currentMatrix = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\n            meshRef.current.getMatrixAt(index, currentMatrix);\n            const position = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            const quaternion = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n            const scaleVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            currentMatrix.decompose(position, quaternion, scaleVec);\n            // Update only position\n            position.set(x, y, 0);\n            dummy.matrix.compose(position, quaternion, scaleVec); // Recompose with original scale/rotation\n            meshRef.current.setMatrixAt(index, dummy.matrix);\n        }\n        meshRef.current.instanceMatrix.needsUpdate = true;\n    // console.log(`Updated ${TOTAL_CIRCLES} instance matrices (position).`);\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n        TOTAL_CIRCLES,\n        centerOffset\n    ]);\n    // Update shader uniforms when scaled radii change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (materialRef.current) {\n            // Shader expects radii relative to plane size (0.0 to 0.5 range if plane is size 1)\n            // Let's use plane size 1 and scale radii to 0.0-0.5 range for shader.\n            materialRef.current.uniforms.u_radiusA.value = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A; // Use base radius relative to plane size 1\n            materialRef.current.uniforms.u_radiusB.value = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B; // Use base radius relative to plane size 1\n            // Scale the whole instance instead to match spacing\n            console.log(`Updated material radii uniforms: A=${_constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A}, B=${_constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B}`);\n        }\n    }, []); // Depend on scaled radii, though using base for uniform now\n    // Adjust instance scale based on spacing\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        const scale = visualScale; // Use the leva control value for scale\n        console.log(`Updating instance scales to: ${scale.toFixed(2)}`);\n        for(let index = 0; index < TOTAL_CIRCLES; index++){\n            meshRef.current.getMatrixAt(index, tempMatrix);\n            const position = tempVec.setFromMatrixPosition(tempMatrix);\n            const quaternion = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion().setFromRotationMatrix(tempMatrix);\n            // Update only scale\n            const scaleVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().set(scale, scale, 1);\n            tempMatrix.compose(position, quaternion, scaleVec);\n            meshRef.current.setMatrixAt(index, tempMatrix);\n        }\n        meshRef.current.instanceMatrix.needsUpdate = true;\n    }, [\n        visualScale,\n        TOTAL_CIRCLES\n    ]); // Depends on scale control and count\n    // === Feature 4: Circle Interaction (Now uses helpers defined above) ===\n    const handleCircleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        event.stopPropagation();\n        if (event.instanceId === undefined || !meshRef.current) return;\n        const index = event.instanceId;\n        const { row: y, col: x } = getCoords(index, GRID_WIDTH);\n        console.log(\"Circle clicked:\", {\n            index,\n            x,\n            y,\n            isCmdClick: event.metaKey || event.ctrlKey,\n            point: event.point,\n            currentState: activationState[index]\n        });\n        // Get the center of the clicked instance\n        meshRef.current.getMatrixAt(index, tempMatrix);\n        const instanceCenter = tempVec.setFromMatrixPosition(tempMatrix);\n        // Calculate distance from click point to instance center\n        const distFromCenter = event.point.distanceTo(instanceCenter);\n        // Get the CURRENT world-space inner radius\n        const currentInnerRadius = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B * visualScale;\n        console.log(\"Click details:\", {\n            distFromCenter,\n            currentInnerRadius,\n            isInside: distFromCenter <= currentInnerRadius\n        });\n        // Check if click is inside the inner circle\n        if (distFromCenter <= currentInnerRadius) {\n            // Check if this is a cmd/ctrl click\n            if (event.metaKey || event.ctrlKey) {\n                // Check conditions for horizontal connector\n                const rightIndex = getIndex(y, x + 1, GRID_WIDTH);\n                const canConnectBase = x < GRID_WIDTH - 1 && activationState[index] === 1.0 && activationState[rightIndex] === 1.0;\n                // --- NEW: Check for blocking diagonal connectors ---\n                const connectorBelow = getIntendedConnector(x, y - 1);\n                const connectorAdjacent = getIntendedConnector(x, y);\n                const isBlockedByDiagonal = connectorBelow === CONNECTOR_DIAG_TL_BR || connectorBelow === CONNECTOR_DIAG_BL_TR || connectorAdjacent === CONNECTOR_DIAG_TL_BR || connectorAdjacent === CONNECTOR_DIAG_BL_TR;\n                // --- End NEW check ---\n                console.log(\"Processing cmd-click on circle:\", {\n                    x,\n                    y,\n                    rightIndex,\n                    leftActive: activationState[index] === 1.0,\n                    rightActive: x < GRID_WIDTH - 1 ? activationState[rightIndex] === 1.0 : false,\n                    canConnectBase,\n                    isBlockedByDiagonal,\n                    connectorBelow,\n                    connectorAdjacent\n                });\n                // Only allow toggle if base conditions met AND not blocked by diagonal\n                if (canConnectBase && !isBlockedByDiagonal) {\n                    const connectorKey = getHorizCmdConnectorKey(x, y);\n                    console.log(\"Toggling horizontal connector (allowed):\", {\n                        key: connectorKey\n                    });\n                    setCmdHorizConnectors((prev)=>{\n                        const newValue = prev[connectorKey] ? 0 : 1;\n                        const newState = {\n                            ...prev,\n                            [connectorKey]: newValue\n                        };\n                        // console.log('Updated connector state:', { key: connectorKey, newValue, allConnectors: newState }); // Optional detailed log\n                        return newState;\n                    });\n                    return; // Exit after handling cmd-click\n                } else {\n                    console.log(\"Cmd-click horizontal connector blocked or base conditions not met.\");\n                }\n                // If blocked or can't connect, fall through to regular click? \n                // Or maybe do nothing on cmd-click if blocked? Let's do nothing for now.\n                return; // Explicitly do nothing more if cmd-click was blocked or invalid\n            }\n            // Regular click behavior (toggle activation) - only runs if not a handled cmd-click\n            console.log(\"Toggling circle activation (regular click)\");\n            setActivationState((current)=>{\n                const newState = new Float32Array(current);\n                newState[index] = newState[index] === 1.0 ? 0.0 : 1.0;\n                console.log(\"New activation state for circle:\", {\n                    index,\n                    oldValue: current[index],\n                    newValue: newState[index]\n                });\n                return newState;\n            });\n        }\n    }, [\n        meshRef,\n        setActivationState,\n        GRID_WIDTH,\n        visualScale,\n        setCmdHorizConnectors,\n        cmdHorizConnectors,\n        intendedConnectors,\n        GRID_HEIGHT\n    ]); // Dependencies are correct now\n    // === Feature 5: State Data Texture ===\n    const stateTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating state texture: ${GRID_WIDTH}x${GRID_HEIGHT}`);\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(TOTAL_CIRCLES).fill(0.0), GRID_WIDTH, GRID_HEIGHT, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter; // Crucial: No interpolation\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true; // Initial update needed\n        return texture;\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        TOTAL_CIRCLES\n    ]); // Recreate texture if grid dimensions change\n    // Update texture data when activationState changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (stateTexture && activationState.length === stateTexture.image.data.length) {\n            stateTexture.image.data.set(activationState); // Update texture data directly\n            stateTexture.needsUpdate = true; // Mark for GPU upload\n            console.log(\"Updated state texture data.\");\n        } else {\n            console.warn(\"Skipping texture update: Mismatch between state array and texture size or texture not ready.\");\n        }\n    }, [\n        activationState,\n        stateTexture\n    ]); // Depend on activation state and the texture itself\n    // === Feature 8: Connector Plane Interaction (Moved DOWN, uses helpers defined above) ===\n    const handleConnectorClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        event.stopPropagation();\n        console.log(\"Connector plane clicked:\", {\n            point: event.point,\n            isCmdClick: event.metaKey || event.ctrlKey\n        });\n        // Get the click point in world space\n        const clickPoint = event.point;\n        // First, check if the click is on a circle\n        // Determine which grid cell this point is closest to\n        const gridX = Math.round((clickPoint.x - centerOffset.x) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        const gridY = Math.round((clickPoint.y - centerOffset.y) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        // Check if this cell is within grid bounds\n        if (gridX >= 0 && gridX < GRID_WIDTH && gridY >= 0 && gridY < GRID_HEIGHT) {\n            // Calculate the cell center in world space\n            const cellCenter = getWorldPosition(gridY, gridX, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n            // Calculate distance from click to cell center\n            const distFromCenter = Math.sqrt(Math.pow(clickPoint.x - cellCenter.x, 2) + Math.pow(clickPoint.y - cellCenter.y, 2));\n            // Check if click is inside the inner circle\n            const currentInnerRadius = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B * visualScale;\n            if (distFromCenter <= currentInnerRadius) {\n                // This is a click on a circle - toggle its activation state\n                const index = getIndex(gridY, gridX, GRID_WIDTH);\n                // If this is a cmd/ctrl click and there's an active circle to the right\n                if ((event.metaKey || event.ctrlKey) && gridX < GRID_WIDTH - 1) {\n                    const rightIndex = getIndex(gridY, gridX + 1, GRID_WIDTH);\n                    const leftActive = activationState[index] === 1.0;\n                    const rightActive = activationState[rightIndex] === 1.0;\n                    const canConnectBase = leftActive && rightActive;\n                    // --- NEW: Check for blocking diagonal connectors ---\n                    const connectorBelow = getIntendedConnector(gridX, gridY - 1);\n                    const connectorAdjacent = getIntendedConnector(gridX, gridY);\n                    const isBlockedByDiagonal = connectorBelow === CONNECTOR_DIAG_TL_BR || connectorBelow === CONNECTOR_DIAG_BL_TR || connectorAdjacent === CONNECTOR_DIAG_TL_BR || connectorAdjacent === CONNECTOR_DIAG_BL_TR;\n                    // --- End NEW check ---\n                    console.log(\"Processing cmd-click (via plane on circle):\", {\n                        x: gridX,\n                        y: gridY,\n                        leftActive,\n                        rightActive,\n                        canConnectBase,\n                        isBlockedByDiagonal,\n                        connectorBelow,\n                        connectorAdjacent\n                    });\n                    // Only allow toggle if base conditions met AND not blocked by diagonal\n                    if (canConnectBase && !isBlockedByDiagonal) {\n                        const connectorKey = getHorizCmdConnectorKey(gridX, gridY);\n                        console.log(\"Toggling cmd-horiz connector (allowed):\", {\n                            key: connectorKey\n                        });\n                        setCmdHorizConnectors((prev)=>{\n                            const newConnectors = {\n                                ...prev\n                            };\n                            newConnectors[connectorKey] = prev[connectorKey] ? 0 : 1;\n                            // console.log('Toggling cmd-horiz connector:', { key: connectorKey, newValue: newConnectors[connectorKey] }); // Optional detailed log\n                            return newConnectors;\n                        });\n                        return; // Exit after handling cmd-click\n                    } else {\n                        console.log(\"Cmd-click horizontal connector blocked or base conditions not met.\");\n                    }\n                    // If blocked or can't connect, fall through to regular click? Let's do nothing more.\n                    return; // Explicitly do nothing more if cmd-click was blocked or invalid\n                }\n                // Regular click behavior (toggle activation) - only runs if not a handled cmd-click\n                console.log(\"Toggling circle activation (regular click on plane)\");\n                setActivationState((current)=>{\n                    const newState = new Float32Array(current);\n                    newState[index] = newState[index] === 1.0 ? 0.0 : 1.0;\n                    return newState;\n                });\n                console.log(`Toggling circle at (${gridX},${gridY})`);\n                return;\n            }\n        }\n        // If we get here, the click wasn't on a circle, so treat it as a connector click\n        // Determine which grid cell (bottom-left of a 2x2 group) this point is closest to\n        const groupX = Math.floor((clickPoint.x - centerOffset.x) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        const groupY = Math.floor((clickPoint.y - centerOffset.y) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        // Get the indices of the four cells in the 2x2 group\n        const blIndex = getIndex(groupY, groupX, GRID_WIDTH);\n        const brIndex = getIndex(groupY, groupX + 1, GRID_WIDTH);\n        const tlIndex = getIndex(groupY + 1, groupX, GRID_WIDTH);\n        const trIndex = getIndex(groupY + 1, groupX + 1, GRID_WIDTH);\n        // Check which cells are within grid bounds\n        const isValidGroup = groupX >= 0 && groupX < GRID_WIDTH - 1 && groupY >= 0 && groupY < GRID_HEIGHT - 1;\n        if (!isValidGroup) return;\n        // Get activation states for the four cells\n        const blActive = activationState[blIndex] === 1.0;\n        const brActive = activationState[brIndex] === 1.0;\n        const tlActive = activationState[tlIndex] === 1.0;\n        const trActive = activationState[trIndex] === 1.0;\n        // Get the world positions of the cell centers\n        const blPos = getWorldPosition(groupY, groupX, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const brPos = getWorldPosition(groupY, groupX + 1, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const tlPos = getWorldPosition(groupY + 1, groupX, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const trPos = getWorldPosition(groupY + 1, groupX + 1, GRID_WIDTH, GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        // Calculate the center of the 2x2 group\n        const centerX = (blPos.x + brPos.x + tlPos.x + trPos.x) / 4;\n        const centerY = (blPos.y + brPos.y + tlPos.y + trPos.y) / 4;\n        // Calculate distance from click to center of 2x2 group\n        const distToCenter = Math.sqrt(Math.pow(clickPoint.x - centerX, 2) + Math.pow(clickPoint.y - centerY, 2));\n        // Check if the click is in the center zone (30% of cell spacing)\n        const isCenterClick = distToCenter < _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING * 0.3 * visualScale;\n        // Get the possible diagonal connectors\n        const canUseDiagTLBR = tlActive && brActive;\n        const canUseDiagBLTR = blActive && trActive;\n        const hasDiagonalOptions = canUseDiagTLBR || canUseDiagBLTR;\n        // Get current intended connector\n        const currentConnector = getIntendedConnector(groupX, groupY);\n        const groupKey = getCellGroupKey(groupX, groupY);\n        // --- NEW: Check for blocking horizontal connectors ---\n        const hasHorizCmdBelow = cmdHorizConnectors[getHorizCmdConnectorKey(groupX, groupY)] === 1;\n        const hasHorizCmdAbove = cmdHorizConnectors[getHorizCmdConnectorKey(groupX, groupY + 1)] === 1;\n        const isBlockedByHoriz = hasHorizCmdBelow || hasHorizCmdAbove;\n        // --- End NEW Check ---\n        let newConnector = CONNECTOR_NONE; // Initialize potential new state\n        let potentialConnectorType = CONNECTOR_NONE; // Store the type determined by click logic\n        // If clicked in the center and diagonal connectors are available, cycle through them\n        if (isCenterClick && hasDiagonalOptions) {\n            if (canUseDiagTLBR && canUseDiagBLTR) {\n                // Both diagonals are available, cycle through the options: NONE -> TL-BR -> BL-TR -> NONE\n                if (currentConnector === CONNECTOR_NONE) {\n                    potentialConnectorType = CONNECTOR_DIAG_TL_BR;\n                } else if (currentConnector === CONNECTOR_DIAG_TL_BR) {\n                    potentialConnectorType = CONNECTOR_DIAG_BL_TR;\n                } else {\n                    potentialConnectorType = CONNECTOR_NONE;\n                }\n            } else if (canUseDiagTLBR) {\n                // Only TL-BR diagonal is available, toggle it\n                potentialConnectorType = currentConnector === CONNECTOR_DIAG_TL_BR ? CONNECTOR_NONE : CONNECTOR_DIAG_TL_BR;\n            } else {\n                // Only BL-TR diagonal is available, toggle it\n                potentialConnectorType = currentConnector === CONNECTOR_DIAG_BL_TR ? CONNECTOR_NONE : CONNECTOR_DIAG_BL_TR;\n            }\n        } else if (!isCenterClick) {\n            // For clicks outside the center, determine which diagonal was clicked (if any)\n            let clickedType = CONNECTOR_NONE;\n            // Calculate distances from click to each diagonal\n            const distToBLTR = Math.abs((clickPoint.x - blPos.x) * (trPos.y - blPos.y) - (clickPoint.y - blPos.y) * (trPos.x - blPos.x)) / Math.sqrt(Math.pow(trPos.x - blPos.x, 2) + Math.pow(trPos.y - blPos.y, 2));\n            const distToTLBR = Math.abs((clickPoint.x - tlPos.x) * (brPos.y - tlPos.y) - (clickPoint.y - tlPos.y) * (brPos.x - tlPos.x)) / Math.sqrt(Math.pow(brPos.x - tlPos.x, 2) + Math.pow(brPos.y - tlPos.y, 2));\n            if (distToBLTR < distToTLBR) {\n                // Closer to BL-TR diagonal (/)\n                if (canUseDiagBLTR) {\n                    clickedType = CONNECTOR_DIAG_BL_TR;\n                }\n            } else {\n                // Closer to TL-BR diagonal (\\)\n                if (canUseDiagTLBR) {\n                    clickedType = CONNECTOR_DIAG_TL_BR;\n                }\n            }\n            // Toggle logic - if the clicked connector is already active, turn it off\n            // Otherwise, turn on the clicked one\n            if (currentConnector === clickedType) {\n                potentialConnectorType = CONNECTOR_NONE; // Toggle off\n            } else if (clickedType !== CONNECTOR_NONE) {\n                potentialConnectorType = clickedType; // Toggle on new connector\n            }\n        }\n        // --- Apply Blocking Logic ---\n        if (isBlockedByHoriz && (potentialConnectorType === CONNECTOR_DIAG_TL_BR || potentialConnectorType === CONNECTOR_DIAG_BL_TR)) {\n            newConnector = CONNECTOR_NONE; // Force to NONE if blocked by horizontal\n            console.log(`Diagonal connector blocked by existing horizontal connector at group (${groupX},${groupY})`);\n        } else {\n            newConnector = potentialConnectorType; // Otherwise, use the type determined by click logic\n        }\n        // --- End Blocking Logic ---\n        // Update the intended connector state\n        setIntendedConnectors((prev)=>({\n                ...prev,\n                [groupKey]: newConnector\n            }));\n        console.log(`Clicked cell group (${groupX},${groupY}), setting connector to ${newConnector}`);\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n        centerOffset,\n        activationState,\n        intendedConnectors,\n        visualScale,\n        setCmdHorizConnectors,\n        cmdHorizConnectors\n    ]); // Dependencies are correct now\n    // Reset connector intent when a circle is deactivated\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Check all cell groups\n        const newIntendedConnectors = {\n            ...intendedConnectors\n        };\n        const newCmdHorizConnectors = {\n            ...cmdHorizConnectors\n        };\n        let hasChanges = false;\n        let hasCmdHorizChanges = false;\n        // First check regular connectors\n        for(const key in intendedConnectors){\n            const connector = intendedConnectors[key];\n            if (connector === CONNECTOR_NONE) continue;\n            // Parse x,y from key\n            const [x, y] = key.split(\",\").map(Number);\n            // Get the indices of the four cells\n            const blIndex = getIndex(y, x, GRID_WIDTH);\n            const brIndex = getIndex(y, x + 1, GRID_WIDTH);\n            const tlIndex = getIndex(y + 1, x, GRID_WIDTH);\n            const trIndex = getIndex(y + 1, x + 1, GRID_WIDTH);\n            // Get activation states\n            const blActive = activationState[blIndex] === 1.0;\n            const brActive = activationState[brIndex] === 1.0;\n            const tlActive = activationState[tlIndex] === 1.0;\n            const trActive = activationState[trIndex] === 1.0;\n            // Check if the connector is still valid\n            let isValid = true;\n            switch(connector){\n                case CONNECTOR_DIAG_TL_BR:\n                    isValid = tlActive && brActive;\n                    break;\n                case CONNECTOR_DIAG_BL_TR:\n                    isValid = blActive && trActive;\n                    break;\n                case CONNECTOR_HORIZ_T:\n                    isValid = tlActive && trActive;\n                    break;\n                case CONNECTOR_HORIZ_B:\n                    isValid = blActive && brActive;\n                    break;\n            }\n            if (!isValid) {\n                newIntendedConnectors[key] = CONNECTOR_NONE;\n                hasChanges = true;\n            }\n        }\n        // Now check cmd-click horizontal connectors\n        for(const key in cmdHorizConnectors){\n            if (cmdHorizConnectors[key] === 0) continue;\n            // Parse x,y from key (remove 'hcmd:' prefix)\n            const [x, y] = key.substring(5).split(\",\").map(Number);\n            // Get indices for left and right circles\n            const leftIndex = getIndex(y, x, GRID_WIDTH);\n            const rightIndex = getIndex(y, x + 1, GRID_WIDTH);\n            // Check if both circles are still active\n            const leftActive = activationState[leftIndex] === 1.0;\n            const rightActive = activationState[rightIndex] === 1.0;\n            if (!leftActive || !rightActive) {\n                newCmdHorizConnectors[key] = 0;\n                hasCmdHorizChanges = true;\n            }\n        }\n        if (hasChanges) {\n            setIntendedConnectors(newIntendedConnectors);\n        }\n        if (hasCmdHorizChanges) {\n            setCmdHorizConnectors(newCmdHorizConnectors);\n        }\n    }, [\n        activationState,\n        GRID_WIDTH,\n        intendedConnectors,\n        cmdHorizConnectors\n    ]);\n    // Create a data texture for intended connectors\n    const intendedConnectorTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating intended connector texture: ${GRID_WIDTH - 1}x${GRID_HEIGHT - 1}`);\n        // Texture has one pixel per 2x2 cell group (grid cells minus 1 in each dimension)\n        const width = Math.max(1, GRID_WIDTH - 1);\n        const height = Math.max(1, GRID_HEIGHT - 1);\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(width * height).fill(0.0), width, height, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true;\n        return texture;\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT\n    ]);\n    // Update the intended connector texture when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const width = Math.max(1, GRID_WIDTH - 1);\n        const data = new Float32Array(width * Math.max(1, GRID_HEIGHT - 1));\n        for(let y = 0; y < GRID_HEIGHT - 1; y++){\n            for(let x = 0; x < GRID_WIDTH - 1; x++){\n                const index = y * width + x;\n                const connector = getIntendedConnector(x, y);\n                data[index] = connector;\n            }\n        }\n        if (intendedConnectorTexture && data.length === intendedConnectorTexture.image.data.length) {\n            intendedConnectorTexture.image.data.set(data);\n            intendedConnectorTexture.needsUpdate = true;\n        }\n    }, [\n        intendedConnectors,\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        intendedConnectorTexture\n    ]);\n    // Create horizontal cmd-click connector texture\n    const cmdHorizConnectorTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating cmd-click horizontal connector texture: ${GRID_WIDTH - 1}x${GRID_HEIGHT}`);\n        // Texture has one pixel per horizontal connection possibility\n        const width = Math.max(1, GRID_WIDTH - 1);\n        const height = GRID_HEIGHT;\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(width * height).fill(0.0), width, height, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true;\n        return texture;\n    }, [\n        GRID_WIDTH,\n        GRID_HEIGHT\n    ]);\n    // Update the cmd-click horizontal connector texture when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const width = Math.max(1, GRID_WIDTH - 1);\n        const data = new Float32Array(width * GRID_HEIGHT);\n        console.log(\"Updating cmd-horiz connector texture:\", {\n            width,\n            height: GRID_HEIGHT,\n            connectors: cmdHorizConnectors\n        });\n        for(let y = 0; y < GRID_HEIGHT; y++){\n            for(let x = 0; x < width; x++){\n                const key = getHorizCmdConnectorKey(x, y);\n                const value = cmdHorizConnectors[key] || 0;\n                data[y * width + x] = value;\n                if (value > 0) {\n                    console.log(\"Found active connector:\", {\n                        x,\n                        y,\n                        key,\n                        value\n                    });\n                }\n            }\n        }\n        if (cmdHorizConnectorTexture && data.length === cmdHorizConnectorTexture.image.data.length) {\n            cmdHorizConnectorTexture.image.data.set(data);\n            cmdHorizConnectorTexture.needsUpdate = true;\n            console.log(\"Updated cmd-horiz connector texture data\");\n        } else {\n            console.warn(\"Skipping cmd-horiz texture update: size mismatch or texture not ready\", {\n                textureSize: cmdHorizConnectorTexture?.image.data.length,\n                dataSize: data.length\n            });\n        }\n    }, [\n        cmdHorizConnectors,\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        cmdHorizConnectorTexture\n    ]);\n    // Ref for the new material\n    const cmdHorizMaterialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        // Enable frustum culling\n        meshRef.current.frustumCulled = true;\n        // Update bounding sphere for better culling\n        if (meshRef.current.geometry) {\n            meshRef.current.geometry.computeBoundingSphere();\n            if (meshRef.current.geometry.boundingSphere) {\n                meshRef.current.geometry.boundingSphere.radius *= Math.max(visualScale, 1.0);\n            }\n        }\n    }, [\n        visualScale\n    ]);\n    // --- Performance Monitoring Setup ---\n    const statsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Use useRef to hold the instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Initialize Stats.js on component mount\n        statsRef.current = new three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n        statsRef.current.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n        document.body.appendChild(statsRef.current.dom);\n        // Cleanup function to remove Stats.js on unmount\n        return ()=>{\n            if (statsRef.current) {\n                document.body.removeChild(statsRef.current.dom);\n                statsRef.current = null; // Clear the ref\n            }\n        };\n    }, []); // Empty dependency array ensures this runs only once on mount/unmount\n    // Frame update logic (including stats)\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.useFrame)((state)=>{\n        if (statsRef.current) {\n            statsRef.current.update(); // Update FPS counter\n        }\n    // Optional: Log frame time periodically\n    // if (state.clock.elapsedTime % 5 < state.clock.getDelta()) { // Check every 5s\n    //   console.log('Frame time:', state.clock.getDelta() * 1000, 'ms');\n    // }\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"group\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"instancedMesh\", {\n                ref: meshRef,\n                args: [\n                    undefined,\n                    undefined,\n                    TOTAL_CIRCLES\n                ],\n                onClick: handleCircleClick,\n                position: [\n                    0,\n                    0,\n                    -0.1\n                ],\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            1,\n                            1\n                        ],\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"instancedBufferAttribute\", {\n                            ref: activationAttributeRef,\n                            attach: \"attributes-a_activated\",\n                            args: [\n                                activationState,\n                                1\n                            ],\n                            usage: three__WEBPACK_IMPORTED_MODULE_2__.DynamicDrawUsage\n                        }, void 0, false, {\n                            fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                            lineNumber: 808,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 806,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circleMaterial\", {\n                        ref: materialRef,\n                        transparent: true\n                    }, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 815,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `circles-${TOTAL_CIRCLES}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 798,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                position: [\n                    0,\n                    0,\n                    0.1\n                ],\n                onClick: handleConnectorClick,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 828,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"connectorMaterial\", {\n                        ref: connectorMaterialRef,\n                        transparent: true,\n                        side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n                        // Pass required uniforms (cmdHoriz texture removed)\n                        u_stateTexture: stateTexture,\n                        u_intendedConnectorTexture: intendedConnectorTexture,\n                        // u_cmdHorizConnectorTexture removed\n                        u_gridDimensions: [\n                            GRID_WIDTH,\n                            GRID_HEIGHT\n                        ],\n                        u_textureResolution: [\n                            GRID_WIDTH,\n                            GRID_HEIGHT\n                        ],\n                        u_radiusA: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A,\n                        u_radiusB: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B,\n                        u_gridSpacing: visualScale,\n                        u_centerOffset: [\n                            centerOffset.x,\n                            centerOffset.y\n                        ],\n                        u_planeSize: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 829,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `connector-plane-${GRID_WIDTH}-${GRID_HEIGHT}-${visualScale}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 823,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                position: [\n                    0,\n                    0,\n                    0.2\n                ],\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 855,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"cmdHorizConnectorMaterial\", {\n                        ref: cmdHorizMaterialRef,\n                        transparent: true,\n                        side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n                        // Pass necessary uniforms for this specific material\n                        u_stateTexture: stateTexture,\n                        u_cmdHorizConnectorTexture: cmdHorizConnectorTexture,\n                        u_gridDimensions: [\n                            GRID_WIDTH,\n                            GRID_HEIGHT\n                        ],\n                        u_textureResolution: [\n                            GRID_WIDTH,\n                            GRID_HEIGHT\n                        ],\n                        u_radiusA: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A,\n                        u_radiusB: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B,\n                        u_gridSpacing: visualScale,\n                        u_fixedSpacing: _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n                        u_centerOffset: [\n                            centerOffset.x,\n                            centerOffset.y\n                        ],\n                        u_planeSize: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 856,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `cmd-horiz-connector-plane-${GRID_WIDTH}-${GRID_HEIGHT}-${visualScale}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 849,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n        lineNumber: 797,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GridScene);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFFc0MsV0FBVyxDQUFDLEVBQUVDLFlBQVksQ0FBQyxFQUFFQyxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0FBMEJwRjtBQUVBLGlFQUFlSCxTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViZ2wtZG90LWdyaWQtbXZwLy4vY29tcG9uZW50cy9HcmlkU2NlbmUudHN4PzBkY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyB1c2VDb250cm9scyB9IGZyb20gJ2xldmEnO1xuaW1wb3J0IHsgdXNlRnJhbWUgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0IENpcmNsZU1hdGVyaWFsIGZyb20gJy4vQ2lyY2xlTWF0ZXJpYWwnO1xuaW1wb3J0IENvbm5lY3Rvck1hdGVyaWFsIGZyb20gJy4vQ29ubmVjdG9yTWF0ZXJpYWwnO1xuaW1wb3J0IENtZEhvcml6Q29ubmVjdG9yTWF0ZXJpYWwgZnJvbSAnLi9DbWRIb3JpekNvbm5lY3Rvck1hdGVyaWFsJztcbmltcG9ydCBTdGF0cyBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGUnO1xuaW1wb3J0IHsgRklYRURfU1BBQ0lORywgQkFTRV9SQURJVVNfQSwgQkFTRV9SQURJVVNfQiB9IGZyb20gJy4vY29uc3RhbnRzJzsgLy8gQXNzdW1pbmcgY29uc3RhbnRzIGFyZSBtb3ZlZFxuXG4vLyA9PT0gRmVhdHVyZSAxOiBHcmlkIERhdGEgJiBDb25maWd1cmF0aW9uID09PVxuXG4vLyBDb25zdGFudHMgZm9yIGJhc2UgZ2VvbWV0cnkgLSBSRU1PVkVELCBub3cgaW1wb3J0ZWRcbi8vIGNvbnN0IEJBU0VfUkFESVVTX0EgPSAwLjU7IC8vIE91dGVyIHJhZGl1c1xuLy8gY29uc3QgQkFTRV9SQURJVVNfQiA9IDAuNDsgLy8gSW5uZXIgcmFkaXVzXG4vLyBjb25zdCBGSVhFRF9TUEFDSU5HID0gQkFTRV9SQURJVVNfQSArIEJBU0VfUkFESVVTX0I7IC8vIDAuOVxuXG5jb25zdCBCQVNFX0dSSURfU1BBQ0lORyA9IDEuMDsgLy8gS2VlcCBmb3IgcmVmZXJlbmNlIGlmIG5lZWRlZFxuXG4vLyBIZWxwZXIgRnVuY3Rpb25zXG5jb25zdCBnZXRJbmRleCA9IChyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHJvdyAqIGdyaWRXaWR0aCArIGNvbDtcbn07XG5cbmNvbnN0IGdldENvb3JkcyA9IChpbmRleDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlcik6IHsgcm93OiBudW1iZXI7IGNvbDogbnVtYmVyIH0gPT4ge1xuICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gZ3JpZFdpZHRoKTtcbiAgY29uc3QgY29sID0gaW5kZXggJSBncmlkV2lkdGg7XG4gIHJldHVybiB7IHJvdywgY29sIH07XG59O1xuXG4vLyBNb2RpZmllZCB0byB1c2UgZml4ZWQgc3BhY2luZ1xuY29uc3QgZ2V0Q2VudGVyT2Zmc2V0ID0gKGdyaWRXaWR0aDogbnVtYmVyLCBncmlkSGVpZ2h0OiBudW1iZXIsIHNwYWNpbmc6IG51bWJlcik6IFRIUkVFLlZlY3RvcjIgPT4ge1xuICBjb25zdCB0b3RhbFdpZHRoID0gKGdyaWRXaWR0aCAtIDEpICogc3BhY2luZztcbiAgY29uc3QgdG90YWxIZWlnaHQgPSAoZ3JpZEhlaWdodCAtIDEpICogc3BhY2luZztcbiAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKC10b3RhbFdpZHRoIC8gMiwgLXRvdGFsSGVpZ2h0IC8gMik7XG59O1xuXG4vLyBNb2RpZmllZCB0byB1c2UgZml4ZWQgc3BhY2luZ1xuY29uc3QgZ2V0V29ybGRQb3NpdGlvbiA9IChcbiAgcm93OiBudW1iZXIsXG4gIGNvbDogbnVtYmVyLFxuICBncmlkV2lkdGg6IG51bWJlciwgLy8gS2VlcCBncmlkIGRpbWVuc2lvbnMgZm9yIG9mZnNldCBjYWxjdWxhdGlvbiBpZiBuZWVkZWRcbiAgZ3JpZEhlaWdodDogbnVtYmVyLFxuICBzcGFjaW5nOiBudW1iZXIsIC8vIFRoaXMgd2lsbCBiZSBGSVhFRF9TUEFDSU5HXG4gIGNlbnRlck9mZnNldDogVEhSRUUuVmVjdG9yMlxuKTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9ID0+IHtcbiAgY29uc3QgeCA9IGNvbCAqIHNwYWNpbmcgKyBjZW50ZXJPZmZzZXQueDtcbiAgY29uc3QgeSA9IHJvdyAqIHNwYWNpbmcgKyBjZW50ZXJPZmZzZXQueTtcbiAgcmV0dXJuIHsgeCwgeSB9O1xufTtcblxuLy8gRGVmaW5lIGNvbm5lY3RvciB0eXBlcyBhcyBjb25zdGFudHNcbmNvbnN0IENPTk5FQ1RPUl9OT05FID0gMDtcbmNvbnN0IENPTk5FQ1RPUl9ESUFHX1RMX0JSID0gMTsgLy8gRGlhZ29uYWwgXFxcbmNvbnN0IENPTk5FQ1RPUl9ESUFHX0JMX1RSID0gMjsgLy8gRGlhZ29uYWwgL1xuY29uc3QgQ09OTkVDVE9SX0hPUklaX1QgPSAzOyAgICAvLyBIb3Jpem9udGFsIFRvcFxuY29uc3QgQ09OTkVDVE9SX0hPUklaX0IgPSA0OyAgICAvLyBIb3Jpem9udGFsIEJvdHRvbVxuY29uc3QgQ09OTkVDVE9SX0hPUklaX0NNRCA9IDU7ICAvLyBOZXc6IENtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvclxuXG4vLyA9PT0gR3JpZFNjZW5lIENvbXBvbmVudCA9PT1cblxuLy8gRHVtbXkgb2JqZWN0IGZvciBtYXRyaXggY2FsY3VsYXRpb25zXG5jb25zdCBkdW1teSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuY29uc3QgdGVtcE1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5jb25zdCB0ZW1wVmVjID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuLy8gTmV3OiBIZWxwZXIgZm9yIGhvcml6b250YWwgY21kLWNsaWNrIGNvbm5lY3RvciBrZXkgZ2VuZXJhdGlvblxuY29uc3QgZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IGBoY21kOiR7eH0sJHt5fWA7XG5cbmNvbnN0IEdyaWRTY2VuZSA9ICgpID0+IHtcbiAgLy8gTGV2YSBjb250cm9scyBmb3IgZ3JpZCBwYXJhbWV0ZXJzXG4gIGNvbnN0IHsgR1JJRF9XSURUSCwgR1JJRF9IRUlHSFQsIHZpc3VhbFNjYWxlIH0gPSB1c2VDb250cm9scygnR3JpZCcsIHtcbiAgICBHUklEX1dJRFRIOiB7IHZhbHVlOiAxMCwgbWluOiAyLCBtYXg6IDEwMCwgc3RlcDogMSB9LFxuICAgIEdSSURfSEVJR0hUOiB7IHZhbHVlOiAxMCwgbWluOiAyLCBtYXg6IDEwMCwgc3RlcDogMSB9LFxuICAgIHZpc3VhbFNjYWxlOiB7IC8vIFJlbmFtZWQgZnJvbSBjdXJyZW50R3JpZFNwYWNpbmdcbiAgICAgIHZhbHVlOiAxLjAsIC8vIERlZmF1bHQgc2NhbGUgaXMgMS4wXG4gICAgICBtaW46IDAuMSxcbiAgICAgIG1heDogNSxcbiAgICAgIHN0ZXA6IDAuMSxcbiAgICAgIGxhYmVsOiAnVmlzdWFsIFNjYWxlJyAvLyBVcGRhdGVkIGxhYmVsXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQWRkIGR5bmFtaWMgaW5zdGFuY2UgbWFuYWdlbWVudFxuICBjb25zdCBpbnN0YW5jZUNvdW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgLy8gT25seSBjcmVhdGUgYXMgbWFueSBpbnN0YW5jZXMgYXMgdmlzaWJsZSBpbiB2aWV3cG9ydFxuICAgIGNvbnN0IHZpc2libGVXaWR0aCA9IE1hdGgubWluKEdSSURfV0lEVEgsIE1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aCAvIChGSVhFRF9TUEFDSU5HICogdmlzdWFsU2NhbGUpKSArIDIpO1xuICAgIGNvbnN0IHZpc2libGVIZWlnaHQgPSBNYXRoLm1pbihHUklEX0hFSUdIVCwgTWF0aC5jZWlsKHdpbmRvdy5pbm5lckhlaWdodCAvIChGSVhFRF9TUEFDSU5HICogdmlzdWFsU2NhbGUpKSArIDIpO1xuICAgIHJldHVybiB2aXNpYmxlV2lkdGggKiB2aXNpYmxlSGVpZ2h0O1xuICB9LCBbR1JJRF9XSURUSCwgR1JJRF9IRUlHSFQsIHZpc3VhbFNjYWxlXSk7XG5cbiAgLy8gRGVyaXZlZCB2YWx1ZXMgY2FsY3VsYXRpb24gdXNpbmcgdXNlTWVtbyBmb3Igb3B0aW1pemF0aW9uXG4gIGNvbnN0IHsgXG4gICAgVE9UQUxfQ0lSQ0xFUywgXG4gICAgY2VudGVyT2Zmc2V0LCAvLyBCYXNlZCBvbiBGSVhFRF9TUEFDSU5HXG4gICAgcGxhbmVXaWR0aCwgICAvLyBCYXNlZCBvbiBGSVhFRF9TUEFDSU5HXG4gICAgcGxhbmVIZWlnaHQgICAvLyBCYXNlZCBvbiBGSVhFRF9TUEFDSU5HXG4gIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB0b3RhbCA9IEdSSURfV0lEVEggKiBHUklEX0hFSUdIVDtcbiAgICAvLyBPZmZzZXQgYW5kIHBsYW5lIGRpbWVuc2lvbnMgZGVwZW5kIG9uIHRoZSBmaXhlZCBzcGFjaW5nIGJldHdlZW4gY2VudGVyc1xuICAgIGNvbnN0IG9mZnNldCA9IGdldENlbnRlck9mZnNldChHUklEX1dJRFRILCBHUklEX0hFSUdIVCwgRklYRURfU1BBQ0lORyk7XG4gICAgLy8gQ2FsY3VsYXRlIGFjdHVhbCBncmlkIGV4dGVudCBiYXNlZCBvbiBmaXhlZCBzcGFjaW5nXG4gICAgY29uc3Qgd2lkdGggPSAoR1JJRF9XSURUSCA+IDEgPyAoR1JJRF9XSURUSCAtIDEpICogRklYRURfU1BBQ0lORyA6IDApICsgKHZpc3VhbFNjYWxlICogQkFTRV9SQURJVVNfQSAqIDIpOyAvLyBBZGQgZGlhbWV0ZXIgbWFyZ2luXG4gICAgY29uc3QgaGVpZ2h0ID0gKEdSSURfSEVJR0hUID4gMSA/IChHUklEX0hFSUdIVCAtIDEpICogRklYRURfU1BBQ0lORyA6IDApICsgKHZpc3VhbFNjYWxlICogQkFTRV9SQURJVVNfQSAqIDIpOyAvLyBBZGQgZGlhbWV0ZXIgbWFyZ2luXG4gICAgXG4gICAgY29uc29sZS5sb2coYExheW91dCBTcGFjaW5nOiAke0ZJWEVEX1NQQUNJTkcudG9GaXhlZCgyKX1gKTtcbiAgICBjb25zb2xlLmxvZyhgQ2FsY3VsYXRlZCBDZW50ZXIgT2Zmc2V0OiB4PSR7b2Zmc2V0LngudG9GaXhlZCgyKX0sIHk9JHtvZmZzZXQueS50b0ZpeGVkKDIpfWApO1xuICAgIGNvbnNvbGUubG9nKGBDYWxjdWxhdGVkIFBsYW5lIFNpemU6IHc9JHt3aWR0aC50b0ZpeGVkKDIpfSwgaD0ke2hlaWdodC50b0ZpeGVkKDIpfWApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIFRPVEFMX0NJUkNMRVM6IHRvdGFsLFxuICAgICAgY2VudGVyT2Zmc2V0OiBvZmZzZXQsXG4gICAgICBwbGFuZVdpZHRoOiB3aWR0aCxcbiAgICAgIHBsYW5lSGVpZ2h0OiBoZWlnaHQsXG4gICAgfTtcbiAgfSwgW0dSSURfV0lEVEgsIEdSSURfSEVJR0hULCB2aXN1YWxTY2FsZV0pOyAvLyBEZXBlbmQgb24gZ3JpZCBzaXplIGFuZCB2aXN1YWwgc2NhbGUgZm9yIHBsYW5lIG1hcmdpblxuXG4gIC8vIFJlZnMgZm9yIG1lc2ggYW5kIG1hdGVyaWFsXG4gIGNvbnN0IG1lc2hSZWYgPSB1c2VSZWY8VEhSRUUuSW5zdGFuY2VkTWVzaD4obnVsbCEpO1xuICBjb25zdCBtYXRlcmlhbFJlZiA9IHVzZVJlZjxhbnk+KG51bGwhKTsgLy8gVXNlICdhbnknIG9yIHNwZWNpZmljIHR5cGUgZm9yIENpcmNsZU1hdGVyaWFsXG4gIGNvbnN0IGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYgPSB1c2VSZWY8VEhSRUUuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlPihudWxsISk7XG4gIGNvbnN0IGNvbm5lY3Rvck1hdGVyaWFsUmVmID0gdXNlUmVmPGFueT4obnVsbCEpOyAvLyBSZWYgZm9yIGNvbm5lY3RvciBtYXRlcmlhbFxuXG4gIC8vID09PSBGZWF0dXJlIDM6IENpcmNsZSBBY3RpdmF0aW9uIFN0YXRlID09PVxuICBjb25zdCBbYWN0aXZhdGlvblN0YXRlLCBzZXRBY3RpdmF0aW9uU3RhdGVdID0gdXNlU3RhdGU8RmxvYXQzMkFycmF5PigoKSA9PiBcbiAgICBuZXcgRmxvYXQzMkFycmF5KFRPVEFMX0NJUkNMRVMpLmZpbGwoMC4wKSAvLyAwLjAgaW5hY3RpdmUsIDEuMCBhY3RpdmVcbiAgKTtcblxuICAvLyBOZXc6IEFkZCBob3Jpem9udGFsIGNtZC1jbGljayBjb25uZWN0b3Igc3RhdGVcbiAgY29uc3QgW2NtZEhvcml6Q29ubmVjdG9ycywgc2V0Q21kSG9yaXpDb25uZWN0b3JzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KTtcblxuICAvLyA9PT0gRmVhdHVyZSA4OiBDb25uZWN0b3IgSW50ZXJhY3Rpb24gU3RhdGUgYW5kIEhlbHBlcnMgKE1vdmVkIFVQKSA9PT1cbiAgY29uc3QgW2ludGVuZGVkQ29ubmVjdG9ycywgc2V0SW50ZW5kZWRDb25uZWN0b3JzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KTtcblxuICAvLyBIZWxwZXIgdG8gZ2V0IHRoZSBrZXkgZm9yIGEgMngyIGNlbGwgZ3JvdXAgKE1vdmVkIFVQKVxuICBjb25zdCBnZXRDZWxsR3JvdXBLZXkgPSAoY2VsbFg6IG51bWJlciwgY2VsbFk6IG51bWJlcikgPT4gYCR7Y2VsbFh9LCR7Y2VsbFl9YDtcblxuICAvLyBIZWxwZXIgdG8gZ2V0IHRoZSBpbnRlbmRlZCBjb25uZWN0b3IgZm9yIGEgMngyIGNlbGwgZ3JvdXAgKE1vdmVkIFVQKVxuICBjb25zdCBnZXRJbnRlbmRlZENvbm5lY3RvciA9IChjZWxsWDogbnVtYmVyLCBjZWxsWTogbnVtYmVyKSA9PiB7XG4gICAgLy8gQ2hlY2sgYm91bmRzIGZpcnN0XG4gICAgaWYgKGNlbGxYIDwgMCB8fCBjZWxsWCA+PSBHUklEX1dJRFRIIC0gMSB8fCBjZWxsWSA8IDAgfHwgY2VsbFkgPj0gR1JJRF9IRUlHSFQgLSAxKSB7XG4gICAgICByZXR1cm4gQ09OTkVDVE9SX05PTkU7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGdldENlbGxHcm91cEtleShjZWxsWCwgY2VsbFkpO1xuICAgIHJldHVybiBpbnRlbmRlZENvbm5lY3RvcnNba2V5XSB8fCBDT05ORUNUT1JfTk9ORTtcbiAgfTtcblxuICAvLyBTdGF0ZSBuZWVkcyB0byBiZSByZXNldCBpZiBUT1RBTF9DSVJDTEVTIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUmVzZXR0aW5nIGFjdGl2YXRpb24gc3RhdGUgZHVlIHRvIGdyaWQgc2l6ZSBjaGFuZ2UnKTtcbiAgICBzZXRBY3RpdmF0aW9uU3RhdGUobmV3IEZsb2F0MzJBcnJheShUT1RBTF9DSVJDTEVTKS5maWxsKDAuMCkpO1xuICAgIHNldEludGVuZGVkQ29ubmVjdG9ycyh7fSk7IC8vIEFsc28gcmVzZXQgaW50ZW5kZWQgY29ubmVjdG9yc1xuICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyh7fSk7IC8vIEFsc28gcmVzZXQgY21kLWhvcml6IGNvbm5lY3RvcnNcbiAgfSwgW1RPVEFMX0NJUkNMRVNdKTtcblxuICAvLyBVcGRhdGUgYnVmZmVyIGF0dHJpYnV0ZSB3aGVuIHN0YXRlIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZi5jdXJyZW50KSB7XG4gICAgICBhY3RpdmF0aW9uQXR0cmlidXRlUmVmLmN1cnJlbnQuYXJyYXkgPSBhY3RpdmF0aW9uU3RhdGU7XG4gICAgICBhY3RpdmF0aW9uQXR0cmlidXRlUmVmLmN1cnJlbnQubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgLy8gY29uc29sZS5sb2coJ1VwZGF0ZWQgYWN0aXZhdGlvbiBidWZmZXIgYXR0cmlidXRlLicpOyAvLyBMZXNzIG5vaXN5IGxvZ1xuICAgIH1cbiAgfSwgW2FjdGl2YXRpb25TdGF0ZV0pO1xuXG4gIC8vID09PSBGZWF0dXJlIDI6IFN0YXRpYyBDaXJjbGUgUmVuZGVyaW5nID09PVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbWVzaFJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAvLyBDYWxjdWxhdGUgYW5kIHNldCBpbnN0YW5jZSBtYXRyaWNlc1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBUT1RBTF9DSVJDTEVTOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCB7IHJvdywgY29sIH0gPSBnZXRDb29yZHMoaW5kZXgsIEdSSURfV0lEVEgpO1xuICAgICAgY29uc3QgeyB4LCB5IH0gPSBnZXRXb3JsZFBvc2l0aW9uKFxuICAgICAgICByb3csXG4gICAgICAgIGNvbCxcbiAgICAgICAgR1JJRF9XSURUSCxcbiAgICAgICAgR1JJRF9IRUlHSFQsXG4gICAgICAgIEZJWEVEX1NQQUNJTkcsXG4gICAgICAgIGNlbnRlck9mZnNldFxuICAgICAgKTtcbiAgICAgIGR1bW15LnBvc2l0aW9uLnNldCh4LCB5LCAwKTsgLy8gWj0wIGZvciBjaXJjbGVzXG4gICAgICAgLy8gUmV0cmlldmUgZXhpc3Rpbmcgc2NhbGUvcm90YXRpb24gYmVmb3JlIHNldHRpbmcgcG9zaXRpb24gdG8gYXZvaWQgb3ZlcndyaXRpbmcgc2NhbGUgZWZmZWN0XG4gICAgICBjb25zdCBjdXJyZW50TWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICAgIG1lc2hSZWYuY3VycmVudC5nZXRNYXRyaXhBdChpbmRleCwgY3VycmVudE1hdHJpeCk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICBjb25zdCBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgIGNvbnN0IHNjYWxlVmVjID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgIGN1cnJlbnRNYXRyaXguZGVjb21wb3NlKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZVZlYyk7XG4gICAgICAvLyBVcGRhdGUgb25seSBwb3NpdGlvblxuICAgICAgcG9zaXRpb24uc2V0KHgsIHksIDApO1xuICAgICAgZHVtbXkubWF0cml4LmNvbXBvc2UocG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlVmVjKTsgLy8gUmVjb21wb3NlIHdpdGggb3JpZ2luYWwgc2NhbGUvcm90YXRpb25cbiAgICAgIG1lc2hSZWYuY3VycmVudC5zZXRNYXRyaXhBdChpbmRleCwgZHVtbXkubWF0cml4KTtcbiAgICB9XG4gICAgbWVzaFJlZi5jdXJyZW50Lmluc3RhbmNlTWF0cml4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIC8vIGNvbnNvbGUubG9nKGBVcGRhdGVkICR7VE9UQUxfQ0lSQ0xFU30gaW5zdGFuY2UgbWF0cmljZXMgKHBvc2l0aW9uKS5gKTtcblxuICB9LCBbR1JJRF9XSURUSCwgR1JJRF9IRUlHSFQsIEZJWEVEX1NQQUNJTkcsIFRPVEFMX0NJUkNMRVMsIGNlbnRlck9mZnNldF0pO1xuXG4gIC8vIFVwZGF0ZSBzaGFkZXIgdW5pZm9ybXMgd2hlbiBzY2FsZWQgcmFkaWkgY2hhbmdlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1hdGVyaWFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFNoYWRlciBleHBlY3RzIHJhZGlpIHJlbGF0aXZlIHRvIHBsYW5lIHNpemUgKDAuMCB0byAwLjUgcmFuZ2UgaWYgcGxhbmUgaXMgc2l6ZSAxKVxuICAgICAgLy8gTGV0J3MgdXNlIHBsYW5lIHNpemUgMSBhbmQgc2NhbGUgcmFkaWkgdG8gMC4wLTAuNSByYW5nZSBmb3Igc2hhZGVyLlxuICAgICAgbWF0ZXJpYWxSZWYuY3VycmVudC51bmlmb3Jtcy51X3JhZGl1c0EudmFsdWUgPSBCQVNFX1JBRElVU19BOyAvLyBVc2UgYmFzZSByYWRpdXMgcmVsYXRpdmUgdG8gcGxhbmUgc2l6ZSAxXG4gICAgICBtYXRlcmlhbFJlZi5jdXJyZW50LnVuaWZvcm1zLnVfcmFkaXVzQi52YWx1ZSA9IEJBU0VfUkFESVVTX0I7IC8vIFVzZSBiYXNlIHJhZGl1cyByZWxhdGl2ZSB0byBwbGFuZSBzaXplIDFcbiAgICAgIC8vIFNjYWxlIHRoZSB3aG9sZSBpbnN0YW5jZSBpbnN0ZWFkIHRvIG1hdGNoIHNwYWNpbmdcbiAgICAgICBjb25zb2xlLmxvZyhgVXBkYXRlZCBtYXRlcmlhbCByYWRpaSB1bmlmb3JtczogQT0ke0JBU0VfUkFESVVTX0F9LCBCPSR7QkFTRV9SQURJVVNfQn1gKTtcbiAgICB9XG4gIH0sIFtdKTsgLy8gRGVwZW5kIG9uIHNjYWxlZCByYWRpaSwgdGhvdWdoIHVzaW5nIGJhc2UgZm9yIHVuaWZvcm0gbm93XG5cbiAvLyBBZGp1c3QgaW5zdGFuY2Ugc2NhbGUgYmFzZWQgb24gc3BhY2luZ1xuIHVzZUVmZmVjdCgoKSA9PiB7XG4gIGlmICghbWVzaFJlZi5jdXJyZW50KSByZXR1cm47XG4gIGNvbnN0IHNjYWxlID0gdmlzdWFsU2NhbGU7IC8vIFVzZSB0aGUgbGV2YSBjb250cm9sIHZhbHVlIGZvciBzY2FsZVxuICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgaW5zdGFuY2Ugc2NhbGVzIHRvOiAke3NjYWxlLnRvRml4ZWQoMil9YCk7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBUT1RBTF9DSVJDTEVTOyBpbmRleCsrKSB7XG4gICAgICBtZXNoUmVmLmN1cnJlbnQuZ2V0TWF0cml4QXQoaW5kZXgsIHRlbXBNYXRyaXgpO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSB0ZW1wVmVjLnNldEZyb21NYXRyaXhQb3NpdGlvbih0ZW1wTWF0cml4KTtcbiAgICAgIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21Sb3RhdGlvbk1hdHJpeCh0ZW1wTWF0cml4KTtcbiAgICAgIC8vIFVwZGF0ZSBvbmx5IHNjYWxlXG4gICAgICBjb25zdCBzY2FsZVZlYyA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc2V0KHNjYWxlLCBzY2FsZSwgMSk7XG4gICAgICBcbiAgICAgIHRlbXBNYXRyaXguY29tcG9zZShwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGVWZWMpO1xuICAgICAgbWVzaFJlZi5jdXJyZW50LnNldE1hdHJpeEF0KGluZGV4LCB0ZW1wTWF0cml4KTtcbiAgfVxuICBtZXNoUmVmLmN1cnJlbnQuaW5zdGFuY2VNYXRyaXgubmVlZHNVcGRhdGUgPSB0cnVlO1xufSwgW3Zpc3VhbFNjYWxlLCBUT1RBTF9DSVJDTEVTXSk7IC8vIERlcGVuZHMgb24gc2NhbGUgY29udHJvbCBhbmQgY291bnRcblxuICAvLyA9PT0gRmVhdHVyZSA0OiBDaXJjbGUgSW50ZXJhY3Rpb24gKE5vdyB1c2VzIGhlbHBlcnMgZGVmaW5lZCBhYm92ZSkgPT09XG4gIGNvbnN0IGhhbmRsZUNpcmNsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBhbnkpID0+IHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoZXZlbnQuaW5zdGFuY2VJZCA9PT0gdW5kZWZpbmVkIHx8ICFtZXNoUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnN0IGluZGV4ID0gZXZlbnQuaW5zdGFuY2VJZDtcbiAgICBjb25zdCB7IHJvdzogeSwgY29sOiB4IH0gPSBnZXRDb29yZHMoaW5kZXgsIEdSSURfV0lEVEgpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdDaXJjbGUgY2xpY2tlZDonLCB7XG4gICAgICBpbmRleCxcbiAgICAgIHgsIHksXG4gICAgICBpc0NtZENsaWNrOiBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXksXG4gICAgICBwb2ludDogZXZlbnQucG9pbnQsXG4gICAgICBjdXJyZW50U3RhdGU6IGFjdGl2YXRpb25TdGF0ZVtpbmRleF1cbiAgICB9KTtcblxuICAgIC8vIEdldCB0aGUgY2VudGVyIG9mIHRoZSBjbGlja2VkIGluc3RhbmNlXG4gICAgbWVzaFJlZi5jdXJyZW50LmdldE1hdHJpeEF0KGluZGV4LCB0ZW1wTWF0cml4KTtcbiAgICBjb25zdCBpbnN0YW5jZUNlbnRlciA9IHRlbXBWZWMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRlbXBNYXRyaXgpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGZyb20gY2xpY2sgcG9pbnQgdG8gaW5zdGFuY2UgY2VudGVyXG4gICAgY29uc3QgZGlzdEZyb21DZW50ZXIgPSBldmVudC5wb2ludC5kaXN0YW5jZVRvKGluc3RhbmNlQ2VudGVyKTtcblxuICAgIC8vIEdldCB0aGUgQ1VSUkVOVCB3b3JsZC1zcGFjZSBpbm5lciByYWRpdXNcbiAgICBjb25zdCBjdXJyZW50SW5uZXJSYWRpdXMgPSBCQVNFX1JBRElVU19CICogdmlzdWFsU2NhbGU7IFxuXG4gICAgY29uc29sZS5sb2coJ0NsaWNrIGRldGFpbHM6Jywge1xuICAgICAgZGlzdEZyb21DZW50ZXIsXG4gICAgICBjdXJyZW50SW5uZXJSYWRpdXMsXG4gICAgICBpc0luc2lkZTogZGlzdEZyb21DZW50ZXIgPD0gY3VycmVudElubmVyUmFkaXVzXG4gICAgfSk7XG5cbiAgICAvLyBDaGVjayBpZiBjbGljayBpcyBpbnNpZGUgdGhlIGlubmVyIGNpcmNsZVxuICAgIGlmIChkaXN0RnJvbUNlbnRlciA8PSBjdXJyZW50SW5uZXJSYWRpdXMpIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBjbWQvY3RybCBjbGlja1xuICAgICAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgICAgICAvLyBDaGVjayBjb25kaXRpb25zIGZvciBob3Jpem9udGFsIGNvbm5lY3RvclxuICAgICAgICBjb25zdCByaWdodEluZGV4ID0gZ2V0SW5kZXgoeSwgeCArIDEsIEdSSURfV0lEVEgpO1xuICAgICAgICBjb25zdCBjYW5Db25uZWN0QmFzZSA9IHggPCBHUklEX1dJRFRIIC0gMSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uU3RhdGVbaW5kZXhdID09PSAxLjAgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvblN0YXRlW3JpZ2h0SW5kZXhdID09PSAxLjA7XG5cbiAgICAgICAgLy8gLS0tIE5FVzogQ2hlY2sgZm9yIGJsb2NraW5nIGRpYWdvbmFsIGNvbm5lY3RvcnMgLS0tXG4gICAgICAgIGNvbnN0IGNvbm5lY3RvckJlbG93ID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoeCwgeSAtIDEpO1xuICAgICAgICBjb25zdCBjb25uZWN0b3JBZGphY2VudCA9IGdldEludGVuZGVkQ29ubmVjdG9yKHgsIHkpO1xuICAgICAgICBjb25zdCBpc0Jsb2NrZWRCeURpYWdvbmFsID0gXG4gICAgICAgICAgKGNvbm5lY3RvckJlbG93ID09PSBDT05ORUNUT1JfRElBR19UTF9CUiB8fCBjb25uZWN0b3JCZWxvdyA9PT0gQ09OTkVDVE9SX0RJQUdfQkxfVFIpIHx8XG4gICAgICAgICAgKGNvbm5lY3RvckFkamFjZW50ID09PSBDT05ORUNUT1JfRElBR19UTF9CUiB8fCBjb25uZWN0b3JBZGphY2VudCA9PT0gQ09OTkVDVE9SX0RJQUdfQkxfVFIpO1xuICAgICAgICAvLyAtLS0gRW5kIE5FVyBjaGVjayAtLS1cblxuICAgICAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBjbWQtY2xpY2sgb24gY2lyY2xlOicsIHtcbiAgICAgICAgICB4LCB5LFxuICAgICAgICAgIHJpZ2h0SW5kZXgsXG4gICAgICAgICAgbGVmdEFjdGl2ZTogYWN0aXZhdGlvblN0YXRlW2luZGV4XSA9PT0gMS4wLFxuICAgICAgICAgIHJpZ2h0QWN0aXZlOiB4IDwgR1JJRF9XSURUSCAtIDEgPyBhY3RpdmF0aW9uU3RhdGVbcmlnaHRJbmRleF0gPT09IDEuMCA6IGZhbHNlLFxuICAgICAgICAgIGNhbkNvbm5lY3RCYXNlLFxuICAgICAgICAgIGlzQmxvY2tlZEJ5RGlhZ29uYWwsIC8vIExvZyB0aGUgYmxvY2tpbmcgc3RhdHVzXG4gICAgICAgICAgY29ubmVjdG9yQmVsb3csXG4gICAgICAgICAgY29ubmVjdG9yQWRqYWNlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT25seSBhbGxvdyB0b2dnbGUgaWYgYmFzZSBjb25kaXRpb25zIG1ldCBBTkQgbm90IGJsb2NrZWQgYnkgZGlhZ29uYWxcbiAgICAgICAgaWYgKGNhbkNvbm5lY3RCYXNlICYmICFpc0Jsb2NrZWRCeURpYWdvbmFsKSB7IFxuICAgICAgICAgIGNvbnN0IGNvbm5lY3RvcktleSA9IGdldEhvcml6Q21kQ29ubmVjdG9yS2V5KHgsIHkpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2dnbGluZyBob3Jpem9udGFsIGNvbm5lY3RvciAoYWxsb3dlZCk6JywgeyBrZXk6IGNvbm5lY3RvcktleSB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZXRDbWRIb3JpekNvbm5lY3RvcnMocHJldiA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHByZXZbY29ubmVjdG9yS2V5XSA/IDAgOiAxO1xuICAgICAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB7IC4uLnByZXYsIFtjb25uZWN0b3JLZXldOiBuZXdWYWx1ZSB9O1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1VwZGF0ZWQgY29ubmVjdG9yIHN0YXRlOicsIHsga2V5OiBjb25uZWN0b3JLZXksIG5ld1ZhbHVlLCBhbGxDb25uZWN0b3JzOiBuZXdTdGF0ZSB9KTsgLy8gT3B0aW9uYWwgZGV0YWlsZWQgbG9nXG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGFmdGVyIGhhbmRsaW5nIGNtZC1jbGlja1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICBjb25zb2xlLmxvZygnQ21kLWNsaWNrIGhvcml6b250YWwgY29ubmVjdG9yIGJsb2NrZWQgb3IgYmFzZSBjb25kaXRpb25zIG5vdCBtZXQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYmxvY2tlZCBvciBjYW4ndCBjb25uZWN0LCBmYWxsIHRocm91Z2ggdG8gcmVndWxhciBjbGljaz8gXG4gICAgICAgIC8vIE9yIG1heWJlIGRvIG5vdGhpbmcgb24gY21kLWNsaWNrIGlmIGJsb2NrZWQ/IExldCdzIGRvIG5vdGhpbmcgZm9yIG5vdy5cbiAgICAgICAgcmV0dXJuOyAvLyBFeHBsaWNpdGx5IGRvIG5vdGhpbmcgbW9yZSBpZiBjbWQtY2xpY2sgd2FzIGJsb2NrZWQgb3IgaW52YWxpZFxuICAgICAgfVxuXG4gICAgICAvLyBSZWd1bGFyIGNsaWNrIGJlaGF2aW9yICh0b2dnbGUgYWN0aXZhdGlvbikgLSBvbmx5IHJ1bnMgaWYgbm90IGEgaGFuZGxlZCBjbWQtY2xpY2tcbiAgICAgIGNvbnNvbGUubG9nKCdUb2dnbGluZyBjaXJjbGUgYWN0aXZhdGlvbiAocmVndWxhciBjbGljayknKTtcbiAgICAgIHNldEFjdGl2YXRpb25TdGF0ZShjdXJyZW50ID0+IHtcbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSBuZXcgRmxvYXQzMkFycmF5KGN1cnJlbnQpO1xuICAgICAgICBuZXdTdGF0ZVtpbmRleF0gPSBuZXdTdGF0ZVtpbmRleF0gPT09IDEuMCA/IDAuMCA6IDEuMDtcbiAgICAgICAgY29uc29sZS5sb2coJ05ldyBhY3RpdmF0aW9uIHN0YXRlIGZvciBjaXJjbGU6Jywge1xuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG9sZFZhbHVlOiBjdXJyZW50W2luZGV4XSxcbiAgICAgICAgICBuZXdWYWx1ZTogbmV3U3RhdGVbaW5kZXhdXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFttZXNoUmVmLCBzZXRBY3RpdmF0aW9uU3RhdGUsIEdSSURfV0lEVEgsIHZpc3VhbFNjYWxlLCBzZXRDbWRIb3JpekNvbm5lY3RvcnMsIGNtZEhvcml6Q29ubmVjdG9ycywgaW50ZW5kZWRDb25uZWN0b3JzLCBHUklEX0hFSUdIVF0pOyAvLyBEZXBlbmRlbmNpZXMgYXJlIGNvcnJlY3Qgbm93XG5cbiAgLy8gPT09IEZlYXR1cmUgNTogU3RhdGUgRGF0YSBUZXh0dXJlID09PVxuICBjb25zdCBzdGF0ZVRleHR1cmUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRpbmcgc3RhdGUgdGV4dHVyZTogJHtHUklEX1dJRFRIfXgke0dSSURfSEVJR0hUfWApO1xuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YVRleHR1cmUoXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KFRPVEFMX0NJUkNMRVMpLmZpbGwoMC4wKSwgLy8gSW5pdGlhbCBkYXRhIGJ1ZmZlclxuICAgICAgR1JJRF9XSURUSCxcbiAgICAgIEdSSURfSEVJR0hULFxuICAgICAgVEhSRUUuUmVkRm9ybWF0LCAvLyBTdG9yZSBhY3RpdmF0aW9uICgwLjAgb3IgMS4wKSBpbiBSZWQgY2hhbm5lbFxuICAgICAgVEhSRUUuRmxvYXRUeXBlXG4gICAgKTtcbiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7IC8vIENydWNpYWw6IE5vIGludGVycG9sYXRpb25cbiAgICB0ZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7IC8vIEluaXRpYWwgdXBkYXRlIG5lZWRlZFxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9LCBbR1JJRF9XSURUSCwgR1JJRF9IRUlHSFQsIFRPVEFMX0NJUkNMRVNdKTsgLy8gUmVjcmVhdGUgdGV4dHVyZSBpZiBncmlkIGRpbWVuc2lvbnMgY2hhbmdlXG5cbiAgLy8gVXBkYXRlIHRleHR1cmUgZGF0YSB3aGVuIGFjdGl2YXRpb25TdGF0ZSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHN0YXRlVGV4dHVyZSAmJiBhY3RpdmF0aW9uU3RhdGUubGVuZ3RoID09PSBzdGF0ZVRleHR1cmUuaW1hZ2UuZGF0YS5sZW5ndGgpIHtcbiAgICAgIHN0YXRlVGV4dHVyZS5pbWFnZS5kYXRhLnNldChhY3RpdmF0aW9uU3RhdGUpOyAvLyBVcGRhdGUgdGV4dHVyZSBkYXRhIGRpcmVjdGx5XG4gICAgICBzdGF0ZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOyAvLyBNYXJrIGZvciBHUFUgdXBsb2FkXG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBzdGF0ZSB0ZXh0dXJlIGRhdGEuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignU2tpcHBpbmcgdGV4dHVyZSB1cGRhdGU6IE1pc21hdGNoIGJldHdlZW4gc3RhdGUgYXJyYXkgYW5kIHRleHR1cmUgc2l6ZSBvciB0ZXh0dXJlIG5vdCByZWFkeS4nKTtcbiAgICB9XG4gIH0sIFthY3RpdmF0aW9uU3RhdGUsIHN0YXRlVGV4dHVyZV0pOyAvLyBEZXBlbmQgb24gYWN0aXZhdGlvbiBzdGF0ZSBhbmQgdGhlIHRleHR1cmUgaXRzZWxmXG5cbiAgLy8gPT09IEZlYXR1cmUgODogQ29ubmVjdG9yIFBsYW5lIEludGVyYWN0aW9uIChNb3ZlZCBET1dOLCB1c2VzIGhlbHBlcnMgZGVmaW5lZCBhYm92ZSkgPT09XG4gIGNvbnN0IGhhbmRsZUNvbm5lY3RvckNsaWNrID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBhbnkpID0+IHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdG9yIHBsYW5lIGNsaWNrZWQ6Jywge1xuICAgICAgcG9pbnQ6IGV2ZW50LnBvaW50LFxuICAgICAgaXNDbWRDbGljazogZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5XG4gICAgfSk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBjbGljayBwb2ludCBpbiB3b3JsZCBzcGFjZVxuICAgIGNvbnN0IGNsaWNrUG9pbnQgPSBldmVudC5wb2ludDtcbiAgICBcbiAgICAvLyBGaXJzdCwgY2hlY2sgaWYgdGhlIGNsaWNrIGlzIG9uIGEgY2lyY2xlXG4gICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGdyaWQgY2VsbCB0aGlzIHBvaW50IGlzIGNsb3Nlc3QgdG9cbiAgICBjb25zdCBncmlkWCA9IE1hdGgucm91bmQoKGNsaWNrUG9pbnQueCAtIGNlbnRlck9mZnNldC54KSAvIEZJWEVEX1NQQUNJTkcpO1xuICAgIGNvbnN0IGdyaWRZID0gTWF0aC5yb3VuZCgoY2xpY2tQb2ludC55IC0gY2VudGVyT2Zmc2V0LnkpIC8gRklYRURfU1BBQ0lORyk7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBjZWxsIGlzIHdpdGhpbiBncmlkIGJvdW5kc1xuICAgIGlmIChncmlkWCA+PSAwICYmIGdyaWRYIDwgR1JJRF9XSURUSCAmJiBncmlkWSA+PSAwICYmIGdyaWRZIDwgR1JJRF9IRUlHSFQpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY2VsbCBjZW50ZXIgaW4gd29ybGQgc3BhY2VcbiAgICAgIGNvbnN0IGNlbGxDZW50ZXIgPSBnZXRXb3JsZFBvc2l0aW9uKGdyaWRZLCBncmlkWCwgR1JJRF9XSURUSCwgR1JJRF9IRUlHSFQsIEZJWEVEX1NQQUNJTkcsIGNlbnRlck9mZnNldCk7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZSBmcm9tIGNsaWNrIHRvIGNlbGwgY2VudGVyXG4gICAgICBjb25zdCBkaXN0RnJvbUNlbnRlciA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3coY2xpY2tQb2ludC54IC0gY2VsbENlbnRlci54LCAyKSArIFxuICAgICAgICBNYXRoLnBvdyhjbGlja1BvaW50LnkgLSBjZWxsQ2VudGVyLnksIDIpXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBjbGljayBpcyBpbnNpZGUgdGhlIGlubmVyIGNpcmNsZVxuICAgICAgY29uc3QgY3VycmVudElubmVyUmFkaXVzID0gQkFTRV9SQURJVVNfQiAqIHZpc3VhbFNjYWxlO1xuICAgICAgaWYgKGRpc3RGcm9tQ2VudGVyIDw9IGN1cnJlbnRJbm5lclJhZGl1cykge1xuICAgICAgICAvLyBUaGlzIGlzIGEgY2xpY2sgb24gYSBjaXJjbGUgLSB0b2dnbGUgaXRzIGFjdGl2YXRpb24gc3RhdGVcbiAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleChncmlkWSwgZ3JpZFgsIEdSSURfV0lEVEgpO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBjbWQvY3RybCBjbGljayBhbmQgdGhlcmUncyBhbiBhY3RpdmUgY2lyY2xlIHRvIHRoZSByaWdodFxuICAgICAgICBpZiAoKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkgJiYgZ3JpZFggPCBHUklEX1dJRFRIIC0gMSkge1xuICAgICAgICAgIGNvbnN0IHJpZ2h0SW5kZXggPSBnZXRJbmRleChncmlkWSwgZ3JpZFggKyAxLCBHUklEX1dJRFRIKTtcbiAgICAgICAgICBjb25zdCBsZWZ0QWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW2luZGV4XSA9PT0gMS4wO1xuICAgICAgICAgIGNvbnN0IHJpZ2h0QWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW3JpZ2h0SW5kZXhdID09PSAxLjA7XG4gICAgICAgICAgY29uc3QgY2FuQ29ubmVjdEJhc2UgPSBsZWZ0QWN0aXZlICYmIHJpZ2h0QWN0aXZlO1xuXG4gICAgICAgICAgLy8gLS0tIE5FVzogQ2hlY2sgZm9yIGJsb2NraW5nIGRpYWdvbmFsIGNvbm5lY3RvcnMgLS0tXG4gICAgICAgICAgY29uc3QgY29ubmVjdG9yQmVsb3cgPSBnZXRJbnRlbmRlZENvbm5lY3RvcihncmlkWCwgZ3JpZFkgLSAxKTtcbiAgICAgICAgICBjb25zdCBjb25uZWN0b3JBZGphY2VudCA9IGdldEludGVuZGVkQ29ubmVjdG9yKGdyaWRYLCBncmlkWSk7XG4gICAgICAgICAgY29uc3QgaXNCbG9ja2VkQnlEaWFnb25hbCA9IFxuICAgICAgICAgICAgKGNvbm5lY3RvckJlbG93ID09PSBDT05ORUNUT1JfRElBR19UTF9CUiB8fCBjb25uZWN0b3JCZWxvdyA9PT0gQ09OTkVDVE9SX0RJQUdfQkxfVFIpIHx8XG4gICAgICAgICAgICAoY29ubmVjdG9yQWRqYWNlbnQgPT09IENPTk5FQ1RPUl9ESUFHX1RMX0JSIHx8IGNvbm5lY3RvckFkamFjZW50ID09PSBDT05ORUNUT1JfRElBR19CTF9UUik7XG4gICAgICAgICAgLy8gLS0tIEVuZCBORVcgY2hlY2sgLS0tXG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBjbWQtY2xpY2sgKHZpYSBwbGFuZSBvbiBjaXJjbGUpOicsIHtcbiAgICAgICAgICAgIHg6IGdyaWRYLCB5OiBncmlkWSxcbiAgICAgICAgICAgIGxlZnRBY3RpdmUsIHJpZ2h0QWN0aXZlLFxuICAgICAgICAgICAgY2FuQ29ubmVjdEJhc2UsIGlzQmxvY2tlZEJ5RGlhZ29uYWwsXG4gICAgICAgICAgICBjb25uZWN0b3JCZWxvdywgY29ubmVjdG9yQWRqYWNlbnRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIE9ubHkgYWxsb3cgdG9nZ2xlIGlmIGJhc2UgY29uZGl0aW9ucyBtZXQgQU5EIG5vdCBibG9ja2VkIGJ5IGRpYWdvbmFsXG4gICAgICAgICAgaWYgKGNhbkNvbm5lY3RCYXNlICYmICFpc0Jsb2NrZWRCeURpYWdvbmFsKSB7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0b3JLZXkgPSBnZXRIb3JpekNtZENvbm5lY3RvcktleShncmlkWCwgZ3JpZFkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RvZ2dsaW5nIGNtZC1ob3JpeiBjb25uZWN0b3IgKGFsbG93ZWQpOicsIHsga2V5OiBjb25uZWN0b3JLZXkgfSk7XG4gICAgICAgICAgICBzZXRDbWRIb3JpekNvbm5lY3RvcnMocHJldiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0Nvbm5lY3RvcnMgPSB7IC4uLnByZXYgfTtcbiAgICAgICAgICAgICAgbmV3Q29ubmVjdG9yc1tjb25uZWN0b3JLZXldID0gcHJldltjb25uZWN0b3JLZXldID8gMCA6IDE7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdUb2dnbGluZyBjbWQtaG9yaXogY29ubmVjdG9yOicsIHsga2V5OiBjb25uZWN0b3JLZXksIG5ld1ZhbHVlOiBuZXdDb25uZWN0b3JzW2Nvbm5lY3RvcktleV0gfSk7IC8vIE9wdGlvbmFsIGRldGFpbGVkIGxvZ1xuICAgICAgICAgICAgICByZXR1cm4gbmV3Q29ubmVjdG9ycztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGFmdGVyIGhhbmRsaW5nIGNtZC1jbGlja1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgY29uc29sZS5sb2coJ0NtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciBibG9ja2VkIG9yIGJhc2UgY29uZGl0aW9ucyBub3QgbWV0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiBibG9ja2VkIG9yIGNhbid0IGNvbm5lY3QsIGZhbGwgdGhyb3VnaCB0byByZWd1bGFyIGNsaWNrPyBMZXQncyBkbyBub3RoaW5nIG1vcmUuXG4gICAgICAgICAgcmV0dXJuOyAvLyBFeHBsaWNpdGx5IGRvIG5vdGhpbmcgbW9yZSBpZiBjbWQtY2xpY2sgd2FzIGJsb2NrZWQgb3IgaW52YWxpZFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVndWxhciBjbGljayBiZWhhdmlvciAodG9nZ2xlIGFjdGl2YXRpb24pIC0gb25seSBydW5zIGlmIG5vdCBhIGhhbmRsZWQgY21kLWNsaWNrXG4gICAgICAgIGNvbnNvbGUubG9nKCdUb2dnbGluZyBjaXJjbGUgYWN0aXZhdGlvbiAocmVndWxhciBjbGljayBvbiBwbGFuZSknKTtcbiAgICAgICAgc2V0QWN0aXZhdGlvblN0YXRlKGN1cnJlbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3IEZsb2F0MzJBcnJheShjdXJyZW50KTtcbiAgICAgICAgICBuZXdTdGF0ZVtpbmRleF0gPSBuZXdTdGF0ZVtpbmRleF0gPT09IDEuMCA/IDAuMCA6IDEuMDtcbiAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgVG9nZ2xpbmcgY2lyY2xlIGF0ICgke2dyaWRYfSwke2dyaWRZfSlgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlIGNsaWNrIHdhc24ndCBvbiBhIGNpcmNsZSwgc28gdHJlYXQgaXQgYXMgYSBjb25uZWN0b3IgY2xpY2tcbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggZ3JpZCBjZWxsIChib3R0b20tbGVmdCBvZiBhIDJ4MiBncm91cCkgdGhpcyBwb2ludCBpcyBjbG9zZXN0IHRvXG4gICAgY29uc3QgZ3JvdXBYID0gTWF0aC5mbG9vcigoY2xpY2tQb2ludC54IC0gY2VudGVyT2Zmc2V0LngpIC8gRklYRURfU1BBQ0lORyk7XG4gICAgY29uc3QgZ3JvdXBZID0gTWF0aC5mbG9vcigoY2xpY2tQb2ludC55IC0gY2VudGVyT2Zmc2V0LnkpIC8gRklYRURfU1BBQ0lORyk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBpbmRpY2VzIG9mIHRoZSBmb3VyIGNlbGxzIGluIHRoZSAyeDIgZ3JvdXBcbiAgICBjb25zdCBibEluZGV4ID0gZ2V0SW5kZXgoZ3JvdXBZLCBncm91cFgsIEdSSURfV0lEVEgpO1xuICAgIGNvbnN0IGJySW5kZXggPSBnZXRJbmRleChncm91cFksIGdyb3VwWCArIDEsIEdSSURfV0lEVEgpO1xuICAgIGNvbnN0IHRsSW5kZXggPSBnZXRJbmRleChncm91cFkgKyAxLCBncm91cFgsIEdSSURfV0lEVEgpO1xuICAgIGNvbnN0IHRySW5kZXggPSBnZXRJbmRleChncm91cFkgKyAxLCBncm91cFggKyAxLCBHUklEX1dJRFRIKTtcbiAgICBcbiAgICAvLyBDaGVjayB3aGljaCBjZWxscyBhcmUgd2l0aGluIGdyaWQgYm91bmRzXG4gICAgY29uc3QgaXNWYWxpZEdyb3VwID0gXG4gICAgICBncm91cFggPj0gMCAmJiBncm91cFggPCBHUklEX1dJRFRIIC0gMSAmJiBcbiAgICAgIGdyb3VwWSA+PSAwICYmIGdyb3VwWSA8IEdSSURfSEVJR0hUIC0gMTtcbiAgICBcbiAgICBpZiAoIWlzVmFsaWRHcm91cCkgcmV0dXJuO1xuICAgIFxuICAgIC8vIEdldCBhY3RpdmF0aW9uIHN0YXRlcyBmb3IgdGhlIGZvdXIgY2VsbHNcbiAgICBjb25zdCBibEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVtibEluZGV4XSA9PT0gMS4wO1xuICAgIGNvbnN0IGJyQWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW2JySW5kZXhdID09PSAxLjA7XG4gICAgY29uc3QgdGxBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbdGxJbmRleF0gPT09IDEuMDtcbiAgICBjb25zdCB0ckFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVt0ckluZGV4XSA9PT0gMS4wO1xuICAgIFxuICAgIC8vIEdldCB0aGUgd29ybGQgcG9zaXRpb25zIG9mIHRoZSBjZWxsIGNlbnRlcnNcbiAgICBjb25zdCBibFBvcyA9IGdldFdvcmxkUG9zaXRpb24oZ3JvdXBZLCBncm91cFgsIEdSSURfV0lEVEgsIEdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IGJyUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFksIGdyb3VwWCArIDEsIEdSSURfV0lEVEgsIEdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IHRsUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFkgKyAxLCBncm91cFgsIEdSSURfV0lEVEgsIEdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IHRyUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFkgKyAxLCBncm91cFggKyAxLCBHUklEX1dJRFRILCBHUklEX0hFSUdIVCwgRklYRURfU1BBQ0lORywgY2VudGVyT2Zmc2V0KTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNlbnRlciBvZiB0aGUgMngyIGdyb3VwXG4gICAgY29uc3QgY2VudGVyWCA9IChibFBvcy54ICsgYnJQb3MueCArIHRsUG9zLnggKyB0clBvcy54KSAvIDQ7XG4gICAgY29uc3QgY2VudGVyWSA9IChibFBvcy55ICsgYnJQb3MueSArIHRsUG9zLnkgKyB0clBvcy55KSAvIDQ7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGZyb20gY2xpY2sgdG8gY2VudGVyIG9mIDJ4MiBncm91cFxuICAgIGNvbnN0IGRpc3RUb0NlbnRlciA9IE1hdGguc3FydChcbiAgICAgIE1hdGgucG93KGNsaWNrUG9pbnQueCAtIGNlbnRlclgsIDIpICsgXG4gICAgICBNYXRoLnBvdyhjbGlja1BvaW50LnkgLSBjZW50ZXJZLCAyKVxuICAgICk7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrIGlzIGluIHRoZSBjZW50ZXIgem9uZSAoMzAlIG9mIGNlbGwgc3BhY2luZylcbiAgICBjb25zdCBpc0NlbnRlckNsaWNrID0gZGlzdFRvQ2VudGVyIDwgRklYRURfU1BBQ0lORyAqIDAuMyAqIHZpc3VhbFNjYWxlO1xuICAgIFxuICAgIC8vIEdldCB0aGUgcG9zc2libGUgZGlhZ29uYWwgY29ubmVjdG9yc1xuICAgIGNvbnN0IGNhblVzZURpYWdUTEJSID0gdGxBY3RpdmUgJiYgYnJBY3RpdmU7XG4gICAgY29uc3QgY2FuVXNlRGlhZ0JMVFIgPSBibEFjdGl2ZSAmJiB0ckFjdGl2ZTtcbiAgICBjb25zdCBoYXNEaWFnb25hbE9wdGlvbnMgPSBjYW5Vc2VEaWFnVExCUiB8fCBjYW5Vc2VEaWFnQkxUUjtcbiAgICBcbiAgICAvLyBHZXQgY3VycmVudCBpbnRlbmRlZCBjb25uZWN0b3JcbiAgICBjb25zdCBjdXJyZW50Q29ubmVjdG9yID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoZ3JvdXBYLCBncm91cFkpO1xuICAgIGNvbnN0IGdyb3VwS2V5ID0gZ2V0Q2VsbEdyb3VwS2V5KGdyb3VwWCwgZ3JvdXBZKTtcbiAgICBcbiAgICAvLyAtLS0gTkVXOiBDaGVjayBmb3IgYmxvY2tpbmcgaG9yaXpvbnRhbCBjb25uZWN0b3JzIC0tLVxuICAgIGNvbnN0IGhhc0hvcml6Q21kQmVsb3cgPSBjbWRIb3JpekNvbm5lY3RvcnNbZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoZ3JvdXBYLCBncm91cFkpXSA9PT0gMTtcbiAgICBjb25zdCBoYXNIb3JpekNtZEFib3ZlID0gY21kSG9yaXpDb25uZWN0b3JzW2dldEhvcml6Q21kQ29ubmVjdG9yS2V5KGdyb3VwWCwgZ3JvdXBZICsgMSldID09PSAxO1xuICAgIGNvbnN0IGlzQmxvY2tlZEJ5SG9yaXogPSBoYXNIb3JpekNtZEJlbG93IHx8IGhhc0hvcml6Q21kQWJvdmU7XG4gICAgLy8gLS0tIEVuZCBORVcgQ2hlY2sgLS0tXG5cbiAgICBsZXQgbmV3Q29ubmVjdG9yID0gQ09OTkVDVE9SX05PTkU7IC8vIEluaXRpYWxpemUgcG90ZW50aWFsIG5ldyBzdGF0ZVxuICAgIGxldCBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7IC8vIFN0b3JlIHRoZSB0eXBlIGRldGVybWluZWQgYnkgY2xpY2sgbG9naWNcbiAgICBcbiAgICAvLyBJZiBjbGlja2VkIGluIHRoZSBjZW50ZXIgYW5kIGRpYWdvbmFsIGNvbm5lY3RvcnMgYXJlIGF2YWlsYWJsZSwgY3ljbGUgdGhyb3VnaCB0aGVtXG4gICAgaWYgKGlzQ2VudGVyQ2xpY2sgJiYgaGFzRGlhZ29uYWxPcHRpb25zKSB7XG4gICAgICBpZiAoY2FuVXNlRGlhZ1RMQlIgJiYgY2FuVXNlRGlhZ0JMVFIpIHtcbiAgICAgICAgLy8gQm90aCBkaWFnb25hbHMgYXJlIGF2YWlsYWJsZSwgY3ljbGUgdGhyb3VnaCB0aGUgb3B0aW9uczogTk9ORSAtPiBUTC1CUiAtPiBCTC1UUiAtPiBOT05FXG4gICAgICAgIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfTk9ORSkge1xuICAgICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBDT05ORUNUT1JfRElBR19UTF9CUjtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfRElBR19UTF9CUikge1xuICAgICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBDT05ORUNUT1JfRElBR19CTF9UUjtcbiAgICAgICAgfSBlbHNlIHsgLy8gY3VycmVudCB3YXMgQkxfVFJcbiAgICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FuVXNlRGlhZ1RMQlIpIHtcbiAgICAgICAgLy8gT25seSBUTC1CUiBkaWFnb25hbCBpcyBhdmFpbGFibGUsIHRvZ2dsZSBpdFxuICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gY3VycmVudENvbm5lY3RvciA9PT0gQ09OTkVDVE9SX0RJQUdfVExfQlIgPyBDT05ORUNUT1JfTk9ORSA6IENPTk5FQ1RPUl9ESUFHX1RMX0JSO1xuICAgICAgfSBlbHNlIHsgLy8gT25seSBjYW5Vc2VEaWFnQkxUUlxuICAgICAgICAvLyBPbmx5IEJMLVRSIGRpYWdvbmFsIGlzIGF2YWlsYWJsZSwgdG9nZ2xlIGl0XG4gICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfRElBR19CTF9UUiA/IENPTk5FQ1RPUl9OT05FIDogQ09OTkVDVE9SX0RJQUdfQkxfVFI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNDZW50ZXJDbGljaykgeyAvLyBDaGVjayBub24tY2VudGVyIGNsaWNrcyBvbmx5IGlmIG5vdCBhIGNlbnRlciBjbGlja1xuICAgICAgLy8gRm9yIGNsaWNrcyBvdXRzaWRlIHRoZSBjZW50ZXIsIGRldGVybWluZSB3aGljaCBkaWFnb25hbCB3YXMgY2xpY2tlZCAoaWYgYW55KVxuICAgICAgbGV0IGNsaWNrZWRUeXBlID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZXMgZnJvbSBjbGljayB0byBlYWNoIGRpYWdvbmFsXG4gICAgICBjb25zdCBkaXN0VG9CTFRSID0gTWF0aC5hYnMoKGNsaWNrUG9pbnQueCAtIGJsUG9zLngpICogKHRyUG9zLnkgLSBibFBvcy55KSAtIChjbGlja1BvaW50LnkgLSBibFBvcy55KSAqICh0clBvcy54IC0gYmxQb3MueCkpIC8gXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3codHJQb3MueCAtIGJsUG9zLngsIDIpICsgTWF0aC5wb3codHJQb3MueSAtIGJsUG9zLnksIDIpKTtcbiAgICAgIGNvbnN0IGRpc3RUb1RMQlIgPSBNYXRoLmFicygoY2xpY2tQb2ludC54IC0gdGxQb3MueCkgKiAoYnJQb3MueSAtIHRsUG9zLnkpIC0gKGNsaWNrUG9pbnQueSAtIHRsUG9zLnkpICogKGJyUG9zLnggLSB0bFBvcy54KSkgLyBcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc3FydChNYXRoLnBvdyhiclBvcy54IC0gdGxQb3MueCwgMikgKyBNYXRoLnBvdyhiclBvcy55IC0gdGxQb3MueSwgMikpO1xuICAgICAgICAgICAgXG4gICAgICBpZiAoZGlzdFRvQkxUUiA8IGRpc3RUb1RMQlIpIHtcbiAgICAgICAgLy8gQ2xvc2VyIHRvIEJMLVRSIGRpYWdvbmFsICgvKVxuICAgICAgICBpZiAoY2FuVXNlRGlhZ0JMVFIpIHsgLy8gQ2hlY2sgaWYgcG9zc2libGVcbiAgICAgICAgICBjbGlja2VkVHlwZSA9IENPTk5FQ1RPUl9ESUFHX0JMX1RSO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbG9zZXIgdG8gVEwtQlIgZGlhZ29uYWwgKFxcKVxuICAgICAgICBpZiAoY2FuVXNlRGlhZ1RMQlIpIHsgLy8gQ2hlY2sgaWYgcG9zc2libGVcbiAgICAgICAgICBjbGlja2VkVHlwZSA9IENPTk5FQ1RPUl9ESUFHX1RMX0JSO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFRvZ2dsZSBsb2dpYyAtIGlmIHRoZSBjbGlja2VkIGNvbm5lY3RvciBpcyBhbHJlYWR5IGFjdGl2ZSwgdHVybiBpdCBvZmZcbiAgICAgIC8vIE90aGVyd2lzZSwgdHVybiBvbiB0aGUgY2xpY2tlZCBvbmVcbiAgICAgIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBjbGlja2VkVHlwZSkge1xuICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7IC8vIFRvZ2dsZSBvZmZcbiAgICAgIH0gZWxzZSBpZiAoY2xpY2tlZFR5cGUgIT09IENPTk5FQ1RPUl9OT05FKSB7XG4gICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBjbGlja2VkVHlwZTsgLy8gVG9nZ2xlIG9uIG5ldyBjb25uZWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAtLS0gQXBwbHkgQmxvY2tpbmcgTG9naWMgLS0tXG4gICAgaWYgKGlzQmxvY2tlZEJ5SG9yaXogJiYgKHBvdGVudGlhbENvbm5lY3RvclR5cGUgPT09IENPTk5FQ1RPUl9ESUFHX1RMX0JSIHx8IHBvdGVudGlhbENvbm5lY3RvclR5cGUgPT09IENPTk5FQ1RPUl9ESUFHX0JMX1RSKSkge1xuICAgICAgbmV3Q29ubmVjdG9yID0gQ09OTkVDVE9SX05PTkU7IC8vIEZvcmNlIHRvIE5PTkUgaWYgYmxvY2tlZCBieSBob3Jpem9udGFsXG4gICAgICBjb25zb2xlLmxvZyhgRGlhZ29uYWwgY29ubmVjdG9yIGJsb2NrZWQgYnkgZXhpc3RpbmcgaG9yaXpvbnRhbCBjb25uZWN0b3IgYXQgZ3JvdXAgKCR7Z3JvdXBYfSwke2dyb3VwWX0pYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0Nvbm5lY3RvciA9IHBvdGVudGlhbENvbm5lY3RvclR5cGU7IC8vIE90aGVyd2lzZSwgdXNlIHRoZSB0eXBlIGRldGVybWluZWQgYnkgY2xpY2sgbG9naWNcbiAgICB9XG4gICAgLy8gLS0tIEVuZCBCbG9ja2luZyBMb2dpYyAtLS1cbiAgICBcbiAgICAvLyBVcGRhdGUgdGhlIGludGVuZGVkIGNvbm5lY3RvciBzdGF0ZVxuICAgIHNldEludGVuZGVkQ29ubmVjdG9ycyhwcmV2ID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgW2dyb3VwS2V5XTogbmV3Q29ubmVjdG9yXG4gICAgfSkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBDbGlja2VkIGNlbGwgZ3JvdXAgKCR7Z3JvdXBYfSwke2dyb3VwWX0pLCBzZXR0aW5nIGNvbm5lY3RvciB0byAke25ld0Nvbm5lY3Rvcn1gKTtcbiAgICBcbiAgfSwgW0dSSURfV0lEVEgsIEdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQsIGFjdGl2YXRpb25TdGF0ZSwgaW50ZW5kZWRDb25uZWN0b3JzLCB2aXN1YWxTY2FsZSwgc2V0Q21kSG9yaXpDb25uZWN0b3JzLCBjbWRIb3JpekNvbm5lY3RvcnNdKTsgLy8gRGVwZW5kZW5jaWVzIGFyZSBjb3JyZWN0IG5vd1xuXG4gIC8vIFJlc2V0IGNvbm5lY3RvciBpbnRlbnQgd2hlbiBhIGNpcmNsZSBpcyBkZWFjdGl2YXRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIENoZWNrIGFsbCBjZWxsIGdyb3Vwc1xuICAgIGNvbnN0IG5ld0ludGVuZGVkQ29ubmVjdG9ycyA9IHsgLi4uaW50ZW5kZWRDb25uZWN0b3JzIH07XG4gICAgY29uc3QgbmV3Q21kSG9yaXpDb25uZWN0b3JzID0geyAuLi5jbWRIb3JpekNvbm5lY3RvcnMgfTtcbiAgICBsZXQgaGFzQ2hhbmdlcyA9IGZhbHNlO1xuICAgIGxldCBoYXNDbWRIb3JpekNoYW5nZXMgPSBmYWxzZTtcbiAgICBcbiAgICAvLyBGaXJzdCBjaGVjayByZWd1bGFyIGNvbm5lY3RvcnNcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnRlbmRlZENvbm5lY3RvcnMpIHtcbiAgICAgIGNvbnN0IGNvbm5lY3RvciA9IGludGVuZGVkQ29ubmVjdG9yc1trZXldO1xuICAgICAgaWYgKGNvbm5lY3RvciA9PT0gQ09OTkVDVE9SX05PTkUpIGNvbnRpbnVlO1xuICAgICAgXG4gICAgICAvLyBQYXJzZSB4LHkgZnJvbSBrZXlcbiAgICAgIGNvbnN0IFt4LCB5XSA9IGtleS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgXG4gICAgICAvLyBHZXQgdGhlIGluZGljZXMgb2YgdGhlIGZvdXIgY2VsbHNcbiAgICAgIGNvbnN0IGJsSW5kZXggPSBnZXRJbmRleCh5LCB4LCBHUklEX1dJRFRIKTtcbiAgICAgIGNvbnN0IGJySW5kZXggPSBnZXRJbmRleCh5LCB4ICsgMSwgR1JJRF9XSURUSCk7XG4gICAgICBjb25zdCB0bEluZGV4ID0gZ2V0SW5kZXgoeSArIDEsIHgsIEdSSURfV0lEVEgpO1xuICAgICAgY29uc3QgdHJJbmRleCA9IGdldEluZGV4KHkgKyAxLCB4ICsgMSwgR1JJRF9XSURUSCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBhY3RpdmF0aW9uIHN0YXRlc1xuICAgICAgY29uc3QgYmxBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbYmxJbmRleF0gPT09IDEuMDtcbiAgICAgIGNvbnN0IGJyQWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW2JySW5kZXhdID09PSAxLjA7XG4gICAgICBjb25zdCB0bEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVt0bEluZGV4XSA9PT0gMS4wO1xuICAgICAgY29uc3QgdHJBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbdHJJbmRleF0gPT09IDEuMDtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbm5lY3RvciBpcyBzdGlsbCB2YWxpZFxuICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgICAgXG4gICAgICBzd2l0Y2ggKGNvbm5lY3Rvcikge1xuICAgICAgICBjYXNlIENPTk5FQ1RPUl9ESUFHX1RMX0JSOlxuICAgICAgICAgIGlzVmFsaWQgPSB0bEFjdGl2ZSAmJiBickFjdGl2ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDT05ORUNUT1JfRElBR19CTF9UUjpcbiAgICAgICAgICBpc1ZhbGlkID0gYmxBY3RpdmUgJiYgdHJBY3RpdmU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ09OTkVDVE9SX0hPUklaX1Q6XG4gICAgICAgICAgaXNWYWxpZCA9IHRsQWN0aXZlICYmIHRyQWN0aXZlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENPTk5FQ1RPUl9IT1JJWl9COlxuICAgICAgICAgIGlzVmFsaWQgPSBibEFjdGl2ZSAmJiBickFjdGl2ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIG5ld0ludGVuZGVkQ29ubmVjdG9yc1trZXldID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICAgIGhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdyBjaGVjayBjbWQtY2xpY2sgaG9yaXpvbnRhbCBjb25uZWN0b3JzXG4gICAgZm9yIChjb25zdCBrZXkgaW4gY21kSG9yaXpDb25uZWN0b3JzKSB7XG4gICAgICBpZiAoY21kSG9yaXpDb25uZWN0b3JzW2tleV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBQYXJzZSB4LHkgZnJvbSBrZXkgKHJlbW92ZSAnaGNtZDonIHByZWZpeClcbiAgICAgIGNvbnN0IFt4LCB5XSA9IGtleS5zdWJzdHJpbmcoNSkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcblxuICAgICAgLy8gR2V0IGluZGljZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IGNpcmNsZXNcbiAgICAgIGNvbnN0IGxlZnRJbmRleCA9IGdldEluZGV4KHksIHgsIEdSSURfV0lEVEgpO1xuICAgICAgY29uc3QgcmlnaHRJbmRleCA9IGdldEluZGV4KHksIHggKyAxLCBHUklEX1dJRFRIKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgYm90aCBjaXJjbGVzIGFyZSBzdGlsbCBhY3RpdmVcbiAgICAgIGNvbnN0IGxlZnRBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbbGVmdEluZGV4XSA9PT0gMS4wO1xuICAgICAgY29uc3QgcmlnaHRBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbcmlnaHRJbmRleF0gPT09IDEuMDtcblxuICAgICAgaWYgKCFsZWZ0QWN0aXZlIHx8ICFyaWdodEFjdGl2ZSkge1xuICAgICAgICBuZXdDbWRIb3JpekNvbm5lY3RvcnNba2V5XSA9IDA7XG4gICAgICAgIGhhc0NtZEhvcml6Q2hhbmdlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChoYXNDaGFuZ2VzKSB7XG4gICAgICBzZXRJbnRlbmRlZENvbm5lY3RvcnMobmV3SW50ZW5kZWRDb25uZWN0b3JzKTtcbiAgICB9XG4gICAgaWYgKGhhc0NtZEhvcml6Q2hhbmdlcykge1xuICAgICAgc2V0Q21kSG9yaXpDb25uZWN0b3JzKG5ld0NtZEhvcml6Q29ubmVjdG9ycyk7XG4gICAgfVxuICB9LCBbYWN0aXZhdGlvblN0YXRlLCBHUklEX1dJRFRILCBpbnRlbmRlZENvbm5lY3RvcnMsIGNtZEhvcml6Q29ubmVjdG9yc10pO1xuXG4gIC8vIENyZWF0ZSBhIGRhdGEgdGV4dHVyZSBmb3IgaW50ZW5kZWQgY29ubmVjdG9yc1xuICBjb25zdCBpbnRlbmRlZENvbm5lY3RvclRleHR1cmUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRpbmcgaW50ZW5kZWQgY29ubmVjdG9yIHRleHR1cmU6ICR7R1JJRF9XSURUSC0xfXgke0dSSURfSEVJR0hULTF9YCk7XG4gICAgXG4gICAgLy8gVGV4dHVyZSBoYXMgb25lIHBpeGVsIHBlciAyeDIgY2VsbCBncm91cCAoZ3JpZCBjZWxscyBtaW51cyAxIGluIGVhY2ggZGltZW5zaW9uKVxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWF4KDEsIEdSSURfSEVJR0hUIC0gMSk7XG4gICAgXG4gICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShcbiAgICAgIG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKiBoZWlnaHQpLmZpbGwoMC4wKSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgVEhSRUUuUmVkRm9ybWF0LFxuICAgICAgVEhSRUUuRmxvYXRUeXBlXG4gICAgKTtcbiAgICBcbiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgdGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIFxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9LCBbR1JJRF9XSURUSCwgR1JJRF9IRUlHSFRdKTtcbiAgXG4gIC8vIFVwZGF0ZSB0aGUgaW50ZW5kZWQgY29ubmVjdG9yIHRleHR1cmUgd2hlbiBzdGF0ZSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heCgxLCBHUklEX1dJRFRIIC0gMSk7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKiBNYXRoLm1heCgxLCBHUklEX0hFSUdIVCAtIDEpKTtcbiAgICBcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IEdSSURfSEVJR0hUIC0gMTsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IEdSSURfV0lEVEggLSAxOyB4KyspIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB5ICogd2lkdGggKyB4O1xuICAgICAgICBjb25zdCBjb25uZWN0b3IgPSBnZXRJbnRlbmRlZENvbm5lY3Rvcih4LCB5KTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBjb25uZWN0b3I7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChpbnRlbmRlZENvbm5lY3RvclRleHR1cmUgJiYgZGF0YS5sZW5ndGggPT09IGludGVuZGVkQ29ubmVjdG9yVGV4dHVyZS5pbWFnZS5kYXRhLmxlbmd0aCkge1xuICAgICAgaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlLmltYWdlLmRhdGEuc2V0KGRhdGEpO1xuICAgICAgaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH0sIFtpbnRlbmRlZENvbm5lY3RvcnMsIEdSSURfV0lEVEgsIEdSSURfSEVJR0hULCBpbnRlbmRlZENvbm5lY3RvclRleHR1cmVdKTtcblxuICAvLyBDcmVhdGUgaG9yaXpvbnRhbCBjbWQtY2xpY2sgY29ubmVjdG9yIHRleHR1cmVcbiAgY29uc3QgY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYENyZWF0aW5nIGNtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciB0ZXh0dXJlOiAke0dSSURfV0lEVEgtMX14JHtHUklEX0hFSUdIVH1gKTtcbiAgICBcbiAgICAvLyBUZXh0dXJlIGhhcyBvbmUgcGl4ZWwgcGVyIGhvcml6b250YWwgY29ubmVjdGlvbiBwb3NzaWJpbGl0eVxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGhlaWdodCA9IEdSSURfSEVJR0hUO1xuICAgIFxuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YVRleHR1cmUoXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0KS5maWxsKDAuMCksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIFRIUkVFLlJlZEZvcm1hdCxcbiAgICAgIFRIUkVFLkZsb2F0VHlwZVxuICAgICk7XG4gICAgXG4gICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgIHRleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICBcbiAgICByZXR1cm4gdGV4dHVyZTtcbiAgfSwgW0dSSURfV0lEVEgsIEdSSURfSEVJR0hUXSk7XG4gIFxuICAvLyBVcGRhdGUgdGhlIGNtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciB0ZXh0dXJlIHdoZW4gc3RhdGUgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogR1JJRF9IRUlHSFQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBjbWQtaG9yaXogY29ubmVjdG9yIHRleHR1cmU6Jywge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQ6IEdSSURfSEVJR0hULFxuICAgICAgY29ubmVjdG9yczogY21kSG9yaXpDb25uZWN0b3JzXG4gICAgfSk7XG4gICAgXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBHUklEX0hFSUdIVDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoeCwgeSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY21kSG9yaXpDb25uZWN0b3JzW2tleV0gfHwgMDtcbiAgICAgICAgZGF0YVt5ICogd2lkdGggKyB4XSA9IHZhbHVlO1xuICAgICAgICBcbiAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBhY3RpdmUgY29ubmVjdG9yOicsIHsgeCwgeSwga2V5LCB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlICYmIGRhdGEubGVuZ3RoID09PSBjbWRIb3JpekNvbm5lY3RvclRleHR1cmUuaW1hZ2UuZGF0YS5sZW5ndGgpIHtcbiAgICAgIGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZS5pbWFnZS5kYXRhLnNldChkYXRhKTtcbiAgICAgIGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBjbWQtaG9yaXogY29ubmVjdG9yIHRleHR1cmUgZGF0YScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1NraXBwaW5nIGNtZC1ob3JpeiB0ZXh0dXJlIHVwZGF0ZTogc2l6ZSBtaXNtYXRjaCBvciB0ZXh0dXJlIG5vdCByZWFkeScsIHtcbiAgICAgICAgdGV4dHVyZVNpemU6IGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZT8uaW1hZ2UuZGF0YS5sZW5ndGgsXG4gICAgICAgIGRhdGFTaXplOiBkYXRhLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY21kSG9yaXpDb25uZWN0b3JzLCBHUklEX1dJRFRILCBHUklEX0hFSUdIVCwgY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlXSk7XG5cbiAgLy8gUmVmIGZvciB0aGUgbmV3IG1hdGVyaWFsXG4gIGNvbnN0IGNtZEhvcml6TWF0ZXJpYWxSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbWVzaFJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgXG4gICAgLy8gRW5hYmxlIGZydXN0dW0gY3VsbGluZ1xuICAgIG1lc2hSZWYuY3VycmVudC5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcbiAgICBcbiAgICAvLyBVcGRhdGUgYm91bmRpbmcgc3BoZXJlIGZvciBiZXR0ZXIgY3VsbGluZ1xuICAgIGlmIChtZXNoUmVmLmN1cnJlbnQuZ2VvbWV0cnkpIHtcbiAgICAgIG1lc2hSZWYuY3VycmVudC5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcbiAgICAgIGlmIChtZXNoUmVmLmN1cnJlbnQuZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpIHtcbiAgICAgICAgbWVzaFJlZi5jdXJyZW50Lmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLnJhZGl1cyAqPSBNYXRoLm1heCh2aXN1YWxTY2FsZSwgMS4wKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFt2aXN1YWxTY2FsZV0pO1xuXG4gIC8vIC0tLSBQZXJmb3JtYW5jZSBNb25pdG9yaW5nIFNldHVwIC0tLVxuICBjb25zdCBzdGF0c1JlZiA9IHVzZVJlZjxTdGF0cyB8IG51bGw+KG51bGwpOyAvLyBVc2UgdXNlUmVmIHRvIGhvbGQgdGhlIGluc3RhbmNlXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBJbml0aWFsaXplIFN0YXRzLmpzIG9uIGNvbXBvbmVudCBtb3VudFxuICAgIHN0YXRzUmVmLmN1cnJlbnQgPSBuZXcgU3RhdHMoKTtcbiAgICBzdGF0c1JlZi5jdXJyZW50LnNob3dQYW5lbCgwKTsgLy8gMDogZnBzLCAxOiBtcywgMjogbWIsIDMrOiBjdXN0b21cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0YXRzUmVmLmN1cnJlbnQuZG9tKTtcblxuICAgIC8vIENsZWFudXAgZnVuY3Rpb24gdG8gcmVtb3ZlIFN0YXRzLmpzIG9uIHVubW91bnRcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN0YXRzUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzdGF0c1JlZi5jdXJyZW50LmRvbSk7XG4gICAgICAgIHN0YXRzUmVmLmN1cnJlbnQgPSBudWxsOyAvLyBDbGVhciB0aGUgcmVmXG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pOyAvLyBFbXB0eSBkZXBlbmRlbmN5IGFycmF5IGVuc3VyZXMgdGhpcyBydW5zIG9ubHkgb25jZSBvbiBtb3VudC91bm1vdW50XG5cbiAgLy8gRnJhbWUgdXBkYXRlIGxvZ2ljIChpbmNsdWRpbmcgc3RhdHMpXG4gIHVzZUZyYW1lKChzdGF0ZSkgPT4ge1xuICAgIGlmIChzdGF0c1JlZi5jdXJyZW50KSB7IC8vIENoZWNrIGlmIHN0YXRzUmVmLmN1cnJlbnQgZXhpc3RzXG4gICAgICBzdGF0c1JlZi5jdXJyZW50LnVwZGF0ZSgpOyAvLyBVcGRhdGUgRlBTIGNvdW50ZXJcbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbDogTG9nIGZyYW1lIHRpbWUgcGVyaW9kaWNhbGx5XG4gICAgLy8gaWYgKHN0YXRlLmNsb2NrLmVsYXBzZWRUaW1lICUgNSA8IHN0YXRlLmNsb2NrLmdldERlbHRhKCkpIHsgLy8gQ2hlY2sgZXZlcnkgNXNcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdGcmFtZSB0aW1lOicsIHN0YXRlLmNsb2NrLmdldERlbHRhKCkgKiAxMDAwLCAnbXMnKTtcbiAgICAvLyB9XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGdyb3VwPlxuICAgICAgPGluc3RhbmNlZE1lc2ggXG4gICAgICAgIHJlZj17bWVzaFJlZn0gXG4gICAgICAgIGFyZ3M9e1t1bmRlZmluZWQsIHVuZGVmaW5lZCwgVE9UQUxfQ0lSQ0xFU119XG4gICAgICAgIGtleT17YGNpcmNsZXMtJHtUT1RBTF9DSVJDTEVTfWB9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNpcmNsZUNsaWNrfSAvLyBBdHRhY2ggY2xpY2sgaGFuZGxlclxuICAgICAgICBwb3NpdGlvbj17WzAsIDAsIC0wLjFdfSAvLyBQb3NpdGlvbiBjaXJjbGVzIGJlaGluZCBjb25uZWN0b3JzXG4gICAgICA+XG4gICAgICAgIHsvKiBQYXNzIGFyZ3MgZGlyZWN0bHkgdG8gZml4IFR5cGVTY3JpcHQgZXJyb3IgKi99XG4gICAgICAgIDxwbGFuZUdlb21ldHJ5IGFyZ3M9e1sxLCAxXX0+IFxuICAgICAgICAgIHsvKiBBdHRhY2ggdGhlIGluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlIGZvciBhY3RpdmF0aW9uIHN0YXRlICovfVxuICAgICAgICAgIDxpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGVcbiAgICAgICAgICAgIHJlZj17YWN0aXZhdGlvbkF0dHJpYnV0ZVJlZn1cbiAgICAgICAgICAgIGF0dGFjaD1cImF0dHJpYnV0ZXMtYV9hY3RpdmF0ZWRcIlxuICAgICAgICAgICAgYXJncz17W2FjdGl2YXRpb25TdGF0ZSwgMV19IC8vIFBhc3MgaW5pdGlhbCBzdGF0ZSwgaXRlbSBzaXplIDFcbiAgICAgICAgICAgIHVzYWdlPXtUSFJFRS5EeW5hbWljRHJhd1VzYWdlfSAvLyBNYXJrIGFzIGR5bmFtaWNcbiAgICAgICAgICAvPlxuICAgICAgICA8L3BsYW5lR2VvbWV0cnk+IFxuICAgICAgICA8Y2lyY2xlTWF0ZXJpYWwgXG4gICAgICAgICAgICByZWY9e21hdGVyaWFsUmVmfSBcbiAgICAgICAgICAgIHRyYW5zcGFyZW50PXt0cnVlfSBcbiAgICAgICAgICAgIGtleT17Q2lyY2xlTWF0ZXJpYWwua2V5fSAvLyBBZGQga2V5IGZvciBtYXRlcmlhbCBob3Rzd2FwcGluZyBpZiBuZWVkZWRcbiAgICAgICAgLz5cbiAgICAgIDwvaW5zdGFuY2VkTWVzaD5cblxuICAgICAgey8qIE1haW4gQ29ubmVjdG9yIFBsYW5lIChFeGlzdGluZykgKi99XG4gICAgICA8bWVzaFxuICAgICAgICBwb3NpdGlvbj17WzAsIDAsIDAuMV19IC8vIEtlZXAgdGhpcyBzbGlnaHRseSBpbiBmcm9udCBvZiBjaXJjbGVzXG4gICAgICAgIGtleT17YGNvbm5lY3Rvci1wbGFuZS0ke0dSSURfV0lEVEh9LSR7R1JJRF9IRUlHSFR9LSR7dmlzdWFsU2NhbGV9YH1cbiAgICAgICAgb25DbGljaz17aGFuZGxlQ29ubmVjdG9yQ2xpY2t9IFxuICAgICAgPlxuICAgICAgICA8cGxhbmVHZW9tZXRyeSBhcmdzPXtbcGxhbmVXaWR0aCwgcGxhbmVIZWlnaHRdfSAvPlxuICAgICAgICA8Y29ubmVjdG9yTWF0ZXJpYWwgXG4gICAgICAgICAgcmVmPXtjb25uZWN0b3JNYXRlcmlhbFJlZn1cbiAgICAgICAgICBrZXk9e0Nvbm5lY3Rvck1hdGVyaWFsLmtleX1cbiAgICAgICAgICB0cmFuc3BhcmVudD17dHJ1ZX0gXG4gICAgICAgICAgc2lkZT17VEhSRUUuRG91YmxlU2lkZX0gXG4gICAgICAgICAgLy8gUGFzcyByZXF1aXJlZCB1bmlmb3JtcyAoY21kSG9yaXogdGV4dHVyZSByZW1vdmVkKVxuICAgICAgICAgIHVfc3RhdGVUZXh0dXJlPXtzdGF0ZVRleHR1cmV9IFxuICAgICAgICAgIHVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlPXtpbnRlbmRlZENvbm5lY3RvclRleHR1cmV9XG4gICAgICAgICAgLy8gdV9jbWRIb3JpekNvbm5lY3RvclRleHR1cmUgcmVtb3ZlZFxuICAgICAgICAgIHVfZ3JpZERpbWVuc2lvbnM9e1tHUklEX1dJRFRILCBHUklEX0hFSUdIVF19XG4gICAgICAgICAgdV90ZXh0dXJlUmVzb2x1dGlvbj17W0dSSURfV0lEVEgsIEdSSURfSEVJR0hUXX0gXG4gICAgICAgICAgdV9yYWRpdXNBPXtCQVNFX1JBRElVU19BfVxuICAgICAgICAgIHVfcmFkaXVzQj17QkFTRV9SQURJVVNfQn1cbiAgICAgICAgICB1X2dyaWRTcGFjaW5nPXt2aXN1YWxTY2FsZX1cbiAgICAgICAgICB1X2NlbnRlck9mZnNldD17W2NlbnRlck9mZnNldC54LCBjZW50ZXJPZmZzZXQueV19XG4gICAgICAgICAgdV9wbGFuZVNpemU9e1twbGFuZVdpZHRoLCBwbGFuZUhlaWdodF19XG4gICAgICAgIC8+XG4gICAgICA8L21lc2g+XG5cbiAgICAgIHsvKiBOZXcgQ21kLUNsaWNrIEhvcml6b250YWwgQ29ubmVjdG9yIFBsYW5lICovfVxuICAgICAgPG1lc2hcbiAgICAgICAgcG9zaXRpb249e1swLCAwLCAwLjJdfSAvLyBQb3NpdGlvbiB0aGlzIHNsaWdodGx5IGluIGZyb250IG9mIHRoZSBtYWluIGNvbm5lY3RvcnNcbiAgICAgICAga2V5PXtgY21kLWhvcml6LWNvbm5lY3Rvci1wbGFuZS0ke0dSSURfV0lEVEh9LSR7R1JJRF9IRUlHSFR9LSR7dmlzdWFsU2NhbGV9YH1cbiAgICAgICAgLy8gTm8gY2xpY2sgaGFuZGxlciBuZWVkZWQgaGVyZSwgaW50ZXJhY3Rpb24gaXMgdmlhIGNpcmNsZXNcbiAgICAgID5cbiAgICAgICAgey8qIFVzZSB0aGUgc2FtZSBwbGFuZSBnZW9tZXRyeSBkaW1lbnNpb25zICovfVxuICAgICAgICA8cGxhbmVHZW9tZXRyeSBhcmdzPXtbcGxhbmVXaWR0aCwgcGxhbmVIZWlnaHRdfSAvPiBcbiAgICAgICAgPGNtZEhvcml6Q29ubmVjdG9yTWF0ZXJpYWxcbiAgICAgICAgICByZWY9e2NtZEhvcml6TWF0ZXJpYWxSZWZ9XG4gICAgICAgICAga2V5PXtDbWRIb3JpekNvbm5lY3Rvck1hdGVyaWFsLmtleX1cbiAgICAgICAgICB0cmFuc3BhcmVudD17dHJ1ZX1cbiAgICAgICAgICBzaWRlPXtUSFJFRS5Eb3VibGVTaWRlfVxuICAgICAgICAgIC8vIFBhc3MgbmVjZXNzYXJ5IHVuaWZvcm1zIGZvciB0aGlzIHNwZWNpZmljIG1hdGVyaWFsXG4gICAgICAgICAgdV9zdGF0ZVRleHR1cmU9e3N0YXRlVGV4dHVyZX0gICAgICAgICAgICAgICAgIC8vIE5lZWQgZm9yIGNoZWNraW5nIGFjdGl2ZSBjaXJjbGVzXG4gICAgICAgICAgdV9jbWRIb3JpekNvbm5lY3RvclRleHR1cmU9e2NtZEhvcml6Q29ubmVjdG9yVGV4dHVyZX0gLy8gVGhlIHRleHR1cmUgd2l0aCBjbWQtaG9yaXogc3RhdGVcbiAgICAgICAgICB1X2dyaWREaW1lbnNpb25zPXtbR1JJRF9XSURUSCwgR1JJRF9IRUlHSFRdfSAgLy8gR3JpZCBkaW1lbnNpb25zXG4gICAgICAgICAgdV90ZXh0dXJlUmVzb2x1dGlvbj17W0dSSURfV0lEVEgsIEdSSURfSEVJR0hUXX0gLy8gU3RhdGUgdGV4dHVyZSByZXNvbHV0aW9uXG4gICAgICAgICAgdV9yYWRpdXNBPXtCQVNFX1JBRElVU19BfSAgICAgICAgICAgICAgICAgICAgIC8vIEJhc2UgcmFkaWlcbiAgICAgICAgICB1X3JhZGl1c0I9e0JBU0VfUkFESVVTX0J9XG4gICAgICAgICAgdV9ncmlkU3BhY2luZz17dmlzdWFsU2NhbGV9ICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgdmlzdWFsIHNjYWxlXG4gICAgICAgICAgdV9maXhlZFNwYWNpbmc9e0ZJWEVEX1NQQUNJTkd9ICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIGJhc2UgZml4ZWQgc3BhY2luZ1xuICAgICAgICAgIHVfY2VudGVyT2Zmc2V0PXtbY2VudGVyT2Zmc2V0LngsIGNlbnRlck9mZnNldC55XX0gLy8gR3JpZCBvZmZzZXRcbiAgICAgICAgICB1X3BsYW5lU2l6ZT17W3BsYW5lV2lkdGgsIHBsYW5lSGVpZ2h0XX0gICAgICAgLy8gUGxhbmUgZGltZW5zaW9uc1xuICAgICAgICAvPlxuICAgICAgPC9tZXNoPlxuXG4gICAgPC9ncm91cD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyaWRTY2VuZTsgIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTWVtbyIsInVzZVJlZiIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJUSFJFRSIsInVzZUNvbnRyb2xzIiwidXNlRnJhbWUiLCJDaXJjbGVNYXRlcmlhbCIsIkNvbm5lY3Rvck1hdGVyaWFsIiwiQ21kSG9yaXpDb25uZWN0b3JNYXRlcmlhbCIsIlN0YXRzIiwiRklYRURfU1BBQ0lORyIsIkJBU0VfUkFESVVTX0EiLCJCQVNFX1JBRElVU19CIiwiQkFTRV9HUklEX1NQQUNJTkciLCJnZXRJbmRleCIsInJvdyIsImNvbCIsImdyaWRXaWR0aCIsImdldENvb3JkcyIsImluZGV4IiwiTWF0aCIsImZsb29yIiwiZ2V0Q2VudGVyT2Zmc2V0IiwiZ3JpZEhlaWdodCIsInNwYWNpbmciLCJ0b3RhbFdpZHRoIiwidG90YWxIZWlnaHQiLCJWZWN0b3IyIiwiZ2V0V29ybGRQb3NpdGlvbiIsImNlbnRlck9mZnNldCIsIngiLCJ5IiwiQ09OTkVDVE9SX05PTkUiLCJDT05ORUNUT1JfRElBR19UTF9CUiIsIkNPTk5FQ1RPUl9ESUFHX0JMX1RSIiwiQ09OTkVDVE9SX0hPUklaX1QiLCJDT05ORUNUT1JfSE9SSVpfQiIsIkNPTk5FQ1RPUl9IT1JJWl9DTUQiLCJkdW1teSIsIk9iamVjdDNEIiwidGVtcE1hdHJpeCIsIk1hdHJpeDQiLCJ0ZW1wVmVjIiwiVmVjdG9yMyIsImdldEhvcml6Q21kQ29ubmVjdG9yS2V5IiwiR3JpZFNjZW5lIiwiR1JJRF9XSURUSCIsIkdSSURfSEVJR0hUIiwidmlzdWFsU2NhbGUiLCJ2YWx1ZSIsIm1pbiIsIm1heCIsInN0ZXAiLCJsYWJlbCIsImluc3RhbmNlQ291bnQiLCJ2aXNpYmxlV2lkdGgiLCJjZWlsIiwid2luZG93IiwiaW5uZXJXaWR0aCIsInZpc2libGVIZWlnaHQiLCJpbm5lckhlaWdodCIsIlRPVEFMX0NJUkNMRVMiLCJwbGFuZVdpZHRoIiwicGxhbmVIZWlnaHQiLCJ0b3RhbCIsIm9mZnNldCIsIndpZHRoIiwiaGVpZ2h0IiwiY29uc29sZSIsImxvZyIsInRvRml4ZWQiLCJtZXNoUmVmIiwibWF0ZXJpYWxSZWYiLCJhY3RpdmF0aW9uQXR0cmlidXRlUmVmIiwiY29ubmVjdG9yTWF0ZXJpYWxSZWYiLCJhY3RpdmF0aW9uU3RhdGUiLCJzZXRBY3RpdmF0aW9uU3RhdGUiLCJGbG9hdDMyQXJyYXkiLCJmaWxsIiwiY21kSG9yaXpDb25uZWN0b3JzIiwic2V0Q21kSG9yaXpDb25uZWN0b3JzIiwiaW50ZW5kZWRDb25uZWN0b3JzIiwic2V0SW50ZW5kZWRDb25uZWN0b3JzIiwiZ2V0Q2VsbEdyb3VwS2V5IiwiY2VsbFgiLCJjZWxsWSIsImdldEludGVuZGVkQ29ubmVjdG9yIiwia2V5IiwiY3VycmVudCIsImFycmF5IiwibmVlZHNVcGRhdGUiLCJwb3NpdGlvbiIsInNldCIsImN1cnJlbnRNYXRyaXgiLCJnZXRNYXRyaXhBdCIsInF1YXRlcm5pb24iLCJRdWF0ZXJuaW9uIiwic2NhbGVWZWMiLCJkZWNvbXBvc2UiLCJtYXRyaXgiLCJjb21wb3NlIiwic2V0TWF0cml4QXQiLCJpbnN0YW5jZU1hdHJpeCIsInVuaWZvcm1zIiwidV9yYWRpdXNBIiwidV9yYWRpdXNCIiwic2NhbGUiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJoYW5kbGVDaXJjbGVDbGljayIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiaW5zdGFuY2VJZCIsInVuZGVmaW5lZCIsImlzQ21kQ2xpY2siLCJtZXRhS2V5IiwiY3RybEtleSIsInBvaW50IiwiY3VycmVudFN0YXRlIiwiaW5zdGFuY2VDZW50ZXIiLCJkaXN0RnJvbUNlbnRlciIsImRpc3RhbmNlVG8iLCJjdXJyZW50SW5uZXJSYWRpdXMiLCJpc0luc2lkZSIsInJpZ2h0SW5kZXgiLCJjYW5Db25uZWN0QmFzZSIsImNvbm5lY3RvckJlbG93IiwiY29ubmVjdG9yQWRqYWNlbnQiLCJpc0Jsb2NrZWRCeURpYWdvbmFsIiwibGVmdEFjdGl2ZSIsInJpZ2h0QWN0aXZlIiwiY29ubmVjdG9yS2V5IiwicHJldiIsIm5ld1ZhbHVlIiwibmV3U3RhdGUiLCJvbGRWYWx1ZSIsInN0YXRlVGV4dHVyZSIsInRleHR1cmUiLCJEYXRhVGV4dHVyZSIsIlJlZEZvcm1hdCIsIkZsb2F0VHlwZSIsIm1pbkZpbHRlciIsIk5lYXJlc3RGaWx0ZXIiLCJtYWdGaWx0ZXIiLCJsZW5ndGgiLCJpbWFnZSIsImRhdGEiLCJ3YXJuIiwiaGFuZGxlQ29ubmVjdG9yQ2xpY2siLCJjbGlja1BvaW50IiwiZ3JpZFgiLCJyb3VuZCIsImdyaWRZIiwiY2VsbENlbnRlciIsInNxcnQiLCJwb3ciLCJuZXdDb25uZWN0b3JzIiwiZ3JvdXBYIiwiZ3JvdXBZIiwiYmxJbmRleCIsImJySW5kZXgiLCJ0bEluZGV4IiwidHJJbmRleCIsImlzVmFsaWRHcm91cCIsImJsQWN0aXZlIiwiYnJBY3RpdmUiLCJ0bEFjdGl2ZSIsInRyQWN0aXZlIiwiYmxQb3MiLCJiclBvcyIsInRsUG9zIiwidHJQb3MiLCJjZW50ZXJYIiwiY2VudGVyWSIsImRpc3RUb0NlbnRlciIsImlzQ2VudGVyQ2xpY2siLCJjYW5Vc2VEaWFnVExCUiIsImNhblVzZURpYWdCTFRSIiwiaGFzRGlhZ29uYWxPcHRpb25zIiwiY3VycmVudENvbm5lY3RvciIsImdyb3VwS2V5IiwiaGFzSG9yaXpDbWRCZWxvdyIsImhhc0hvcml6Q21kQWJvdmUiLCJpc0Jsb2NrZWRCeUhvcml6IiwibmV3Q29ubmVjdG9yIiwicG90ZW50aWFsQ29ubmVjdG9yVHlwZSIsImNsaWNrZWRUeXBlIiwiZGlzdFRvQkxUUiIsImFicyIsImRpc3RUb1RMQlIiLCJuZXdJbnRlbmRlZENvbm5lY3RvcnMiLCJuZXdDbWRIb3JpekNvbm5lY3RvcnMiLCJoYXNDaGFuZ2VzIiwiaGFzQ21kSG9yaXpDaGFuZ2VzIiwiY29ubmVjdG9yIiwic3BsaXQiLCJtYXAiLCJOdW1iZXIiLCJpc1ZhbGlkIiwic3Vic3RyaW5nIiwibGVmdEluZGV4IiwiaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlIiwiY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlIiwiY29ubmVjdG9ycyIsInRleHR1cmVTaXplIiwiZGF0YVNpemUiLCJjbWRIb3Jpek1hdGVyaWFsUmVmIiwiZnJ1c3R1bUN1bGxlZCIsImdlb21ldHJ5IiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwiYm91bmRpbmdTcGhlcmUiLCJyYWRpdXMiLCJzdGF0c1JlZiIsInNob3dQYW5lbCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZG9tIiwicmVtb3ZlQ2hpbGQiLCJzdGF0ZSIsInVwZGF0ZSIsImdyb3VwIiwiaW5zdGFuY2VkTWVzaCIsInJlZiIsImFyZ3MiLCJvbkNsaWNrIiwicGxhbmVHZW9tZXRyeSIsImluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsImF0dGFjaCIsInVzYWdlIiwiRHluYW1pY0RyYXdVc2FnZSIsImNpcmNsZU1hdGVyaWFsIiwidHJhbnNwYXJlbnQiLCJtZXNoIiwiY29ubmVjdG9yTWF0ZXJpYWwiLCJzaWRlIiwiRG91YmxlU2lkZSIsInVfc3RhdGVUZXh0dXJlIiwidV9pbnRlbmRlZENvbm5lY3RvclRleHR1cmUiLCJ1X2dyaWREaW1lbnNpb25zIiwidV90ZXh0dXJlUmVzb2x1dGlvbiIsInVfZ3JpZFNwYWNpbmciLCJ1X2NlbnRlck9mZnNldCIsInVfcGxhbmVTaXplIiwiY21kSG9yaXpDb25uZWN0b3JNYXRlcmlhbCIsInVfY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlIiwidV9maXhlZFNwYWNpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/GridScene.tsx\n");

/***/ }),

/***/ "./components/constants.ts":
/*!*********************************!*\
  !*** ./components/constants.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE_RADIUS_A: () => (/* binding */ BASE_RADIUS_A),\n/* harmony export */   BASE_RADIUS_B: () => (/* binding */ BASE_RADIUS_B),\n/* harmony export */   FIXED_SPACING: () => (/* binding */ FIXED_SPACING)\n/* harmony export */ });\n// Base geometry values\nconst BASE_RADIUS_A = 0.5; // Outer radius\nconst BASE_RADIUS_B = 0.4; // Inner radius\n// Calculated fixed spacing based on desired overlap\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.5 + 0.4 = 0.9 \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbnN0YW50cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1QkFBdUI7QUFDaEIsTUFBTUEsZ0JBQWdCLElBQUksQ0FBQyxlQUFlO0FBQzFDLE1BQU1DLGdCQUFnQixJQUFJLENBQUMsZUFBZTtBQUVqRCxvREFBb0Q7QUFDN0MsTUFBTUMsZ0JBQWdCRixnQkFBZ0JDLGNBQWMsQ0FBQyxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9jb21wb25lbnRzL2NvbnN0YW50cy50cz83N2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2UgZ2VvbWV0cnkgdmFsdWVzXG5leHBvcnQgY29uc3QgQkFTRV9SQURJVVNfQSA9IDAuNTsgLy8gT3V0ZXIgcmFkaXVzXG5leHBvcnQgY29uc3QgQkFTRV9SQURJVVNfQiA9IDAuNDsgLy8gSW5uZXIgcmFkaXVzXG5cbi8vIENhbGN1bGF0ZWQgZml4ZWQgc3BhY2luZyBiYXNlZCBvbiBkZXNpcmVkIG92ZXJsYXBcbmV4cG9ydCBjb25zdCBGSVhFRF9TUEFDSU5HID0gQkFTRV9SQURJVVNfQSArIEJBU0VfUkFESVVTX0I7IC8vIDAuNSArIDAuNCA9IDAuOSAiXSwibmFtZXMiOlsiQkFTRV9SQURJVVNfQSIsIkJBU0VfUkFESVVTX0IiLCJGSVhFRF9TUEFDSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/constants.ts\n");

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leva */ \"leva\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leva__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _components_GridScene__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/GridScene */ \"./components/GridScene.tsx\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../styles/Home.module.css */ \"./styles/Home.module.css\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_components_GridScene__WEBPACK_IMPORTED_MODULE_5__]);\n_components_GridScene__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n // Adjust path if necessary\n // Assuming you have this for styling\nconst App = ()=>{\n    // Leva controls for camera zoom\n    const { cameraZoom } = (0,leva__WEBPACK_IMPORTED_MODULE_4__.useControls)({\n        cameraZoom: {\n            value: 50,\n            min: 10,\n            max: 200,\n            step: 1\n        }\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6___default().container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(leva__WEBPACK_IMPORTED_MODULE_4__.Leva, {\n                collapsed: true\n            }, void 0, false, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                lineNumber: 16,\n                columnNumber: 7\n            }, undefined),\n            \" \",\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.Canvas, {\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    width: \"100%\",\n                    height: \"100%\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera, {\n                        makeDefault: true,\n                        zoom: cameraZoom,\n                        position: [\n                            0,\n                            0,\n                            100\n                        ],\n                        near: 0.1,\n                        far: 1000\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 21,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ambientLight\", {\n                        intensity: 1.0\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, undefined),\n                    \" \",\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GridScene__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDa0I7QUFDVztBQUNkO0FBQ08sQ0FBQywyQkFBMkI7QUFDN0IsQ0FBQyxxQ0FBcUM7QUFFckYsTUFBTU8sTUFBTTtJQUNWLGdDQUFnQztJQUNoQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHSixpREFBV0EsQ0FBQztRQUNqQ0ksWUFBWTtZQUFFQyxPQUFPO1lBQUlDLEtBQUs7WUFBSUMsS0FBSztZQUFLQyxNQUFNO1FBQUU7SUFDdEQ7SUFFQSxxQkFDRSw4REFBQ0M7UUFBSUMsV0FBV1IsMEVBQWdCOzswQkFDOUIsOERBQUNILHNDQUFJQTtnQkFBQ2EsU0FBUzs7Ozs7O1lBQUc7MEJBQ2xCLDhEQUFDZixzREFBTUE7Z0JBQ0xnQixPQUFPO29CQUFFQyxVQUFVO29CQUFZQyxLQUFLO29CQUFHQyxNQUFNO29CQUFHQyxPQUFPO29CQUFRQyxRQUFRO2dCQUFPOztrQ0FHOUUsOERBQUNwQixpRUFBa0JBO3dCQUNqQnFCLFdBQVc7d0JBQ1hDLE1BQU1oQjt3QkFDTlUsVUFBVTs0QkFBQzs0QkFBRzs0QkFBRzt5QkFBSTt3QkFDckJPLE1BQU07d0JBQ05DLEtBQUs7Ozs7OztrQ0FFUCw4REFBQ0M7d0JBQWFDLFdBQVc7Ozs7OztvQkFBTztrQ0FHaEMsOERBQUN2Qiw2REFBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT2xCO0FBRUEsaUVBQWVFLEdBQUdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9wYWdlcy9pbmRleC5qcz9iZWU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDYW52YXMgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnQHJlYWN0LXRocmVlL2RyZWknO1xuaW1wb3J0IHsgTGV2YSwgdXNlQ29udHJvbHMgfSBmcm9tICdsZXZhJztcbmltcG9ydCBHcmlkU2NlbmUgZnJvbSAnLi4vY29tcG9uZW50cy9HcmlkU2NlbmUnOyAvLyBBZGp1c3QgcGF0aCBpZiBuZWNlc3NhcnlcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vc3R5bGVzL0hvbWUubW9kdWxlLmNzcyc7IC8vIEFzc3VtaW5nIHlvdSBoYXZlIHRoaXMgZm9yIHN0eWxpbmdcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICAvLyBMZXZhIGNvbnRyb2xzIGZvciBjYW1lcmEgem9vbVxuICBjb25zdCB7IGNhbWVyYVpvb20gfSA9IHVzZUNvbnRyb2xzKHtcbiAgICBjYW1lcmFab29tOiB7IHZhbHVlOiA1MCwgbWluOiAxMCwgbWF4OiAyMDAsIHN0ZXA6IDEgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8TGV2YSBjb2xsYXBzZWQgLz4gey8qIExldmEgcGFuZWwgZm9yIGNvbnRyb2xzICovfVxuICAgICAgPENhbnZhc1xuICAgICAgICBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9fVxuICAgICAgPlxuICAgICAgICB7LyogVXNlIE9ydGhvZ3JhcGhpY0NhbWVyYSBmb3IgMkQgdmlldyAqL31cbiAgICAgICAgPE9ydGhvZ3JhcGhpY0NhbWVyYVxuICAgICAgICAgIG1ha2VEZWZhdWx0IC8vIFNldHMgdGhpcyBjYW1lcmEgYXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICB6b29tPXtjYW1lcmFab29tfVxuICAgICAgICAgIHBvc2l0aW9uPXtbMCwgMCwgMTAwXX0gLy8gUG9zaXRpb25lZCB0byBsb29rIGFsb25nIC1aIGF4aXNcbiAgICAgICAgICBuZWFyPXswLjF9XG4gICAgICAgICAgZmFyPXsxMDAwfVxuICAgICAgICAvPlxuICAgICAgICA8YW1iaWVudExpZ2h0IGludGVuc2l0eT17MS4wfSAvPiB7LyogQmFzaWMgbGlnaHRpbmcgKi99XG4gICAgICAgIFxuICAgICAgICB7LyogUmVuZGVyIHRoZSBtYWluIHNjZW5lIGNvbXBvbmVudCAqL31cbiAgICAgICAgPEdyaWRTY2VuZSAvPiBcbiAgICAgICAgXG4gICAgICAgIHsvKiBPcHRpb25hbDogQWRkIE9yYml0Q29udHJvbHMgaWYgbmVlZGVkIGZvciBkZWJ1Z2dpbmcvbmF2aWdhdGlvbiAqL31cbiAgICAgICAgey8qIDxPcmJpdENvbnRyb2xzIGVuYWJsZVJvdGF0ZT17ZmFsc2V9IC8+ICovfVxuICAgICAgPC9DYW52YXM+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7ICJdLCJuYW1lcyI6WyJSZWFjdCIsIkNhbnZhcyIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIkxldmEiLCJ1c2VDb250cm9scyIsIkdyaWRTY2VuZSIsInN0eWxlcyIsIkFwcCIsImNhbWVyYVpvb20iLCJ2YWx1ZSIsIm1pbiIsIm1heCIsInN0ZXAiLCJkaXYiLCJjbGFzc05hbWUiLCJjb250YWluZXIiLCJjb2xsYXBzZWQiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwibWFrZURlZmF1bHQiLCJ6b29tIiwibmVhciIsImZhciIsImFtYmllbnRMaWdodCIsImludGVuc2l0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ }),

/***/ "@react-three/drei":
/*!************************************!*\
  !*** external "@react-three/drei" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@react-three/drei");

/***/ }),

/***/ "@react-three/fiber":
/*!*************************************!*\
  !*** external "@react-three/fiber" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@react-three/fiber");

/***/ }),

/***/ "leva":
/*!***********************!*\
  !*** external "leva" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("leva");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "three" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("three");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc","vendor-chunks/three"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();