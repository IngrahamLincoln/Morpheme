/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./styles/Home.module.css":
/*!********************************!*\
  !*** ./styles/Home.module.css ***!
  \********************************/
/***/ ((module) => {

eval("// Exports\nmodule.exports = {\n\t\"container\": \"Home_container__d256j\",\n\t\"main\": \"Home_main__VkIEL\",\n\t\"title\": \"Home_title__hYX6j\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmdsLWRvdC1ncmlkLW12cC8uL3N0eWxlcy9Ib21lLm1vZHVsZS5jc3M/YmMyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJjb250YWluZXJcIjogXCJIb21lX2NvbnRhaW5lcl9fZDI1NmpcIixcblx0XCJtYWluXCI6IFwiSG9tZV9tYWluX19Wa0lFTFwiLFxuXHRcInRpdGxlXCI6IFwiSG9tZV90aXRsZV9faFlYNmpcIlxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./styles/Home.module.css\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./node_modules/next/dist/pages/_app.js\");\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _pages_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/index.js */ \"./pages/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_index_js__WEBPACK_IMPORTED_MODULE_5__]);\n_pages_index_js__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/index\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: (private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default()),\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _pages_index_js__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZpbmRleC5qcyZhYnNvbHV0ZUFwcFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2FwcCZhYnNvbHV0ZURvY3VtZW50UGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZG9jdW1lbnQmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUNoQztBQUNMO0FBQzFEO0FBQ29EO0FBQ1Y7QUFDMUM7QUFDNkM7QUFDN0M7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDRDQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLHVCQUF1Qix3RUFBSyxDQUFDLDRDQUFRO0FBQ3JDLHVCQUF1Qix3RUFBSyxDQUFDLDRDQUFRO0FBQ3JDLDJCQUEyQix3RUFBSyxDQUFDLDRDQUFRO0FBQ3pDLGVBQWUsd0VBQUssQ0FBQyw0Q0FBUTtBQUM3Qix3QkFBd0Isd0VBQUssQ0FBQyw0Q0FBUTtBQUM3QztBQUNPLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLGlDQUFpQyx3RUFBSyxDQUFDLDRDQUFRO0FBQy9DLGdDQUFnQyx3RUFBSyxDQUFDLDRDQUFRO0FBQzlDLG9DQUFvQyx3RUFBSyxDQUFDLDRDQUFRO0FBQ3pEO0FBQ08sd0JBQXdCLHlHQUFnQjtBQUMvQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViZ2wtZG90LWdyaWQtbXZwLz8xNDNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgYXBwIGFuZCBkb2N1bWVudCBtb2R1bGVzLlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2RvY3VtZW50XCI7XG5pbXBvcnQgQXBwIGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2FwcFwiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvaW5kZXguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgY29tcG9uZW50IChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcImdldFN0YXRpY1Byb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1BhdGhzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U3RhdGljUGF0aHNcIik7XG5leHBvcnQgY29uc3QgZ2V0U2VydmVyU2lkZVByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U2VydmVyU2lkZVByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbmV4cG9ydCBjb25zdCByZXBvcnRXZWJWaXRhbHMgPSBob2lzdCh1c2VybGFuZCwgXCJyZXBvcnRXZWJWaXRhbHNcIik7XG4vLyBSZS1leHBvcnQgbGVnYWN5IG1ldGhvZHMuXG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTdGF0aWNQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhdGhzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1BhcmFtcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhcmFtc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wc1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTLFxuICAgICAgICBwYWdlOiBcIi9pbmRleFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBEb2N1bWVudFxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./components/CircleMaterial.tsx":
/*!***************************************!*\
  !*** ./components/CircleMaterial.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Simple vertex shader\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  attribute float a_activated; // Will be used in Feature 4\n  varying float v_activated;   // Will be used in Feature 4\n  void main() {\n    vUv = uv;\n    v_activated = a_activated; // Pass activation state\n    gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader to draw two concentric circles\nconst fragmentShader = /*glsl*/ `\n  uniform float u_radiusA;      // Outer radius (scaled relative to instance size)\n  uniform float u_radiusB;      // Inner radius (scaled relative to instance size)\n  uniform vec3 u_bgColor;       // Background color (or transparent)\n  uniform vec3 u_outerColor;    // Color of the outer ring\n  uniform vec3 u_innerColorEmpty; // Color of the inner circle when inactive\n  uniform vec3 u_innerColorActive;// Color of the inner circle when active\n\n  varying vec2 vUv;\n  varying float v_activated; // Read from vertex shader (comes from a_activated attribute)\n\n  void main() {\n    float dist = distance(vUv, vec2(0.5));\n\n    // Discard if outside the outer circle\n    if (dist > u_radiusA) {\n        discard;\n    }\n\n    // Check activation state first\n    if (v_activated == 1.0) {\n        // If activated, only draw the inner circle (black)\n        if (dist <= u_radiusB) {\n            gl_FragColor = vec4(u_innerColorActive, 1.0); // Solid black inner circle\n        } else {\n            discard; // Make outer ring transparent when activated\n        }\n    } else {\n        // Not activated - draw both inner and outer circles\n        if (dist > u_radiusB) {\n            // In the outer ring\n            gl_FragColor = vec4(u_outerColor, 1.0);\n        } else {\n            // In the inner circle - empty/inactive\n            gl_FragColor = vec4(u_innerColorEmpty, 1.0);\n        }\n    }\n  }\n`;\n// Create the shader material using drei/shaderMaterial\nconst CircleMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_radiusA: 0.5,\n    u_radiusB: 0.4,\n    u_bgColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#ffffff\"),\n    u_outerColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#cccccc\"),\n    u_innerColorEmpty: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#ffffff\"),\n    u_innerColorActive: new three__WEBPACK_IMPORTED_MODULE_0__.Color(\"#000000\")\n}, vertexShader, fragmentShader);\n// Extend R3F to recognize the material\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    CircleMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CircleMaterial);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0NpcmNsZU1hdGVyaWFsLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0I7QUFDb0I7QUFDUDtBQUU1Qyx1QkFBdUI7QUFDdkIsTUFBTUcsZUFBZSxNQUFNLEdBQUcsQ0FBQzs7Ozs7Ozs7O0FBUy9CLENBQUM7QUFFRCxpREFBaUQ7QUFDakQsTUFBTUMsaUJBQWlCLE1BQU0sR0FBRyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDakMsQ0FBQztBQUVELHVEQUF1RDtBQUN2RCxNQUFNQyxpQkFBaUJKLGlFQUFjQSxDQUNuQztJQUNFSyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVyxJQUFJUix3Q0FBVyxDQUFDO0lBQzNCVSxjQUFjLElBQUlWLHdDQUFXLENBQUM7SUFDOUJXLG1CQUFtQixJQUFJWCx3Q0FBVyxDQUFDO0lBQ25DWSxvQkFBb0IsSUFBSVosd0NBQVcsQ0FBQztBQUN0QyxHQUNBRyxjQUNBQztBQUdGLHVDQUF1QztBQUN2Q0YsMERBQU1BLENBQUM7SUFBRUc7QUFBZTtBQVd4QixpRUFBZUEsY0FBY0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmdsLWRvdC1ncmlkLW12cC8uL2NvbXBvbmVudHMvQ2lyY2xlTWF0ZXJpYWwudHN4PzQyNTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgc2hhZGVyTWF0ZXJpYWwgfSBmcm9tICdAcmVhY3QtdGhyZWUvZHJlaSc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuXG4vLyBTaW1wbGUgdmVydGV4IHNoYWRlclxuY29uc3QgdmVydGV4U2hhZGVyID0gLypnbHNsKi8gYFxuICB2YXJ5aW5nIHZlYzIgdlV2O1xuICBhdHRyaWJ1dGUgZmxvYXQgYV9hY3RpdmF0ZWQ7IC8vIFdpbGwgYmUgdXNlZCBpbiBGZWF0dXJlIDRcbiAgdmFyeWluZyBmbG9hdCB2X2FjdGl2YXRlZDsgICAvLyBXaWxsIGJlIHVzZWQgaW4gRmVhdHVyZSA0XG4gIHZvaWQgbWFpbigpIHtcbiAgICB2VXYgPSB1djtcbiAgICB2X2FjdGl2YXRlZCA9IGFfYWN0aXZhdGVkOyAvLyBQYXNzIGFjdGl2YXRpb24gc3RhdGVcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiBpbnN0YW5jZU1hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG4gIH1cbmA7XG5cbi8vIEZyYWdtZW50IHNoYWRlciB0byBkcmF3IHR3byBjb25jZW50cmljIGNpcmNsZXNcbmNvbnN0IGZyYWdtZW50U2hhZGVyID0gLypnbHNsKi8gYFxuICB1bmlmb3JtIGZsb2F0IHVfcmFkaXVzQTsgICAgICAvLyBPdXRlciByYWRpdXMgKHNjYWxlZCByZWxhdGl2ZSB0byBpbnN0YW5jZSBzaXplKVxuICB1bmlmb3JtIGZsb2F0IHVfcmFkaXVzQjsgICAgICAvLyBJbm5lciByYWRpdXMgKHNjYWxlZCByZWxhdGl2ZSB0byBpbnN0YW5jZSBzaXplKVxuICB1bmlmb3JtIHZlYzMgdV9iZ0NvbG9yOyAgICAgICAvLyBCYWNrZ3JvdW5kIGNvbG9yIChvciB0cmFuc3BhcmVudClcbiAgdW5pZm9ybSB2ZWMzIHVfb3V0ZXJDb2xvcjsgICAgLy8gQ29sb3Igb2YgdGhlIG91dGVyIHJpbmdcbiAgdW5pZm9ybSB2ZWMzIHVfaW5uZXJDb2xvckVtcHR5OyAvLyBDb2xvciBvZiB0aGUgaW5uZXIgY2lyY2xlIHdoZW4gaW5hY3RpdmVcbiAgdW5pZm9ybSB2ZWMzIHVfaW5uZXJDb2xvckFjdGl2ZTsvLyBDb2xvciBvZiB0aGUgaW5uZXIgY2lyY2xlIHdoZW4gYWN0aXZlXG5cbiAgdmFyeWluZyB2ZWMyIHZVdjtcbiAgdmFyeWluZyBmbG9hdCB2X2FjdGl2YXRlZDsgLy8gUmVhZCBmcm9tIHZlcnRleCBzaGFkZXIgKGNvbWVzIGZyb20gYV9hY3RpdmF0ZWQgYXR0cmlidXRlKVxuXG4gIHZvaWQgbWFpbigpIHtcbiAgICBmbG9hdCBkaXN0ID0gZGlzdGFuY2UodlV2LCB2ZWMyKDAuNSkpO1xuXG4gICAgLy8gRGlzY2FyZCBpZiBvdXRzaWRlIHRoZSBvdXRlciBjaXJjbGVcbiAgICBpZiAoZGlzdCA+IHVfcmFkaXVzQSkge1xuICAgICAgICBkaXNjYXJkO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGFjdGl2YXRpb24gc3RhdGUgZmlyc3RcbiAgICBpZiAodl9hY3RpdmF0ZWQgPT0gMS4wKSB7XG4gICAgICAgIC8vIElmIGFjdGl2YXRlZCwgb25seSBkcmF3IHRoZSBpbm5lciBjaXJjbGUgKGJsYWNrKVxuICAgICAgICBpZiAoZGlzdCA8PSB1X3JhZGl1c0IpIHtcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9pbm5lckNvbG9yQWN0aXZlLCAxLjApOyAvLyBTb2xpZCBibGFjayBpbm5lciBjaXJjbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc2NhcmQ7IC8vIE1ha2Ugb3V0ZXIgcmluZyB0cmFuc3BhcmVudCB3aGVuIGFjdGl2YXRlZFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm90IGFjdGl2YXRlZCAtIGRyYXcgYm90aCBpbm5lciBhbmQgb3V0ZXIgY2lyY2xlc1xuICAgICAgICBpZiAoZGlzdCA+IHVfcmFkaXVzQikge1xuICAgICAgICAgICAgLy8gSW4gdGhlIG91dGVyIHJpbmdcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9vdXRlckNvbG9yLCAxLjApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gdGhlIGlubmVyIGNpcmNsZSAtIGVtcHR5L2luYWN0aXZlXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfaW5uZXJDb2xvckVtcHR5LCAxLjApO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG4vLyBDcmVhdGUgdGhlIHNoYWRlciBtYXRlcmlhbCB1c2luZyBkcmVpL3NoYWRlck1hdGVyaWFsXG5jb25zdCBDaXJjbGVNYXRlcmlhbCA9IHNoYWRlck1hdGVyaWFsKFxuICB7XG4gICAgdV9yYWRpdXNBOiAwLjUsIC8vIERlZmF1bHQgdmFsdWUsIHdpbGwgYmUgdXBkYXRlZFxuICAgIHVfcmFkaXVzQjogMC40LCAvLyBEZWZhdWx0IHZhbHVlLCB3aWxsIGJlIHVwZGF0ZWRcbiAgICB1X2JnQ29sb3I6IG5ldyBUSFJFRS5Db2xvcignI2ZmZmZmZicpLCAvLyBEZWZhdWx0IGJnXG4gICAgdV9vdXRlckNvbG9yOiBuZXcgVEhSRUUuQ29sb3IoJyNjY2NjY2MnKSwgLy8gTGlnaHQgZ3JleSBvdXRlciByaW5nXG4gICAgdV9pbm5lckNvbG9yRW1wdHk6IG5ldyBUSFJFRS5Db2xvcignI2ZmZmZmZicpLCAvLyBXaGl0ZS90cmFuc3BhcmVudCBpbm5lciBlbXB0eVxuICAgIHVfaW5uZXJDb2xvckFjdGl2ZTogbmV3IFRIUkVFLkNvbG9yKCcjMDAwMDAwJyksIC8vIEJsYWNrIGlubmVyIGFjdGl2ZVxuICB9LFxuICB2ZXJ0ZXhTaGFkZXIsXG4gIGZyYWdtZW50U2hhZGVyXG4pO1xuXG4vLyBFeHRlbmQgUjNGIHRvIHJlY29nbml6ZSB0aGUgbWF0ZXJpYWxcbmV4dGVuZCh7IENpcmNsZU1hdGVyaWFsIH0pO1xuXG4vLyBEZWZpbmUgVHlwZVNjcmlwdCB0eXBlIGZvciBKU1ggdXNhZ2VcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIEpTWCB7XG4gICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgIGNpcmNsZU1hdGVyaWFsOiBhbnk7IC8vIFVzZSBcXCdhbnlcXCcgb3IgZGVmaW5lIG1vcmUgc3BlY2lmaWMgdHlwZXNcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlTWF0ZXJpYWw7ICJdLCJuYW1lcyI6WyJUSFJFRSIsInNoYWRlck1hdGVyaWFsIiwiZXh0ZW5kIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJDaXJjbGVNYXRlcmlhbCIsInVfcmFkaXVzQSIsInVfcmFkaXVzQiIsInVfYmdDb2xvciIsIkNvbG9yIiwidV9vdXRlckNvbG9yIiwidV9pbm5lckNvbG9yRW1wdHkiLCJ1X2lubmVyQ29sb3JBY3RpdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/CircleMaterial.tsx\n");

/***/ }),

/***/ "./components/CmdHorizConnectorMaterial.tsx":
/*!**************************************************!*\
  !*** ./components/CmdHorizConnectorMaterial.tsx ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Constants from GridScene/ConnectorMaterial needed for calculations\nconst BASE_RADIUS_A = 0.5; // Outer radius relative to spacing=1\nconst BASE_RADIUS_B = 0.4; // Inner radius relative to spacing=1\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.9\n// Vertex shader: Pass UVs (same as ConnectorMaterial)\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader: Only for Cmd-Click Horizontal Connectors\nconst fragmentShader = /*glsl*/ `\n  uniform sampler2D u_stateTexture;             // Need state to confirm circles are active\n  uniform sampler2D u_cmdHorizConnectorTexture; // Texture for cmd-click horizontal connectors\n  uniform vec2 u_gridDimensions;            // Grid size (width, height) in cells\n  uniform vec2 u_textureResolution;         // State Texture size (width, height) in pixels\n  uniform float u_radiusA;                  // Outer radius (base value)\n  uniform float u_radiusB;                  // Inner radius (base value)\n  uniform float u_gridSpacing;              // Visual scale factor (from Leva)\n  uniform float u_fixedSpacing;             // Base spacing between circle centers (e.g., 0.9)\n  // World space uniforms\n  uniform vec2 u_centerOffset;              // World offset for centering grid\n  uniform vec2 u_planeSize;                 // World size of connector plane\n\n  varying vec2 vUv;\n\n  // --- SDF Helper Functions ---\n  float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n  }\n\n  // SDF function for rectangle with sharp corners\n  float sdBox2D(vec2 p, vec2 halfSize) {\n    vec2 d = abs(p) - halfSize;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n  }\n\n  // --- State Sampling Helper ---\n  float getState(ivec2 cellCoord) {\n    // Use u_textureResolution (size of stateTexture) for clamping\n    ivec2 clampedCoord = clamp(cellCoord, ivec2(0), ivec2(u_textureResolution) - ivec2(1));\n    if (cellCoord != clampedCoord) return 0.0;\n    return texelFetch(u_stateTexture, clampedCoord, 0).r;\n  }\n\n  // --- Cmd-Click Horizontal Connector Sampling ---\n  float getCmdHorizConnector(ivec2 cellCoord) {\n    // The cmd-horiz texture is (gridWidth-1) x gridHeight\n    ivec2 horizTextureSize = ivec2(u_gridDimensions.x - 1.0, u_gridDimensions.y);\n     // Check bounds against the actual size of the cmdHorizConnectorTexture\n    if (cellCoord.x < 0 || cellCoord.x >= horizTextureSize.x ||\n        cellCoord.y < 0 || cellCoord.y >= horizTextureSize.y) {\n      return 0.0;\n    }\n    // Fetch from the dedicated texture\n    return texelFetch(u_cmdHorizConnectorTexture, cellCoord, 0).r;\n  }\n\n  // --- Get Cell Center in World Space ---\n  vec2 getCellWorldCenter(ivec2 cell) {\n    // Calculate scaled spacing\n    float scaledSpacing = u_fixedSpacing * u_gridSpacing;\n    float worldX = float(cell.x) * scaledSpacing + u_centerOffset.x;\n    float worldY = float(cell.y) * scaledSpacing + u_centerOffset.y;\n    return vec2(worldX, worldY);\n  }\n\n  // --- Function to calculate SDF for a given row ---\n  float calculateConnectorSDF(ivec2 baseCell, vec2 fragPos, float worldRadA, float worldRadB, float scaledSpacing) {\n    float sdf = 1e6; // Default to outside\n\n    float cmdConn = getCmdHorizConnector(baseCell);\n    if (cmdConn > 0.0) {\n        ivec2 rightCell = baseCell + ivec2(1, 0);\n        float stateL = getState(baseCell);\n        float stateR = getState(rightCell);\n\n        if (stateL == 1.0 && stateR == 1.0) {\n            vec2 centerL = getCellWorldCenter(baseCell); // Uses scaled spacing internally now\n            vec2 centerR = getCellWorldCenter(rightCell); // Uses scaled spacing internally now\n\n            vec2 connCenter = (centerL + centerR) * 0.5;\n\n            // Use scaled spacing for width calculation too\n            float connWidth = scaledSpacing; // Width is simply the distance between centers\n            // Use inner radius (RadiusB) for thinner connector matching circle thickness\n            // Add a small epsilon to ensure overlap between rows\n            float connHeight = worldRadB * 2.0 + 0.01 * u_gridSpacing; // Added small overlap based on scale\n\n            vec2 p = fragPos - connCenter;\n\n            sdf = sdBox2D(p, vec2(connWidth * 0.5, connHeight * 0.5));\n        }\n    }\n    return sdf;\n  }\n\n\n  void main() {\n    // Calculate fragment's world position\n    vec2 planeOrigin = -u_planeSize * 0.5;\n    vec2 fragWorldPos = planeOrigin + vUv * u_planeSize;\n\n    // Calculate scaled spacing consistently\n    float scaledSpacing = u_fixedSpacing * u_gridSpacing;\n\n    // Determine the potential bottom-left cell based on floor, using scaled spacing\n    // Add a small offset (0.5) before flooring to handle positions exactly on the boundary better? Maybe not needed yet.\n    vec2 gridCoord = (fragWorldPos - u_centerOffset) / scaledSpacing;\n    ivec2 cell_bl_current = ivec2(floor(gridCoord)); // Cell for the current row floor\n\n    // Define the cell for the row above\n    ivec2 cell_bl_above = cell_bl_current + ivec2(0, 1);\n\n    // Calculate world-space radii (these are already scaled by u_gridSpacing in GridScene and passed)\n    // Wait, radiusA/B are BASE values. Scale them here.\n    float worldRadiusA = u_radiusA * u_gridSpacing;\n    float worldRadiusB = u_radiusB * u_gridSpacing;\n\n    // Calculate SDF for the connector potentially in the current row\n    float sdf_current = calculateConnectorSDF(cell_bl_current, fragWorldPos, worldRadiusA, worldRadiusB, scaledSpacing);\n\n    // Calculate SDF for the connector potentially in the row above\n    float sdf_above = calculateConnectorSDF(cell_bl_above, fragWorldPos, worldRadiusA, worldRadiusB, scaledSpacing);\n\n    // The final SDF is the minimum of the two (closest connector wins)\n    float finalSdf = min(sdf_current, sdf_above);\n\n    // Final Output: Draw if inside the combined SDF\n    if (finalSdf < 0.0) {\n      float smoothFactor = fwidth(finalSdf) * 0.8; // Anti-aliasing\n      float alpha = smoothstep(smoothFactor, -smoothFactor, finalSdf);\n\n      if (alpha > 0.01) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, alpha); // Black connector\n      } else {\n        discard; // Discard transparent fragments\n      }\n    } else {\n      discard; // Discard fragments outside the shape\n    }\n  }\n`;\n// Create the shader material\nconst CmdHorizConnectorMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_stateTexture: null,\n    u_cmdHorizConnectorTexture: null,\n    u_gridDimensions: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_textureResolution: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_radiusA: BASE_RADIUS_A,\n    u_radiusB: BASE_RADIUS_B,\n    u_gridSpacing: 1.0,\n    u_fixedSpacing: FIXED_SPACING,\n    u_centerOffset: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0),\n    u_planeSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10)\n}, vertexShader, fragmentShader);\n// Extend R3F\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    CmdHorizConnectorMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CmdHorizConnectorMaterial);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/CmdHorizConnectorMaterial.tsx\n");

/***/ }),

/***/ "./components/ConnectorMaterial.tsx":
/*!******************************************!*\
  !*** ./components/ConnectorMaterial.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_0__]);\nthree__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Define constants matching GridScene for defaults\n// Moved to top to fix linter errors\nconst BASE_GRID_SPACING = 1.0;\nconst BASE_RADIUS_A = 0.5; // Outer radius relative to spacing=1\nconst BASE_RADIUS_B = 0.4; // Inner radius relative to spacing=1\n// Fixed spacing is BASE_RADIUS_A + BASE_RADIUS_B = 0.9\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B;\n// Define connector types as constants - must match GridScene.tsx\nconst CONNECTOR_NONE = 0;\nconst CONNECTOR_DIAG_TL_BR = 1; // Diagonal \\\nconst CONNECTOR_DIAG_BL_TR = 2; // Diagonal /\nconst CONNECTOR_HORIZ_CMD = 3; // New: Cmd-click horizontal connector\n// Vertex shader: Pass UVs\nconst vertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n// Fragment shader: Updated to use world space coordinates\nconst fragmentShader = /*glsl*/ `\n  uniform sampler2D u_stateTexture;\n  uniform sampler2D u_intendedConnectorTexture;\n  uniform vec2 u_gridDimensions;    // Grid size (width, height) in cells\n  uniform vec2 u_textureResolution; // Texture size (width, height) in pixels\n  uniform float u_radiusA;          // Outer radius (base value)\n  uniform float u_radiusB;          // Inner radius (base value)\n  uniform float u_gridSpacing;      // Visual scale factor\n  // World space uniforms\n  uniform vec2 u_centerOffset;      // World offset for centering grid\n  uniform vec2 u_planeSize;         // World size of connector plane\n\n  varying vec2 vUv;\n\n  // --- SDF Helper Functions ---\n  float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n  }\n\n  float sdBox(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n  }\n\n  float sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n  }\n\n  float sdCapsule(vec2 p, vec2 a, vec2 b, float r) {\n    return sdSegment(p, a, b) - r;\n  }\n\n  float opUnion(float d1, float d2) { return min(d1, d2); }\n  float opIntersection(float d1, float d2) { return max(d1, d2); }\n  float opSubtraction(float d1, float d2) { return max(d1, -d2); }\n\n  // --- State Sampling Helper ---\n  float getState(ivec2 cellCoord) {\n    ivec2 clampedCoord = clamp(cellCoord, ivec2(0), ivec2(u_textureResolution) - ivec2(1));\n    if (cellCoord != clampedCoord) return 0.0;\n    return texelFetch(u_stateTexture, clampedCoord, 0).r;\n  }\n\n  // --- Intended Connector Sampling ---\n  float getIntendedConnector(ivec2 cellCoord) {\n    ivec2 maxCoord = ivec2(u_textureResolution) - ivec2(1);\n    if (cellCoord.x < 0 || cellCoord.x >= maxCoord.x || \n        cellCoord.y < 0 || cellCoord.y >= maxCoord.y) {\n      return 0.0;\n    }\n    return texelFetch(u_intendedConnectorTexture, cellCoord, 0).r;\n  }\n\n  // --- Get Cell Center in World Space ---\n  vec2 getCellWorldCenter(ivec2 cell) {\n    float worldX = float(cell.x) * ${FIXED_SPACING} + u_centerOffset.x;\n    float worldY = float(cell.y) * ${FIXED_SPACING} + u_centerOffset.y;\n    return vec2(worldX, worldY);\n  }\n\n  void main() {\n    // Calculate fragment's world position\n    vec2 planeOrigin = -u_planeSize * 0.5; // Assuming plane is centered at (0,0)\n    vec2 fragWorldPos = planeOrigin + vUv * u_planeSize;\n    \n    // Determine which cell this fragment is in (find nearest cell)\n    vec2 gridCoord = (fragWorldPos - u_centerOffset) / ${FIXED_SPACING};\n    ivec2 cell_bl = ivec2(floor(gridCoord));\n    \n    // Define neighbor cells\n    ivec2 cell_br = cell_bl + ivec2(1, 0);\n    ivec2 cell_tl = cell_bl + ivec2(0, 1);\n    ivec2 cell_tr = cell_bl + ivec2(1, 1);\n\n    // Get states for all 4 cells around this fragment\n    float state_bl = getState(cell_bl);\n    float state_br = getState(cell_br);\n    float state_tl = getState(cell_tl);\n    float state_tr = getState(cell_tr);\n\n    // Get intended connector for this cell group\n    float intendedConnector = getIntendedConnector(cell_bl);\n\n    // Get cell centers in world space\n    vec2 center_bl = getCellWorldCenter(cell_bl);\n    vec2 center_br = getCellWorldCenter(cell_br);\n    vec2 center_tl = getCellWorldCenter(cell_tl);\n    vec2 center_tr = getCellWorldCenter(cell_tr);\n\n    // Calculate bounding box in world space\n    vec2 bboxCenter = (center_bl + center_br + center_tl + center_tr) * 0.25;\n    vec2 bboxHalfSize = vec2(${FIXED_SPACING} * 0.5);\n\n    // Calculate world-space radii\n    float worldRadiusA = u_radiusA * u_gridSpacing;\n    float worldRadiusB = u_radiusB * u_gridSpacing;\n\n    float finalSdf = 1e6;\n\n    // --- Diagonal \\\\ (TL to BR) Connector ---\n    if (state_tl == 1.0 && state_br == 1.0 && intendedConnector == 1.0) {\n      // Create connector path\n      float sdf_capsule_tl_br = sdCapsule(fragWorldPos, center_tl, center_br, worldRadiusB);\n      \n      // Must be outside the outer circles of TR and BL\n      float sdf_outside_tr_outer = sdCircle(fragWorldPos - center_tr, worldRadiusA);\n      float sdf_outside_bl_outer = sdCircle(fragWorldPos - center_bl, worldRadiusA);\n      \n      // Combine all constraints\n      float sdf_diag1 = sdf_capsule_tl_br;\n      sdf_diag1 = max(sdf_diag1, -sdf_outside_tr_outer);\n      sdf_diag1 = max(sdf_diag1, -sdf_outside_bl_outer);\n\n      finalSdf = min(finalSdf, sdf_diag1);\n    }\n\n    // --- Diagonal / (BL to TR) Connector ---\n    if (state_bl == 1.0 && state_tr == 1.0 && intendedConnector == 2.0) {\n      // Create connector path\n      float sdf_capsule_bl_tr = sdCapsule(fragWorldPos, center_bl, center_tr, worldRadiusB);\n      \n      // Must be outside the outer circles of TL and BR\n      float sdf_outside_tl_outer = sdCircle(fragWorldPos - center_tl, worldRadiusA);\n      float sdf_outside_br_outer = sdCircle(fragWorldPos - center_br, worldRadiusA);\n      \n      // Combine all constraints\n      float sdf_diag2 = sdf_capsule_bl_tr;\n      sdf_diag2 = max(sdf_diag2, -sdf_outside_tl_outer);\n      sdf_diag2 = max(sdf_diag2, -sdf_outside_br_outer);\n\n      finalSdf = min(finalSdf, sdf_diag2);\n    }\n\n    // --- Horizontal (BL to BR) Connector ---\n    if (state_bl == 1.0 && state_br == 1.0 && intendedConnector == 4.0) {\n      float sdf_h_bottom = sdCapsule(fragWorldPos, center_bl, center_br, worldRadiusB);\n      finalSdf = min(finalSdf, sdf_h_bottom);\n    }\n\n    // --- Horizontal (TL to TR) Connector ---\n    if (state_tl == 1.0 && state_tr == 1.0 && intendedConnector == 3.0) {\n      float sdf_h_top = sdCapsule(fragWorldPos, center_tl, center_tr, worldRadiusB);\n      finalSdf = min(finalSdf, sdf_h_top);\n    }\n\n    // --- Final Output with Anti-aliasing ---\n    if (finalSdf < 0.0) {\n      float smoothFactor = fwidth(finalSdf) * 0.8;\n      float alpha = smoothstep(smoothFactor, -smoothFactor, finalSdf);\n      \n      if (alpha > 0.01) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\n      } else {\n        discard;\n      }\n    } else {\n      discard;\n    }\n  }\n`;\n// Create the shader material\nconst ConnectorMaterial = (0,_react_three_drei__WEBPACK_IMPORTED_MODULE_1__.shaderMaterial)({\n    u_stateTexture: null,\n    u_intendedConnectorTexture: null,\n    u_gridDimensions: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_textureResolution: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10),\n    u_radiusA: BASE_RADIUS_A,\n    u_radiusB: BASE_RADIUS_B,\n    u_gridSpacing: BASE_GRID_SPACING,\n    // World space uniforms\n    u_centerOffset: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0),\n    u_planeSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(10, 10)\n}, vertexShader, fragmentShader);\n// Extend R3F\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend)({\n    ConnectorMaterial\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConnectorMaterial); // Define constants matching GridScene for defaults (optional, but helps IDE)\n // Moved to top - Removing these commented out versions\n // const BASE_GRID_SPACING = 1.0;\n // const BASE_RADIUS_A = 0.5;\n // const BASE_RADIUS_B = 0.4; \n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/ConnectorMaterial.tsx\n");

/***/ }),

/***/ "./components/GridScene.tsx":
/*!**********************************!*\
  !*** ./components/GridScene.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leva */ \"leva\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leva__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CircleMaterial */ \"./components/CircleMaterial.tsx\");\n/* harmony import */ var _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectorMaterial */ \"./components/ConnectorMaterial.tsx\");\n/* harmony import */ var _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CmdHorizConnectorMaterial */ \"./components/CmdHorizConnectorMaterial.tsx\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants */ \"./components/constants.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_2__, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__]);\n([three__WEBPACK_IMPORTED_MODULE_2__, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n// Stats import commented out - not critical for functionality\n// import Stats from 'three/addons/libs/stats.module';\n\n// === Feature 1: Grid Data & Configuration ===\n// Constants for base geometry - REMOVED, now imported\n// const BASE_RADIUS_A = 0.5; // Outer radius\n// const BASE_RADIUS_B = 0.4; // Inner radius\n// const FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.9\nconst BASE_GRID_SPACING = 1.0; // Keep for reference if needed\n// Helper Functions\nconst getIndex = (row, col, gridWidth)=>{\n    return row * gridWidth + col;\n};\nconst getCoords = (index, gridWidth)=>{\n    const row = Math.floor(index / gridWidth);\n    const col = index % gridWidth;\n    return {\n        row,\n        col\n    };\n};\n// Modified to use fixed spacing\nconst getCenterOffset = (gridWidth, gridHeight, spacing)=>{\n    const totalWidth = (gridWidth - 1) * spacing;\n    const totalHeight = (gridHeight - 1) * spacing;\n    return new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(-totalWidth / 2, -totalHeight / 2);\n};\n// Modified to use fixed spacing\nconst getWorldPosition = (row, col, gridWidth, gridHeight, spacing, centerOffset)=>{\n    const x = col * spacing + centerOffset.x;\n    const y = row * spacing + centerOffset.y;\n    return {\n        x,\n        y\n    };\n};\n// === GridScene Component ===\n// Dummy object for matrix calculations\nconst dummy = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\nconst tempMatrix = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst tempVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n// New: Helper for horizontal cmd-click connector key generation\nconst getHorizCmdConnectorKey = (x, y)=>`hcmd:${x},${y}`;\n// Helper to get the key for a 2x2 cell group\nconst getCellGroupKey = (cellX, cellY)=>`${cellX},${cellY}`;\n// --- End Adjacency List Structure ---\nconst GridScene = ()=>{\n    // Get the set function directly from useControls\n    const [controls, setLevaControl] = (0,leva__WEBPACK_IMPORTED_MODULE_3__.useControls)(\"Grid\", ()=>({\n            GRID_WIDTH: {\n                value: 10,\n                min: 2,\n                max: 100,\n                step: 1\n            },\n            GRID_HEIGHT: {\n                value: 10,\n                min: 2,\n                max: 100,\n                step: 1\n            },\n            visualScale: {\n                value: 1.0,\n                min: 0.1,\n                max: 5,\n                step: 0.1,\n                label: \"Visual Scale\"\n            },\n            // Use button functions that don't reference the component functions directly\n            \"Save/Load\": (0,leva__WEBPACK_IMPORTED_MODULE_3__.folder)({\n                saveState: (0,leva__WEBPACK_IMPORTED_MODULE_3__.button)(()=>{\n                    console.log(\"Save button clicked\");\n                    // Get the current activation state directly from the buffer attribute\n                    let currentActivation;\n                    if (activationAttributeRef.current && activationAttributeRef.current.array) {\n                        currentActivation = activationAttributeRef.current.array;\n                        console.log(\"- Using activation state from buffer attribute\");\n                    } else {\n                        currentActivation = activationState;\n                        console.log(\"- Using activation state from React state (fallback)\");\n                    }\n                    // Use the ref values which should have the most up-to-date state\n                    const currentIntendedConnectors = JSON.parse(JSON.stringify(intendedConnectorsRef.current || {}));\n                    const currentCmdHorizConnectors = JSON.parse(JSON.stringify(cmdHorizConnectorsRef.current || {}));\n                    // Debug current state before save\n                    console.log(\"Current intended connectors from button handler:\", currentIntendedConnectors);\n                    console.log(\"Keys in intended connectors:\", Object.keys(currentIntendedConnectors));\n                    console.log(\"Active intended connectors:\", Object.entries(currentIntendedConnectors).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE));\n                    console.log(\"Current cmd horiz connectors from button handler:\", currentCmdHorizConnectors);\n                    console.log(\"Active cmd horiz connectors:\", Object.entries(currentCmdHorizConnectors).filter(([_, v])=>v === 1));\n                    // Save the state using direct values\n                    saveGridStateWithDirectValues(currentActivation, currentIntendedConnectors, currentCmdHorizConnectors);\n                }),\n                loadState: (0,leva__WEBPACK_IMPORTED_MODULE_3__.button)(()=>{\n                    console.log(\"Load requested\");\n                    const jsonInput = prompt(\"Paste Grid State JSON:\");\n                    if (!jsonInput) {\n                        console.log(\"Load cancelled.\");\n                        return;\n                    }\n                    try {\n                        const data = JSON.parse(jsonInput);\n                        console.log(\"Parsed JSON data:\", data);\n                        // Instead of calling the loadGridState function, process the data directly\n                        // Validate basic structure\n                        if (typeof data.gridWidth !== \"number\" || typeof data.gridHeight !== \"number\" || !Array.isArray(data.nodes) || !Array.isArray(data.edges)) {\n                            throw new Error(\"Invalid JSON structure.\");\n                        }\n                        console.log(\"Grid dimensions to be set:\", data.gridWidth, \"x\", data.gridHeight);\n                        console.log(\"Nodes to load:\", data.nodes.length);\n                        console.log(\"Edges to load:\", data.edges.length);\n                        // --- Use the captured setLevaControl function ---\n                        setLevaControl({\n                            GRID_WIDTH: data.gridWidth,\n                            GRID_HEIGHT: data.gridHeight\n                        });\n                        // --- Process Nodes and Edges ---\n                        setTimeout(()=>{\n                            // Use data.gridWidth/Height here as controls might not have updated yet\n                            const newTotalCircles = data.gridWidth * data.gridHeight;\n                            const newActivationState = new Float32Array(newTotalCircles).fill(0.0);\n                            console.log(\"Setting active nodes...\");\n                            data.nodes.forEach((node)=>{\n                                if (node.x >= 0 && node.x < data.gridWidth && node.y >= 0 && node.y < data.gridHeight) {\n                                    const index = getIndex(node.y, node.x, data.gridWidth);\n                                    newActivationState[index] = 1.0;\n                                    console.log(`Activating node at (${node.x}, ${node.y}), index: ${index}`);\n                                } else {\n                                    console.warn(`Node out of bounds ignored: (${node.x}, ${node.y})`);\n                                }\n                            });\n                            const newIntendedConnectors = {};\n                            const newCmdHorizConnectors = {};\n                            console.log(\"Processing edges...\");\n                            data.edges.forEach((edge)=>{\n                                console.log(\"Processing edge:\", edge);\n                                let connectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n                                let isValid = false;\n                                switch(edge.type){\n                                    case \"diag_tl_br\":\n                                        connectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR;\n                                        isValid = edge.x >= 0 && edge.x < data.gridWidth - 1 && edge.y >= 0 && edge.y < data.gridHeight - 1;\n                                        break;\n                                    case \"diag_bl_tr\":\n                                        connectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n                                        isValid = edge.x >= 0 && edge.x < data.gridWidth - 1 && edge.y >= 0 && edge.y < data.gridHeight - 1;\n                                        break;\n                                    case \"horiz_t\":\n                                        connectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_T;\n                                        isValid = edge.x >= 0 && edge.x < data.gridWidth - 1 && edge.y >= 0 && edge.y < data.gridHeight - 1;\n                                        break;\n                                    case \"horiz_b\":\n                                        connectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_B;\n                                        isValid = edge.x >= 0 && edge.x < data.gridWidth - 1 && edge.y >= 0 && edge.y < data.gridHeight - 1;\n                                        break;\n                                    case \"cmd_horiz\":\n                                        // This type updates a different state object\n                                        isValid = edge.x >= 0 && edge.x < data.gridWidth - 1 && edge.y >= 0 && edge.y < data.gridHeight;\n                                        if (isValid) {\n                                            const key = getHorizCmdConnectorKey(edge.x, edge.y);\n                                            newCmdHorizConnectors[key] = 1;\n                                            console.log(`Added cmd_horiz connector at (${edge.x}, ${edge.y}) with key ${key}`);\n                                        }\n                                        break;\n                                    default:\n                                        console.warn(`Unknown edge type ignored: ${edge.type}`);\n                                }\n                                // Assign to intendedConnectors *after* the switch, if valid and applicable\n                                if (isValid && edge.type !== \"cmd_horiz\" && connectorType !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) {\n                                    const key = getCellGroupKey(edge.x, edge.y);\n                                    newIntendedConnectors[key] = connectorType;\n                                    console.log(`Added ${edge.type} connector at (${edge.x}, ${edge.y}) with key ${key} and type value ${connectorType}`);\n                                }\n                                if (!isValid) {\n                                    console.warn(`Edge out of bounds or invalid ignored:`, edge);\n                                }\n                            });\n                            console.log(\"Setting activation state with\", Object.values(newActivationState).filter((v)=>v === 1.0).length, \"active nodes\");\n                            setActivationState(newActivationState);\n                            console.log(\"Setting intended connectors:\", Object.keys(newIntendedConnectors).length, \"connectors\");\n                            setIntendedConnectors(newIntendedConnectors);\n                            // Update the ref as well\n                            intendedConnectorsRef.current = {\n                                ...newIntendedConnectors\n                            };\n                            console.log(\"Setting cmd-horiz connectors:\", Object.keys(newCmdHorizConnectors).length, \"connectors\");\n                            setCmdHorizConnectors(newCmdHorizConnectors);\n                            // Update the ref as well\n                            cmdHorizConnectorsRef.current = {\n                                ...newCmdHorizConnectors\n                            };\n                            console.log(\"Grid state loaded successfully.\");\n                            // Verify the loaded state after a short delay\n                            setTimeout(()=>{\n                                console.log(\"Verification of loaded state:\");\n                                console.log(\"- Active nodes:\", Object.values(activationState).filter((v)=>v === 1.0).length);\n                                console.log(\"- Intended connectors:\", Object.entries(intendedConnectors).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE).length);\n                                console.log(\"- Cmd-horiz connectors:\", Object.entries(cmdHorizConnectors).filter(([_, v])=>v === 1).length);\n                            }, 200);\n                        }, 100);\n                    } catch (error) {\n                        console.error(\"Failed to parse or process JSON:\", error);\n                        alert(`Error: ${error instanceof Error ? error.message : String(error)}`);\n                    }\n                })\n            })\n        }), {\n    });\n    // Derived values calculation - use 'controls' now\n    const { TOTAL_CIRCLES, centerOffset, planeWidth, planeHeight } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const total = controls.GRID_WIDTH * controls.GRID_HEIGHT;\n        const offset = getCenterOffset(controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        const width = (controls.GRID_WIDTH > 1 ? (controls.GRID_WIDTH - 1) * _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING : 0) + controls.visualScale * _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A * 2;\n        const height = (controls.GRID_HEIGHT > 1 ? (controls.GRID_HEIGHT - 1) * _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING : 0) + controls.visualScale * _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A * 2;\n        return {\n            TOTAL_CIRCLES: total,\n            centerOffset: offset,\n            planeWidth: width,\n            planeHeight: height\n        };\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        controls.visualScale\n    ]); // Update dependencies\n    // Refs for mesh and material\n    const meshRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const materialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Use 'any' or specific type for CircleMaterial\n    const activationAttributeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const connectorMaterialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Ref for connector material\n    const cmdHorizMaterialRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Refs to track current state\n    const intendedConnectorsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const cmdHorizConnectorsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    // === Feature 3: Circle Activation State ===\n    const [activationState, setActivationState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>new Float32Array(TOTAL_CIRCLES).fill(0.0) // 0.0 inactive, 1.0 active\n    );\n    // New: Add horizontal cmd-click connector state\n    const [cmdHorizConnectors, setCmdHorizConnectors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // === Feature 8: Connector Interaction State and Helpers (Moved UP) ===\n    const [intendedConnectors, setIntendedConnectors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // Helper to get the intended connector for a 2x2 cell group (Moved UP)\n    const getIntendedConnector = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((cellX, cellY)=>{\n        if (cellX < 0 || cellX >= controls.GRID_WIDTH - 1 || cellY < 0 || cellY >= controls.GRID_HEIGHT - 1) {\n            return _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n        }\n        const key = getCellGroupKey(cellX, cellY);\n        return intendedConnectors[key] || _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n    }, [\n        intendedConnectors,\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT\n    ]);\n    // State needs to be reset if TOTAL_CIRCLES changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Resetting activation state due to grid size change\");\n        setActivationState(new Float32Array(TOTAL_CIRCLES).fill(0.0));\n        setIntendedConnectors({}); // Also reset intended connectors\n        setCmdHorizConnectors({}); // Also reset cmd-horiz connectors\n        // Also reset the refs\n        intendedConnectorsRef.current = {};\n        cmdHorizConnectorsRef.current = {};\n    }, [\n        TOTAL_CIRCLES\n    ]);\n    // Update buffer attribute when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (activationAttributeRef.current) {\n            activationAttributeRef.current.array = activationState;\n            activationAttributeRef.current.needsUpdate = true;\n        // console.log('Updated activation buffer attribute.'); // Less noisy log\n        }\n    }, [\n        activationState\n    ]);\n    // === Feature 2: Static Circle Rendering ===\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        // Calculate and set instance matrices\n        for(let index = 0; index < TOTAL_CIRCLES; index++){\n            const { row, col } = getCoords(index, controls.GRID_WIDTH);\n            const { x, y } = getWorldPosition(row, col, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n            dummy.position.set(x, y, 0); // Z=0 for circles\n            // Retrieve existing scale/rotation before setting position to avoid overwriting scale effect\n            const currentMatrix = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\n            meshRef.current.getMatrixAt(index, currentMatrix);\n            const position = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            const quaternion = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n            const scaleVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            currentMatrix.decompose(position, quaternion, scaleVec);\n            // Update only position\n            position.set(x, y, 0);\n            dummy.matrix.compose(position, quaternion, scaleVec); // Recompose with original scale/rotation\n            meshRef.current.setMatrixAt(index, dummy.matrix);\n        }\n        meshRef.current.instanceMatrix.needsUpdate = true;\n    // console.log(`Updated ${TOTAL_CIRCLES} instance matrices (position).`);\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n        TOTAL_CIRCLES,\n        centerOffset\n    ]);\n    // Update shader uniforms when scaled radii change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (materialRef.current) {\n            // Shader expects radii relative to plane size (0.0 to 0.5 range if plane is size 1)\n            // Let's use plane size 1 and scale radii to 0.0-0.5 range for shader.\n            materialRef.current.uniforms.u_radiusA.value = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A; // Use base radius relative to plane size 1\n            materialRef.current.uniforms.u_radiusB.value = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B; // Use base radius relative to plane size 1\n            // Scale the whole instance instead to match spacing\n            console.log(`Updated material radii uniforms: A=${_constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A}, B=${_constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B}`);\n        }\n    }, []); // Depend on scaled radii, though using base for uniform now\n    // Adjust instance scale based on spacing\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        const scale = controls.visualScale; // Use the leva control value for scale\n        console.log(`Updating instance scales to: ${scale.toFixed(2)}`);\n        for(let index = 0; index < TOTAL_CIRCLES; index++){\n            meshRef.current.getMatrixAt(index, tempMatrix);\n            const position = tempVec.setFromMatrixPosition(tempMatrix);\n            const quaternion = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion().setFromRotationMatrix(tempMatrix);\n            // Update only scale\n            const scaleVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().set(scale, scale, 1);\n            tempMatrix.compose(position, quaternion, scaleVec);\n            meshRef.current.setMatrixAt(index, tempMatrix);\n        }\n        meshRef.current.instanceMatrix.needsUpdate = true;\n    }, [\n        controls.visualScale,\n        TOTAL_CIRCLES\n    ]); // Depends on scale control and count\n    // === Feature 4: Circle Interaction (Now uses helpers defined above) ===\n    const handleCircleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        event.stopPropagation();\n        if (event.instanceId === undefined || !meshRef.current) return;\n        const index = event.instanceId;\n        const { row: y, col: x } = getCoords(index, controls.GRID_WIDTH);\n        console.log(\"Circle clicked:\", {\n            index,\n            x,\n            y,\n            isCmdClick: event.metaKey || event.ctrlKey,\n            point: event.point,\n            currentState: activationState[index]\n        });\n        // Get the center of the clicked instance\n        meshRef.current.getMatrixAt(index, tempMatrix);\n        const instanceCenter = tempVec.setFromMatrixPosition(tempMatrix);\n        // Calculate distance from click point to instance center\n        const distFromCenter = event.point.distanceTo(instanceCenter);\n        // Get the CURRENT world-space inner radius\n        const currentInnerRadius = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B * controls.visualScale;\n        console.log(\"Click details:\", {\n            distFromCenter,\n            currentInnerRadius,\n            isInside: distFromCenter <= currentInnerRadius\n        });\n        // Check if click is inside the inner circle\n        if (distFromCenter <= currentInnerRadius) {\n            // Check if this is a cmd/ctrl click\n            if (event.metaKey || event.ctrlKey) {\n                // Check conditions for horizontal connector\n                const rightIndex = getIndex(y, x + 1, controls.GRID_WIDTH);\n                const canConnectBase = x < controls.GRID_WIDTH - 1 && activationState[index] === 1.0 && activationState[rightIndex] === 1.0;\n                // --- NEW: Check for blocking diagonal connectors ---\n                const connectorBelow = getIntendedConnector(x, y - 1);\n                const connectorAdjacent = getIntendedConnector(x, y);\n                const isBlockedByDiagonal = connectorBelow === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR || connectorBelow === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR || connectorAdjacent === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR || connectorAdjacent === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n                // --- End NEW check ---\n                console.log(\"Processing cmd-click on circle:\", {\n                    x,\n                    y,\n                    rightIndex,\n                    leftActive: activationState[index] === 1.0,\n                    rightActive: x < controls.GRID_WIDTH - 1 ? activationState[rightIndex] === 1.0 : false,\n                    canConnectBase,\n                    isBlockedByDiagonal,\n                    connectorBelow,\n                    connectorAdjacent\n                });\n                // Only allow toggle if base conditions met AND not blocked by diagonal\n                if (canConnectBase && !isBlockedByDiagonal) {\n                    const connectorKey = getHorizCmdConnectorKey(x, y);\n                    console.log(\"Toggling horizontal connector (allowed):\", {\n                        key: connectorKey\n                    });\n                    setCmdHorizConnectors((prev)=>{\n                        const newValue = prev[connectorKey] ? 0 : 1;\n                        const newState = {\n                            ...prev,\n                            [connectorKey]: newValue\n                        };\n                        // Update the ref to track the latest state\n                        cmdHorizConnectorsRef.current = newState;\n                        console.log(\"Updated cmd-horiz connector state:\", {\n                            key: connectorKey,\n                            newValue,\n                            allConnectors: newState,\n                            keys: Object.keys(newState),\n                            activeConnectors: Object.entries(newState).filter(([_, v])=>v === 1)\n                        });\n                        return newState;\n                    });\n                    return; // Exit after handling cmd-click\n                } else {\n                    console.log(\"Cmd-click horizontal connector blocked or base conditions not met.\");\n                }\n                // If blocked or can't connect, fall through to regular click? \n                // Or maybe do nothing on cmd-click if blocked? Let's do nothing for now.\n                return; // Explicitly do nothing more if cmd-click was blocked or invalid\n            }\n            // Regular click behavior (toggle activation) - only runs if not a handled cmd-click\n            console.log(\"Toggling circle activation (regular click)\");\n            setActivationState((current)=>{\n                const newState = new Float32Array(current);\n                newState[index] = newState[index] === 1.0 ? 0.0 : 1.0;\n                console.log(\"New activation state for circle:\", {\n                    index,\n                    oldValue: current[index],\n                    newValue: newState[index]\n                });\n                return newState;\n            });\n        }\n    }, [\n        meshRef,\n        setActivationState,\n        controls.GRID_WIDTH,\n        controls.visualScale,\n        setCmdHorizConnectors,\n        cmdHorizConnectors,\n        intendedConnectors,\n        controls.GRID_HEIGHT\n    ]); // Dependencies are correct now\n    // === Feature 5: State Data Texture ===\n    const stateTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating state texture: ${controls.GRID_WIDTH}x${controls.GRID_HEIGHT}`);\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(TOTAL_CIRCLES).fill(0.0), controls.GRID_WIDTH, controls.GRID_HEIGHT, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter; // Crucial: No interpolation\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true; // Initial update needed\n        return texture;\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        TOTAL_CIRCLES\n    ]); // Recreate texture if grid dimensions change\n    // Update texture data when activationState changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (stateTexture && activationState.length === stateTexture.image.data.length) {\n            stateTexture.image.data.set(activationState); // Update texture data directly\n            stateTexture.needsUpdate = true; // Mark for GPU upload\n            console.log(\"Updated state texture data.\");\n        } else {\n            console.warn(\"Skipping texture update: Mismatch between state array and texture size or texture not ready.\");\n        }\n    }, [\n        activationState,\n        stateTexture\n    ]); // Depend on activation state and the texture itself\n    // === Feature 8: Connector Plane Interaction (Moved DOWN, uses helpers defined above) ===\n    const handleConnectorClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        event.stopPropagation();\n        console.log(\"Connector plane clicked:\", {\n            point: event.point,\n            isCmdClick: event.metaKey || event.ctrlKey\n        });\n        // Get the click point in world space\n        const clickPoint = event.point;\n        // First, check if the click is on a circle\n        // Determine which grid cell this point is closest to\n        const gridX = Math.round((clickPoint.x - centerOffset.x) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        const gridY = Math.round((clickPoint.y - centerOffset.y) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        // Check if this cell is within grid bounds\n        if (gridX >= 0 && gridX < controls.GRID_WIDTH && gridY >= 0 && gridY < controls.GRID_HEIGHT) {\n            // Calculate the cell center in world space\n            const cellCenter = getWorldPosition(gridY, gridX, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n            // Calculate distance from click to cell center\n            const distFromCenter = Math.sqrt(Math.pow(clickPoint.x - cellCenter.x, 2) + Math.pow(clickPoint.y - cellCenter.y, 2));\n            // Check if click is inside the inner circle\n            const currentInnerRadius = _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B * controls.visualScale;\n            if (distFromCenter <= currentInnerRadius) {\n                // This is a click on a circle - toggle its activation state\n                const index = getIndex(gridY, gridX, controls.GRID_WIDTH);\n                // If this is a cmd/ctrl click and there's an active circle to the right\n                if ((event.metaKey || event.ctrlKey) && gridX < controls.GRID_WIDTH - 1) {\n                    const rightIndex = getIndex(gridY, gridX + 1, controls.GRID_WIDTH);\n                    const leftActive = activationState[index] === 1.0;\n                    const rightActive = activationState[rightIndex] === 1.0;\n                    const canConnectBase = leftActive && rightActive;\n                    // --- NEW: Check for blocking diagonal connectors ---\n                    const connectorBelow = getIntendedConnector(gridX, gridY - 1);\n                    const connectorAdjacent = getIntendedConnector(gridX, gridY);\n                    const isBlockedByDiagonal = connectorBelow === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR || connectorBelow === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR || connectorAdjacent === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR || connectorAdjacent === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n                    // --- End NEW check ---\n                    console.log(\"Processing cmd-click (via plane on circle):\", {\n                        x: gridX,\n                        y: gridY,\n                        leftActive,\n                        rightActive,\n                        canConnectBase,\n                        isBlockedByDiagonal,\n                        connectorBelow,\n                        connectorAdjacent\n                    });\n                    // Only allow toggle if base conditions met AND not blocked by diagonal\n                    if (canConnectBase && !isBlockedByDiagonal) {\n                        const connectorKey = getHorizCmdConnectorKey(gridX, gridY);\n                        console.log(\"Toggling cmd-horiz connector (allowed):\", {\n                            key: connectorKey\n                        });\n                        setCmdHorizConnectors((prev)=>{\n                            const newConnectors = {\n                                ...prev\n                            };\n                            newConnectors[connectorKey] = prev[connectorKey] ? 0 : 1;\n                            // Update the ref to track the latest state\n                            cmdHorizConnectorsRef.current = newConnectors;\n                            console.log(\"Updated cmd-horiz connector state (via plane):\", {\n                                key: connectorKey,\n                                newValue: newConnectors[connectorKey],\n                                allConnectors: newConnectors,\n                                keys: Object.keys(newConnectors),\n                                activeConnectors: Object.entries(newConnectors).filter(([_, v])=>v === 1)\n                            });\n                            return newConnectors;\n                        });\n                        return; // Exit after handling cmd-click\n                    } else {\n                        console.log(\"Cmd-click horizontal connector blocked or base conditions not met.\");\n                    }\n                    // If blocked or can't connect, fall through to regular click? Let's do nothing more.\n                    return; // Explicitly do nothing more if cmd-click was blocked or invalid\n                }\n                // Regular click behavior (toggle activation) - only runs if not a handled cmd-click\n                console.log(\"Toggling circle activation (regular click on plane)\");\n                setActivationState((current)=>{\n                    const newState = new Float32Array(current);\n                    newState[index] = newState[index] === 1.0 ? 0.0 : 1.0;\n                    return newState;\n                });\n                console.log(`Toggling circle at (${gridX},${gridY})`);\n                return;\n            }\n        }\n        // If we get here, the click wasn't on a circle, so treat it as a connector click\n        // Determine which grid cell (bottom-left of a 2x2 group) this point is closest to\n        const groupX = Math.floor((clickPoint.x - centerOffset.x) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        const groupY = Math.floor((clickPoint.y - centerOffset.y) / _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING);\n        // Get the indices of the four cells in the 2x2 group\n        const blIndex = getIndex(groupY, groupX, controls.GRID_WIDTH);\n        const brIndex = getIndex(groupY, groupX + 1, controls.GRID_WIDTH);\n        const tlIndex = getIndex(groupY + 1, groupX, controls.GRID_WIDTH);\n        const trIndex = getIndex(groupY + 1, groupX + 1, controls.GRID_WIDTH);\n        // Check which cells are within grid bounds\n        const isValidGroup = groupX >= 0 && groupX < controls.GRID_WIDTH - 1 && groupY >= 0 && groupY < controls.GRID_HEIGHT - 1;\n        if (!isValidGroup) return;\n        // Get activation states for the four cells\n        const blActive = activationState[blIndex] === 1.0;\n        const brActive = activationState[brIndex] === 1.0;\n        const tlActive = activationState[tlIndex] === 1.0;\n        const trActive = activationState[trIndex] === 1.0;\n        // Get the world positions of the cell centers\n        const blPos = getWorldPosition(groupY, groupX, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const brPos = getWorldPosition(groupY, groupX + 1, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const tlPos = getWorldPosition(groupY + 1, groupX, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        const trPos = getWorldPosition(groupY + 1, groupX + 1, controls.GRID_WIDTH, controls.GRID_HEIGHT, _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING, centerOffset);\n        // Calculate the center of the 2x2 group\n        const centerX = (blPos.x + brPos.x + tlPos.x + trPos.x) / 4;\n        const centerY = (blPos.y + brPos.y + tlPos.y + trPos.y) / 4;\n        // Calculate distance from click to center of 2x2 group\n        const distToCenter = Math.sqrt(Math.pow(clickPoint.x - centerX, 2) + Math.pow(clickPoint.y - centerY, 2));\n        // Check if the click is in the center zone (30% of cell spacing)\n        const isCenterClick = distToCenter < _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING * 0.3 * controls.visualScale;\n        // Get the possible diagonal connectors\n        const canUseDiagTLBR = tlActive && brActive;\n        const canUseDiagBLTR = blActive && trActive;\n        const hasDiagonalOptions = canUseDiagTLBR || canUseDiagBLTR;\n        // Get current intended connector\n        const currentConnector = getIntendedConnector(groupX, groupY);\n        const groupKey = getCellGroupKey(groupX, groupY);\n        // --- NEW: Check for blocking horizontal connectors ---\n        const hasHorizCmdBelow = cmdHorizConnectors[getHorizCmdConnectorKey(groupX, groupY)] === 1;\n        const hasHorizCmdAbove = cmdHorizConnectors[getHorizCmdConnectorKey(groupX, groupY + 1)] === 1;\n        const isBlockedByHoriz = hasHorizCmdBelow || hasHorizCmdAbove;\n        // --- End NEW Check ---\n        let newConnector = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE; // Initialize potential new state\n        let potentialConnectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE; // Store the type determined by click logic\n        // If clicked in the center and diagonal connectors are available, cycle through them\n        if (isCenterClick && hasDiagonalOptions) {\n            if (canUseDiagTLBR && canUseDiagBLTR) {\n                // Both diagonals are available, cycle through the options: NONE -> TL-BR -> BL-TR -> NONE\n                if (currentConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) {\n                    potentialConnectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR;\n                } else if (currentConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR) {\n                    potentialConnectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n                } else {\n                    potentialConnectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n                }\n            } else if (canUseDiagTLBR) {\n                // Only TL-BR diagonal is available, toggle it\n                potentialConnectorType = currentConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR ? _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE : _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR;\n            } else {\n                // Only BL-TR diagonal is available, toggle it\n                potentialConnectorType = currentConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR ? _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE : _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n            }\n        } else if (!isCenterClick) {\n            // For clicks outside the center, determine which diagonal was clicked (if any)\n            let clickedType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n            // Calculate distances from click to each diagonal\n            const distToBLTR = Math.abs((clickPoint.x - blPos.x) * (trPos.y - blPos.y) - (clickPoint.y - blPos.y) * (trPos.x - blPos.x)) / Math.sqrt(Math.pow(trPos.x - blPos.x, 2) + Math.pow(trPos.y - blPos.y, 2));\n            const distToTLBR = Math.abs((clickPoint.x - tlPos.x) * (brPos.y - tlPos.y) - (clickPoint.y - tlPos.y) * (brPos.x - tlPos.x)) / Math.sqrt(Math.pow(brPos.x - tlPos.x, 2) + Math.pow(brPos.y - tlPos.y, 2));\n            if (distToBLTR < distToTLBR) {\n                // Closer to BL-TR diagonal (/)\n                if (canUseDiagBLTR) {\n                    clickedType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR;\n                }\n            } else {\n                // Closer to TL-BR diagonal (\\)\n                if (canUseDiagTLBR) {\n                    clickedType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR;\n                }\n            }\n            // Toggle logic - if the clicked connector is already active, turn it off\n            // Otherwise, turn on the clicked one\n            if (currentConnector === clickedType) {\n                potentialConnectorType = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE; // Toggle off\n            } else if (clickedType !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) {\n                potentialConnectorType = clickedType; // Toggle on new connector\n            }\n        }\n        // --- Apply Blocking Logic ---\n        if (isBlockedByHoriz && (potentialConnectorType === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR || potentialConnectorType === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR)) {\n            newConnector = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE; // Force to NONE if blocked by horizontal\n            console.log(`Diagonal connector blocked by existing horizontal connector at group (${groupX},${groupY})`);\n        } else {\n            newConnector = potentialConnectorType; // Otherwise, use the type determined by click logic\n        }\n        // --- End Blocking Logic ---\n        // Update the intended connector state\n        setIntendedConnectors((prev)=>{\n            console.log(`Connector update at (${groupX},${groupY}): previous=${prev[groupKey]} -> new=${newConnector}`);\n            const updated = {\n                ...prev,\n                [groupKey]: newConnector\n            };\n            // Update the ref to track the latest state\n            intendedConnectorsRef.current = updated;\n            // Log the change that was made\n            if (prev[groupKey] !== newConnector) {\n                if (newConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) {\n                    console.log(`Removed connector at (${groupX},${groupY})`);\n                } else {\n                    const typeStr = newConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR ? \"DIAG_TL_BR (\\\\)\" : newConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR ? \"DIAG_BL_TR (/)\" : newConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_T ? \"HORIZ_T\" : newConnector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_B ? \"HORIZ_B\" : `unknown (${newConnector})`;\n                    console.log(`Added ${typeStr} connector at (${groupX},${groupY})`);\n                    // Log updated connector state to help with debugging\n                    console.log(\"New connector state:\", updated);\n                    console.log(\"Connector keys:\", Object.keys(updated));\n                    console.log(\"Non-zero connectors:\", Object.entries(updated).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE));\n                }\n            }\n            return updated;\n        });\n        console.log(`Clicked cell group (${groupX},${groupY}), setting connector to ${newConnector}`);\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n        centerOffset,\n        activationState,\n        intendedConnectors,\n        controls.visualScale,\n        setCmdHorizConnectors,\n        cmdHorizConnectors\n    ]); // Dependencies are correct now\n    // Reset connector intent when a circle is deactivated\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Check all cell groups\n        const newIntendedConnectors = {\n            ...intendedConnectors\n        };\n        const newCmdHorizConnectors = {\n            ...cmdHorizConnectors\n        };\n        let hasChanges = false;\n        let hasCmdHorizChanges = false;\n        // First check regular connectors\n        for(const key in intendedConnectors){\n            const connector = intendedConnectors[key];\n            if (connector === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) continue;\n            // Parse x,y from key\n            const [x, y] = key.split(\",\").map(Number);\n            // Get the indices of the four cells\n            const blIndex = getIndex(y, x, controls.GRID_WIDTH);\n            const brIndex = getIndex(y, x + 1, controls.GRID_WIDTH);\n            const tlIndex = getIndex(y + 1, x, controls.GRID_WIDTH);\n            const trIndex = getIndex(y + 1, x + 1, controls.GRID_WIDTH);\n            // Get activation states\n            const blActive = activationState[blIndex] === 1.0;\n            const brActive = activationState[brIndex] === 1.0;\n            const tlActive = activationState[tlIndex] === 1.0;\n            const trActive = activationState[trIndex] === 1.0;\n            // Check if the connector is still valid\n            let isValid = true;\n            switch(connector){\n                case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR:\n                    isValid = tlActive && brActive;\n                    break;\n                case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR:\n                    isValid = blActive && trActive;\n                    break;\n                case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_T:\n                    isValid = tlActive && trActive;\n                    break;\n                case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_B:\n                    isValid = blActive && brActive;\n                    break;\n            }\n            if (!isValid) {\n                newIntendedConnectors[key] = _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE;\n                hasChanges = true;\n            }\n        }\n        // Now check cmd-click horizontal connectors\n        for(const key in cmdHorizConnectors){\n            if (cmdHorizConnectors[key] === 0) continue;\n            // Parse x,y from key (remove 'hcmd:' prefix)\n            const [x, y] = key.substring(5).split(\",\").map(Number);\n            // Get indices for left and right circles\n            const leftIndex = getIndex(y, x, controls.GRID_WIDTH);\n            const rightIndex = getIndex(y, x + 1, controls.GRID_WIDTH);\n            // Check if both circles are still active\n            const leftActive = activationState[leftIndex] === 1.0;\n            const rightActive = activationState[rightIndex] === 1.0;\n            if (!leftActive || !rightActive) {\n                newCmdHorizConnectors[key] = 0;\n                hasCmdHorizChanges = true;\n            }\n        }\n        if (hasChanges) {\n            setIntendedConnectors(newIntendedConnectors);\n        }\n        if (hasCmdHorizChanges) {\n            setCmdHorizConnectors(newCmdHorizConnectors);\n        }\n    }, [\n        activationState,\n        controls.GRID_WIDTH,\n        intendedConnectors,\n        cmdHorizConnectors\n    ]);\n    // Create a data texture for intended connectors\n    const intendedConnectorTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating intended connector texture: ${controls.GRID_WIDTH - 1}x${controls.GRID_HEIGHT - 1}`);\n        // Texture has one pixel per 2x2 cell group (grid cells minus 1 in each dimension)\n        const width = Math.max(1, controls.GRID_WIDTH - 1);\n        const height = Math.max(1, controls.GRID_HEIGHT - 1);\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(width * height).fill(0.0), width, height, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true;\n        return texture;\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT\n    ]);\n    // Update the intended connector texture when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const width = Math.max(1, controls.GRID_WIDTH - 1);\n        const data = new Float32Array(width * Math.max(1, controls.GRID_HEIGHT - 1));\n        for(let y = 0; y < controls.GRID_HEIGHT - 1; y++){\n            for(let x = 0; x < controls.GRID_WIDTH - 1; x++){\n                const index = y * width + x;\n                const connector = getIntendedConnector(x, y);\n                data[index] = connector;\n            }\n        }\n        if (intendedConnectorTexture && data.length === intendedConnectorTexture.image.data.length) {\n            intendedConnectorTexture.image.data.set(data);\n            intendedConnectorTexture.needsUpdate = true;\n        }\n    }, [\n        intendedConnectors,\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        intendedConnectorTexture\n    ]);\n    // Create horizontal cmd-click connector texture\n    const cmdHorizConnectorTexture = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        console.log(`Creating cmd-click horizontal connector texture: ${controls.GRID_WIDTH - 1}x${controls.GRID_HEIGHT}`);\n        // Texture has one pixel per horizontal connection possibility\n        const width = Math.max(1, controls.GRID_WIDTH - 1);\n        const height = controls.GRID_HEIGHT;\n        const texture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Float32Array(width * height).fill(0.0), width, height, three__WEBPACK_IMPORTED_MODULE_2__.RedFormat, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        texture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n        texture.needsUpdate = true;\n        return texture;\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT\n    ]);\n    // Update the cmd-click horizontal connector texture when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const width = Math.max(1, controls.GRID_WIDTH - 1);\n        const data = new Float32Array(width * controls.GRID_HEIGHT);\n        console.log(\"Updating cmd-horiz connector texture:\", {\n            width,\n            height: controls.GRID_HEIGHT,\n            connectors: cmdHorizConnectors\n        });\n        for(let y = 0; y < controls.GRID_HEIGHT; y++){\n            for(let x = 0; x < width; x++){\n                const key = getHorizCmdConnectorKey(x, y);\n                const value = cmdHorizConnectors[key] || 0;\n                data[y * width + x] = value;\n                if (value > 0) {\n                    console.log(\"Found active connector:\", {\n                        x,\n                        y,\n                        key,\n                        value\n                    });\n                }\n            }\n        }\n        if (cmdHorizConnectorTexture && data.length === cmdHorizConnectorTexture.image.data.length) {\n            cmdHorizConnectorTexture.image.data.set(data);\n            cmdHorizConnectorTexture.needsUpdate = true;\n            console.log(\"Updated cmd-horiz connector texture data\");\n        } else {\n            console.warn(\"Skipping cmd-horiz texture update: size mismatch or texture not ready\", {\n                textureSize: cmdHorizConnectorTexture?.image.data.length,\n                dataSize: data.length\n            });\n        }\n    }, [\n        cmdHorizConnectors,\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        cmdHorizConnectorTexture\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!meshRef.current) return;\n        // Enable frustum culling\n        meshRef.current.frustumCulled = true;\n        // Update bounding sphere for better culling\n        if (meshRef.current.geometry) {\n            meshRef.current.geometry.computeBoundingSphere();\n            if (meshRef.current.geometry.boundingSphere) {\n                meshRef.current.geometry.boundingSphere.radius *= Math.max(controls.visualScale, 1.0);\n            }\n        }\n    }, [\n        controls.visualScale\n    ]);\n    // --- Performance Monitoring Setup ---\n    const statsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Use useRef to hold the instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Stats is disabled for now due to import issues\n        // Initialize Stats.js on component mount\n        /*\n    statsRef.current = new Stats();\n    statsRef.current.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild(statsRef.current.dom);\n    */ // Cleanup function to remove Stats.js on unmount\n        return ()=>{\n            if (statsRef.current) {\n                document.body.removeChild(statsRef.current.dom);\n                statsRef.current = null; // Clear the ref\n            }\n        };\n    }, []); // Empty dependency array ensures this runs only once on mount/unmount\n    // Frame update logic (including stats)\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.useFrame)((state)=>{\n        if (statsRef.current) {\n            statsRef.current.update(); // Update FPS counter\n        }\n    // Optional: Log frame time periodically\n    // if (state.clock.elapsedTime % 5 < state.clock.getDelta()) { // Check every 5s\n    //   console.log('Frame time:', state.clock.getDelta() * 1000, 'ms');\n    // }\n    });\n    // Save with direct values\n    const saveGridStateWithDirectValues = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((currentActivation, directIntendedConnectors, directCmdHorizConnectors)=>{\n        console.log(\"========== SAVE DIAGNOSTICS START ==========\");\n        console.log(\"Starting direct save grid state with data:\");\n        // Explicitly use the current control values for grid width and height\n        const currentGridWidth = controls.GRID_WIDTH;\n        const currentGridHeight = controls.GRID_HEIGHT;\n        console.log(`Current grid dimensions: ${currentGridWidth} x ${currentGridHeight}`);\n        // Log the state details\n        console.log(\"- Current activation state has length:\", currentActivation.length);\n        console.log(\"- Active nodes count:\", Array.from(currentActivation).filter((val)=>val === 1.0).length);\n        // Log the raw state for debugging\n        console.log(\"RAW intendedConnectors:\", directIntendedConnectors);\n        console.log(\"RAW cmdHorizConnectors:\", directCmdHorizConnectors);\n        // Make deep copies to ensure we don't mutate the original objects\n        const intendedConnectorsCopy = JSON.parse(JSON.stringify(directIntendedConnectors));\n        const cmdHorizConnectorsCopy = JSON.parse(JSON.stringify(directCmdHorizConnectors));\n        // DEBUG: Log the intended connectors in detail\n        console.log(\"- Intended connectors (direct) keys:\", Object.keys(intendedConnectorsCopy));\n        console.log(\"- Intended connectors (direct) count:\", Object.keys(intendedConnectorsCopy).length);\n        // Check if connectors have actual values or are just empty objects\n        const nonZeroIntendedConnectors = Object.entries(intendedConnectorsCopy).filter(([key, value])=>value !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE);\n        console.log(\"- Non-zero intended connectors:\", nonZeroIntendedConnectors.length);\n        console.log(\"- Non-zero intended connectors data:\", nonZeroIntendedConnectors);\n        // DEBUG: Log the cmd horiz connectors in detail\n        console.log(\"- Cmd horiz connectors (direct) keys:\", Object.keys(cmdHorizConnectorsCopy));\n        console.log(\"- Cmd horiz connectors count:\", Object.keys(cmdHorizConnectorsCopy).length);\n        // Check if cmd horiz connectors have actual values or are just empty objects\n        const activeHorizConnectors = Object.entries(cmdHorizConnectorsCopy).filter(([key, value])=>value === 1);\n        console.log(\"- Active horiz connectors:\", activeHorizConnectors.length);\n        console.log(\"- Active horiz connectors data:\", activeHorizConnectors);\n        // Find all active nodes\n        const nodes = [];\n        for(let i = 0; i < currentActivation.length; i++){\n            if (currentActivation[i] === 1.0) {\n                const { row: y, col: x } = getCoords(i, currentGridWidth);\n                nodes.push({\n                    x,\n                    y\n                });\n                console.log(`Found active node at (${x}, ${y})`);\n            }\n        }\n        console.log(`Total active nodes found: ${nodes.length}`);\n        // Find all edges - connectors between active nodes\n        const edges = [];\n        // Process intended connectors (diagonals, etc.)\n        console.log(\"Processing intended connectors...\");\n        // Need to manually iterate through all possible connector positions since state might not contain all keys\n        for(let y = 0; y < currentGridHeight - 1; y++){\n            for(let x = 0; x < currentGridWidth - 1; x++){\n                const key = getCellGroupKey(x, y);\n                // console.log(`Checking position (${x},${y}) with key ${key}`);\n                const type = intendedConnectorsCopy[key];\n                if (type === undefined || type === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE) {\n                    continue;\n                }\n                console.log(`Found connector at (${x},${y}) with key ${key}, type=${type}`);\n                // Map the numeric connector type to the string type for the JSON\n                let edgeType = null;\n                switch(type){\n                    case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR:\n                        edgeType = \"diag_tl_br\";\n                        console.log(`Converting CONNECTOR_DIAG_TL_BR (${_constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR}) to 'diag_tl_br'`);\n                        break;\n                    case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR:\n                        edgeType = \"diag_bl_tr\";\n                        console.log(`Converting CONNECTOR_DIAG_BL_TR (${_constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR}) to 'diag_bl_tr'`);\n                        break;\n                    case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_T:\n                        edgeType = \"horiz_t\";\n                        console.log(`Converting CONNECTOR_HORIZ_T (${_constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_T}) to 'horiz_t'`);\n                        break;\n                    case _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_B:\n                        edgeType = \"horiz_b\";\n                        console.log(`Converting CONNECTOR_HORIZ_B (${_constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_HORIZ_B}) to 'horiz_b'`);\n                        break;\n                    default:\n                        console.warn(`Unknown connector type ignored: ${type}`);\n                }\n                if (edgeType) {\n                    edges.push({\n                        type: edgeType,\n                        x,\n                        y\n                    });\n                    console.log(`Added ${edgeType} connector at (${x}, ${y}) to edges array`);\n                }\n            }\n        }\n        // Process cmd-horizontal connectors\n        console.log(\"Processing cmd-horizontal connectors...\");\n        for(let y = 0; y < currentGridHeight; y++){\n            for(let x = 0; x < currentGridWidth - 1; x++){\n                const key = getHorizCmdConnectorKey(x, y);\n                const value = cmdHorizConnectorsCopy[key];\n                if (value === 1) {\n                    edges.push({\n                        type: \"cmd_horiz\",\n                        x,\n                        y\n                    });\n                    console.log(`Added cmd_horiz connector at (${x}, ${y}) to edges array`);\n                }\n            }\n        }\n        console.log(`Total edges found: ${edges.length}`);\n        // Create the final JSON data structure\n        const data = {\n            gridWidth: currentGridWidth,\n            gridHeight: currentGridHeight,\n            nodes,\n            edges\n        };\n        // Create JSON string\n        const dataStr = JSON.stringify(data, null, 2);\n        console.log(\"Grid State JSON:\", dataStr);\n        console.log(\"========== SAVE DIAGNOSTICS END ==========\");\n        // Trigger download\n        const blob = new Blob([\n            dataStr\n        ], {\n            type: \"application/json\"\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `grid_state_${currentGridWidth}x${currentGridHeight}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT\n    ]);\n    // --- Save Grid State Function ---\n    const saveGridState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"Starting save grid state with data:\");\n        // Get the current activation state directly from the buffer attribute\n        // which is the most up-to-date source of truth\n        let currentActivation;\n        if (activationAttributeRef.current && activationAttributeRef.current.array) {\n            currentActivation = activationAttributeRef.current.array;\n            console.log(\"- Using activation state from buffer attribute\");\n        } else {\n            currentActivation = activationState;\n            console.log(\"- Using activation state from React state (fallback)\");\n        }\n        // Use the ref values which should be in sync with state\n        const currentIntendedConnectors = JSON.parse(JSON.stringify(intendedConnectorsRef.current || {}));\n        const currentCmdHorizConnectors = JSON.parse(JSON.stringify(cmdHorizConnectorsRef.current || {}));\n        // Debug current state\n        console.log(\"Current intended connectors before save:\", currentIntendedConnectors);\n        console.log(\"Keys in intended connectors:\", Object.keys(currentIntendedConnectors));\n        console.log(\"Active intended connectors:\", Object.entries(currentIntendedConnectors).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE));\n        console.log(\"Current cmd horiz connectors before save:\", currentCmdHorizConnectors);\n        console.log(\"Active cmd horiz connectors:\", Object.entries(currentCmdHorizConnectors).filter(([_, v])=>v === 1));\n        console.log(\"Using direct save method to ensure up-to-date state capture\");\n        saveGridStateWithDirectValues(currentActivation, currentIntendedConnectors, currentCmdHorizConnectors);\n    }, [\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        activationState,\n        activationAttributeRef\n    ]);\n    // Debug function to create a test pattern similar to what's in the image\n    const createTestPattern = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"========== TEST PATTERN CREATION START ==========\");\n        console.log(\"Creating test pattern\");\n        // Create a new activation state array\n        const newActivationState = new Float32Array(TOTAL_CIRCLES).fill(0.0);\n        // Activate nodes in a pattern similar to the image\n        // The pattern shows a vertical line with some horizontal connectors and diagonal branches\n        const pattern = [\n            // Vertical central column (top to bottom)\n            {\n                x: 5,\n                y: 2\n            },\n            {\n                x: 5,\n                y: 3\n            },\n            {\n                x: 5,\n                y: 4\n            },\n            {\n                x: 5,\n                y: 5\n            },\n            {\n                x: 5,\n                y: 6\n            },\n            {\n                x: 5,\n                y: 7\n            },\n            // Horizontal connection in the middle row\n            {\n                x: 4,\n                y: 4\n            },\n            {\n                x: 6,\n                y: 4\n            },\n            // Diagonal cluster at bottom\n            {\n                x: 4,\n                y: 6\n            },\n            {\n                x: 6,\n                y: 6\n            },\n            // Diagonal node at top\n            {\n                x: 6,\n                y: 3\n            }\n        ];\n        // Set active nodes\n        pattern.forEach(({ x, y })=>{\n            if (x >= 0 && x < controls.GRID_WIDTH && y >= 0 && y < controls.GRID_HEIGHT) {\n                const index = getIndex(y, x, controls.GRID_WIDTH);\n                newActivationState[index] = 1.0;\n                console.log(`Setting active node at (${x}, ${y}), index: ${index}`);\n            }\n        });\n        // Create connectors\n        const newIntendedConnectors = {\n            // Diagonal connections - they use bottom-left coordinates of the 2x2 group\n            \"5,2\": _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR,\n            \"4,5\": _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR,\n            \"5,5\": _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR // Diagonal from (5,6) to (6,5) - bottom right\n        };\n        // Create cmd-horiz connectors - these connect dots horizontally with cmd-click\n        const newCmdHorizConnectors = {\n            // Middle row horizontal connector\n            [\"hcmd:4,4\"]: 1 // Horizontal connector from (4,4) to (5,4)\n        };\n        // Log details of the test pattern\n        console.log(\"Test pattern details:\");\n        console.log(\"- Total active nodes:\", pattern.length);\n        // Log diagonal connector details \n        Object.entries(newIntendedConnectors).forEach(([key, value])=>{\n            const type = value === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_BL_TR ? \"diagonal BL-TR (/)\" : value === _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_DIAG_TL_BR ? \"diagonal TL-BR (\\\\)\" : `unknown type ${value}`;\n            console.log(`- Diagonal connector at ${key}: ${type} (value: ${value})`);\n        });\n        // Log cmd-horiz connector details\n        Object.entries(newCmdHorizConnectors).forEach(([key, value])=>{\n            if (value === 1) {\n                console.log(`- Cmd-horiz connector at ${key.substring(5)}: active`);\n            }\n        });\n        // Set states\n        console.log(\"Setting activation state, intended connectors, and cmd-horiz connectors...\");\n        setActivationState(newActivationState);\n        setIntendedConnectors(newIntendedConnectors);\n        setCmdHorizConnectors(newCmdHorizConnectors);\n        console.log(\"Test pattern created\");\n        // Add check after small delay to verify state was updated\n        setTimeout(()=>{\n            console.log(\"Verification of state update:\");\n            console.log(\"- intendedConnectors:\", intendedConnectors);\n            console.log(\"- nonzero intendedConnectors:\", Object.entries(intendedConnectors).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE));\n            console.log(\"- cmdHorizConnectors:\", cmdHorizConnectors);\n            console.log(\"- active cmdHorizConnectors:\", Object.entries(cmdHorizConnectors).filter(([_, v])=>v === 1));\n            // Check if our expectation matches reality\n            const allConnectorsMatch = Object.keys(newIntendedConnectors).length === Object.entries(intendedConnectors).filter(([_, v])=>v !== _constants__WEBPACK_IMPORTED_MODULE_8__.CONNECTOR_NONE).length && Object.keys(newCmdHorizConnectors).filter((k)=>newCmdHorizConnectors[k] === 1).length === Object.entries(cmdHorizConnectors).filter(([_, v])=>v === 1).length;\n            console.log(\"All connectors set correctly:\", allConnectorsMatch ? \"YES\" : \"NO\");\n        }, 100);\n        // Automatically trigger custom save after a delay\n        setTimeout(()=>{\n            console.log(\"========== AUTO-SAVE TEST PATTERN START ==========\");\n            console.log(\"Auto-saving test pattern with direct reference to new states...\");\n            // Call a modified version of saveGridState that uses the new connector states directly\n            saveGridStateWithDirectValues(newActivationState, newIntendedConnectors, newCmdHorizConnectors);\n            console.log(\"========== AUTO-SAVE TEST PATTERN END ==========\");\n        }, 500); // 500ms delay should be sufficient\n        console.log(\"========== TEST PATTERN CREATION END ==========\");\n    }, [\n        TOTAL_CIRCLES,\n        controls.GRID_WIDTH,\n        controls.GRID_HEIGHT,\n        setActivationState,\n        setIntendedConnectors,\n        setCmdHorizConnectors,\n        intendedConnectors,\n        cmdHorizConnectors\n    ]);\n    // Debug function to clear everything\n    const clearAll = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"Clearing all state\");\n        setActivationState(new Float32Array(TOTAL_CIRCLES).fill(0.0));\n        setIntendedConnectors({});\n        setCmdHorizConnectors({});\n        // Also clear the refs\n        intendedConnectorsRef.current = {};\n        cmdHorizConnectorsRef.current = {};\n    }, [\n        TOTAL_CIRCLES,\n        setActivationState,\n        setIntendedConnectors,\n        setCmdHorizConnectors\n    ]);\n    // Now that we've defined the debug functions, add the debug controls\n    (0,leva__WEBPACK_IMPORTED_MODULE_3__.useControls)(\"Debug\", ()=>({\n            createTestPattern: (0,leva__WEBPACK_IMPORTED_MODULE_3__.button)(()=>createTestPattern()),\n            clearAll: (0,leva__WEBPACK_IMPORTED_MODULE_3__.button)(()=>clearAll()),\n            directSave: (0,leva__WEBPACK_IMPORTED_MODULE_3__.button)(()=>{\n                console.log(\"Direct save triggered manually\");\n                // Use the ref directly to ensure we get the latest state\n                const currentActivation = activationAttributeRef.current ? activationAttributeRef.current.array : activationState;\n                // Use the ref values which should have the most up-to-date state\n                const currentIntendedConnectors = JSON.parse(JSON.stringify(intendedConnectorsRef.current || {}));\n                const currentCmdHorizConnectors = JSON.parse(JSON.stringify(cmdHorizConnectorsRef.current || {}));\n                console.log(\"Ref values for connectors:\", {\n                    intended: currentIntendedConnectors,\n                    cmdHoriz: currentCmdHorizConnectors\n                });\n                saveGridStateWithDirectValues(currentActivation, currentIntendedConnectors, currentCmdHorizConnectors);\n            })\n        }));\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"group\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"instancedMesh\", {\n                ref: meshRef,\n                args: [\n                    undefined,\n                    undefined,\n                    TOTAL_CIRCLES\n                ],\n                onClick: handleCircleClick,\n                position: [\n                    0,\n                    0,\n                    -0.1\n                ],\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            1,\n                            1\n                        ],\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"instancedBufferAttribute\", {\n                            ref: activationAttributeRef,\n                            attach: \"attributes-a_activated\",\n                            args: [\n                                activationState,\n                                1\n                            ],\n                            usage: three__WEBPACK_IMPORTED_MODULE_2__.DynamicDrawUsage\n                        }, void 0, false, {\n                            fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                            lineNumber: 1348,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1346,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circleMaterial\", {\n                        ref: materialRef,\n                        transparent: true\n                    }, _CircleMaterial__WEBPACK_IMPORTED_MODULE_5__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1355,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `circles-${TOTAL_CIRCLES}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 1338,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                position: [\n                    0,\n                    0,\n                    0.1\n                ],\n                onClick: handleConnectorClick,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1368,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"connectorMaterial\", {\n                        ref: connectorMaterialRef,\n                        transparent: true,\n                        side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n                        // Pass required uniforms (cmdHoriz texture removed)\n                        u_stateTexture: stateTexture,\n                        u_intendedConnectorTexture: intendedConnectorTexture,\n                        // u_cmdHorizConnectorTexture removed\n                        u_gridDimensions: [\n                            controls.GRID_WIDTH,\n                            controls.GRID_HEIGHT\n                        ],\n                        u_textureResolution: [\n                            controls.GRID_WIDTH,\n                            controls.GRID_HEIGHT\n                        ],\n                        u_radiusA: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A,\n                        u_radiusB: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B,\n                        u_gridSpacing: controls.visualScale,\n                        u_centerOffset: [\n                            centerOffset.x,\n                            centerOffset.y\n                        ],\n                        u_planeSize: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, _ConnectorMaterial__WEBPACK_IMPORTED_MODULE_6__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1369,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `connector-plane-${controls.GRID_WIDTH}-${controls.GRID_HEIGHT}-${controls.visualScale}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 1363,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                position: [\n                    0,\n                    0,\n                    0.2\n                ],\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {\n                        args: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1395,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"cmdHorizConnectorMaterial\", {\n                        ref: cmdHorizMaterialRef,\n                        transparent: true,\n                        side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n                        // Pass necessary uniforms for this specific material\n                        u_stateTexture: stateTexture,\n                        u_cmdHorizConnectorTexture: cmdHorizConnectorTexture,\n                        u_gridDimensions: [\n                            controls.GRID_WIDTH,\n                            controls.GRID_HEIGHT\n                        ],\n                        u_textureResolution: [\n                            controls.GRID_WIDTH,\n                            controls.GRID_HEIGHT\n                        ],\n                        u_radiusA: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_A,\n                        u_radiusB: _constants__WEBPACK_IMPORTED_MODULE_8__.BASE_RADIUS_B,\n                        u_gridSpacing: controls.visualScale,\n                        u_fixedSpacing: _constants__WEBPACK_IMPORTED_MODULE_8__.FIXED_SPACING,\n                        u_centerOffset: [\n                            centerOffset.x,\n                            centerOffset.y\n                        ],\n                        u_planeSize: [\n                            planeWidth,\n                            planeHeight\n                        ]\n                    }, _CmdHorizConnectorMaterial__WEBPACK_IMPORTED_MODULE_7__[\"default\"].key, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                        lineNumber: 1396,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, `cmd-horiz-connector-plane-${controls.GRID_WIDTH}-${controls.GRID_HEIGHT}-${controls.visualScale}`, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n                lineNumber: 1389,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ian/cursor_projects/webGL_meta/components/GridScene.tsx\",\n        lineNumber: 1337,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GridScene);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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REFBYUE7d0JBQ3hCbUksV0FBV2xJLHFEQUFhQTt3QkFDeEJ5UyxlQUFlclEsU0FBU1EsV0FBVzt3QkFDbkNrUSxnQkFBZ0JoVCxxREFBYUE7d0JBQzdCNFMsZ0JBQWdCOzRCQUFDcFIsYUFBYUMsQ0FBQzs0QkFBRUQsYUFBYUUsQ0FBQzt5QkFBQzt3QkFDaERtUixhQUFhOzRCQUFDbk07NEJBQVlDO3lCQUFZO3VCQWJqQzVHLHNFQUE2Qjs7Ozs7O2VBUC9CLENBQUMsMEJBQTBCLEVBQUV1QyxTQUFTRSxVQUFVLENBQUMsQ0FBQyxFQUFFRixTQUFTTyxXQUFXLENBQUMsQ0FBQyxFQUFFUCxTQUFTUSxXQUFXLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7QUEwQi9HO0FBRUEsaUVBQWVULFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9jb21wb25lbnRzL0dyaWRTY2VuZS50c3g/MGRjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IHVzZUNvbnRyb2xzLCBidXR0b24sIGZvbGRlciB9IGZyb20gJ2xldmEnO1xuaW1wb3J0IHsgdXNlRnJhbWUgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0IENpcmNsZU1hdGVyaWFsIGZyb20gJy4vQ2lyY2xlTWF0ZXJpYWwnO1xuaW1wb3J0IENvbm5lY3Rvck1hdGVyaWFsIGZyb20gJy4vQ29ubmVjdG9yTWF0ZXJpYWwnO1xuaW1wb3J0IENtZEhvcml6Q29ubmVjdG9yTWF0ZXJpYWwgZnJvbSAnLi9DbWRIb3JpekNvbm5lY3Rvck1hdGVyaWFsJztcbi8vIFN0YXRzIGltcG9ydCBjb21tZW50ZWQgb3V0IC0gbm90IGNyaXRpY2FsIGZvciBmdW5jdGlvbmFsaXR5XG4vLyBpbXBvcnQgU3RhdHMgZnJvbSAndGhyZWUvYWRkb25zL2xpYnMvc3RhdHMubW9kdWxlJztcbmltcG9ydCB7IFxuICBGSVhFRF9TUEFDSU5HLCBcbiAgQkFTRV9SQURJVVNfQSwgXG4gIEJBU0VfUkFESVVTX0IsXG4gIENPTk5FQ1RPUl9OT05FLFxuICBDT05ORUNUT1JfRElBR19UTF9CUixcbiAgQ09OTkVDVE9SX0RJQUdfQkxfVFIsXG4gIENPTk5FQ1RPUl9IT1JJWl9ULFxuICBDT05ORUNUT1JfSE9SSVpfQixcbiAgQ09OTkVDVE9SX0hPUklaX0NNRFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8vID09PSBGZWF0dXJlIDE6IEdyaWQgRGF0YSAmIENvbmZpZ3VyYXRpb24gPT09XG5cbi8vIENvbnN0YW50cyBmb3IgYmFzZSBnZW9tZXRyeSAtIFJFTU9WRUQsIG5vdyBpbXBvcnRlZFxuLy8gY29uc3QgQkFTRV9SQURJVVNfQSA9IDAuNTsgLy8gT3V0ZXIgcmFkaXVzXG4vLyBjb25zdCBCQVNFX1JBRElVU19CID0gMC40OyAvLyBJbm5lciByYWRpdXNcbi8vIGNvbnN0IEZJWEVEX1NQQUNJTkcgPSBCQVNFX1JBRElVU19BICsgQkFTRV9SQURJVVNfQjsgLy8gMC45XG5cbmNvbnN0IEJBU0VfR1JJRF9TUEFDSU5HID0gMS4wOyAvLyBLZWVwIGZvciByZWZlcmVuY2UgaWYgbmVlZGVkXG5cbi8vIEhlbHBlciBGdW5jdGlvbnNcbmNvbnN0IGdldEluZGV4ID0gKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gcm93ICogZ3JpZFdpZHRoICsgY29sO1xufTtcblxuY29uc3QgZ2V0Q29vcmRzID0gKGluZGV4OiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyKTogeyByb3c6IG51bWJlcjsgY29sOiBudW1iZXIgfSA9PiB7XG4gIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoaW5kZXggLyBncmlkV2lkdGgpO1xuICBjb25zdCBjb2wgPSBpbmRleCAlIGdyaWRXaWR0aDtcbiAgcmV0dXJuIHsgcm93LCBjb2wgfTtcbn07XG5cbi8vIE1vZGlmaWVkIHRvIHVzZSBmaXhlZCBzcGFjaW5nXG5jb25zdCBnZXRDZW50ZXJPZmZzZXQgPSAoZ3JpZFdpZHRoOiBudW1iZXIsIGdyaWRIZWlnaHQ6IG51bWJlciwgc3BhY2luZzogbnVtYmVyKTogVEhSRUUuVmVjdG9yMiA9PiB7XG4gIGNvbnN0IHRvdGFsV2lkdGggPSAoZ3JpZFdpZHRoIC0gMSkgKiBzcGFjaW5nO1xuICBjb25zdCB0b3RhbEhlaWdodCA9IChncmlkSGVpZ2h0IC0gMSkgKiBzcGFjaW5nO1xuICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoLXRvdGFsV2lkdGggLyAyLCAtdG90YWxIZWlnaHQgLyAyKTtcbn07XG5cbi8vIE1vZGlmaWVkIHRvIHVzZSBmaXhlZCBzcGFjaW5nXG5jb25zdCBnZXRXb3JsZFBvc2l0aW9uID0gKFxuICByb3c6IG51bWJlcixcbiAgY29sOiBudW1iZXIsXG4gIGdyaWRXaWR0aDogbnVtYmVyLCAvLyBLZWVwIGdyaWQgZGltZW5zaW9ucyBmb3Igb2Zmc2V0IGNhbGN1bGF0aW9uIGlmIG5lZWRlZFxuICBncmlkSGVpZ2h0OiBudW1iZXIsXG4gIHNwYWNpbmc6IG51bWJlciwgLy8gVGhpcyB3aWxsIGJlIEZJWEVEX1NQQUNJTkdcbiAgY2VudGVyT2Zmc2V0OiBUSFJFRS5WZWN0b3IyXG4pOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0gPT4ge1xuICBjb25zdCB4ID0gY29sICogc3BhY2luZyArIGNlbnRlck9mZnNldC54O1xuICBjb25zdCB5ID0gcm93ICogc3BhY2luZyArIGNlbnRlck9mZnNldC55O1xuICByZXR1cm4geyB4LCB5IH07XG59O1xuXG4vLyA9PT0gR3JpZFNjZW5lIENvbXBvbmVudCA9PT1cblxuLy8gRHVtbXkgb2JqZWN0IGZvciBtYXRyaXggY2FsY3VsYXRpb25zXG5jb25zdCBkdW1teSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuY29uc3QgdGVtcE1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5jb25zdCB0ZW1wVmVjID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuLy8gTmV3OiBIZWxwZXIgZm9yIGhvcml6b250YWwgY21kLWNsaWNrIGNvbm5lY3RvciBrZXkgZ2VuZXJhdGlvblxuY29uc3QgZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IGBoY21kOiR7eH0sJHt5fWA7XG5cbi8vIEhlbHBlciB0byBnZXQgdGhlIGtleSBmb3IgYSAyeDIgY2VsbCBncm91cFxuY29uc3QgZ2V0Q2VsbEdyb3VwS2V5ID0gKGNlbGxYOiBudW1iZXIsIGNlbGxZOiBudW1iZXIpID0+IGAke2NlbGxYfSwke2NlbGxZfWA7XG5cbi8vIC0tLSBBZGphY2VuY3kgTGlzdCBTdHJ1Y3R1cmUgRGVmaW5pdGlvbiAtLS1cbmludGVyZmFjZSBHcmlkTm9kZSB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgR3JpZEVkZ2Uge1xuICB0eXBlOiAnZGlhZ190bF9icicgfCAnZGlhZ19ibF90cicgfCAnaG9yaXpfdCcgfCAnaG9yaXpfYicgfCAnY21kX2hvcml6JztcbiAgeDogbnVtYmVyOyAvLyB4LWNvb3JkIG9mIHRoZSBvcmlnaW4gY2VsbC9jaXJjbGUgZm9yIHRoZSBjb25uZWN0b3JcbiAgeTogbnVtYmVyOyAvLyB5LWNvb3JkIG9mIHRoZSBvcmlnaW4gY2VsbC9jaXJjbGUgZm9yIHRoZSBjb25uZWN0b3Jcbn1cblxuaW50ZXJmYWNlIEFkamFjZW5jeUxpc3REYXRhIHtcbiAgZ3JpZFdpZHRoOiBudW1iZXI7XG4gIGdyaWRIZWlnaHQ6IG51bWJlcjtcbiAgbm9kZXM6IEdyaWROb2RlW107XG4gIGVkZ2VzOiBHcmlkRWRnZVtdO1xufVxuLy8gLS0tIEVuZCBBZGphY2VuY3kgTGlzdCBTdHJ1Y3R1cmUgLS0tXG5cbmNvbnN0IEdyaWRTY2VuZSA9ICgpID0+IHtcbiAgLy8gR2V0IHRoZSBzZXQgZnVuY3Rpb24gZGlyZWN0bHkgZnJvbSB1c2VDb250cm9sc1xuICBjb25zdCBbY29udHJvbHMsIHNldExldmFDb250cm9sXSA9IHVzZUNvbnRyb2xzKCdHcmlkJywgKCkgPT4gKHtcbiAgICBHUklEX1dJRFRIOiB7IHZhbHVlOiAxMCwgbWluOiAyLCBtYXg6IDEwMCwgc3RlcDogMSB9LFxuICAgIEdSSURfSEVJR0hUOiB7IHZhbHVlOiAxMCwgbWluOiAyLCBtYXg6IDEwMCwgc3RlcDogMSB9LFxuICAgIHZpc3VhbFNjYWxlOiB7XG4gICAgICB2YWx1ZTogMS4wLFxuICAgICAgbWluOiAwLjEsXG4gICAgICBtYXg6IDUsXG4gICAgICBzdGVwOiAwLjEsXG4gICAgICBsYWJlbDogJ1Zpc3VhbCBTY2FsZSdcbiAgICB9LFxuICAgIC8vIFVzZSBidXR0b24gZnVuY3Rpb25zIHRoYXQgZG9uJ3QgcmVmZXJlbmNlIHRoZSBjb21wb25lbnQgZnVuY3Rpb25zIGRpcmVjdGx5XG4gICAgJ1NhdmUvTG9hZCc6IGZvbGRlcih7XG4gICAgICAgIHNhdmVTdGF0ZTogYnV0dG9uKCgpID0+IHsgXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTYXZlIGJ1dHRvbiBjbGlja2VkXCIpO1xuICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBhY3RpdmF0aW9uIHN0YXRlIGRpcmVjdGx5IGZyb20gdGhlIGJ1ZmZlciBhdHRyaWJ1dGVcbiAgICAgICAgICBsZXQgY3VycmVudEFjdGl2YXRpb246IEZsb2F0MzJBcnJheTtcbiAgICAgICAgICBpZiAoYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZi5jdXJyZW50ICYmIGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYuY3VycmVudC5hcnJheSkge1xuICAgICAgICAgICAgY3VycmVudEFjdGl2YXRpb24gPSBhY3RpdmF0aW9uQXR0cmlidXRlUmVmLmN1cnJlbnQuYXJyYXkgYXMgRmxvYXQzMkFycmF5O1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCItIFVzaW5nIGFjdGl2YXRpb24gc3RhdGUgZnJvbSBidWZmZXIgYXR0cmlidXRlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50QWN0aXZhdGlvbiA9IGFjdGl2YXRpb25TdGF0ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLSBVc2luZyBhY3RpdmF0aW9uIHN0YXRlIGZyb20gUmVhY3Qgc3RhdGUgKGZhbGxiYWNrKVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXNlIHRoZSByZWYgdmFsdWVzIHdoaWNoIHNob3VsZCBoYXZlIHRoZSBtb3N0IHVwLXRvLWRhdGUgc3RhdGVcbiAgICAgICAgICBjb25zdCBjdXJyZW50SW50ZW5kZWRDb25uZWN0b3JzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnRlbmRlZENvbm5lY3RvcnNSZWYuY3VycmVudCB8fCB7fSkpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNtZEhvcml6Q29ubmVjdG9yc1JlZi5jdXJyZW50IHx8IHt9KSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRGVidWcgY3VycmVudCBzdGF0ZSBiZWZvcmUgc2F2ZVxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ3VycmVudCBpbnRlbmRlZCBjb25uZWN0b3JzIGZyb20gYnV0dG9uIGhhbmRsZXI6XCIsIGN1cnJlbnRJbnRlbmRlZENvbm5lY3RvcnMpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiS2V5cyBpbiBpbnRlbmRlZCBjb25uZWN0b3JzOlwiLCBPYmplY3Qua2V5cyhjdXJyZW50SW50ZW5kZWRDb25uZWN0b3JzKSk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJBY3RpdmUgaW50ZW5kZWQgY29ubmVjdG9yczpcIiwgT2JqZWN0LmVudHJpZXMoY3VycmVudEludGVuZGVkQ29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgIT09IENPTk5FQ1RPUl9OT05FKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coXCJDdXJyZW50IGNtZCBob3JpeiBjb25uZWN0b3JzIGZyb20gYnV0dG9uIGhhbmRsZXI6XCIsIGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWN0aXZlIGNtZCBob3JpeiBjb25uZWN0b3JzOlwiLCBPYmplY3QuZW50cmllcyhjdXJyZW50Q21kSG9yaXpDb25uZWN0b3JzKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiA9PT0gMSkpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNhdmUgdGhlIHN0YXRlIHVzaW5nIGRpcmVjdCB2YWx1ZXNcbiAgICAgICAgICBzYXZlR3JpZFN0YXRlV2l0aERpcmVjdFZhbHVlcyhjdXJyZW50QWN0aXZhdGlvbiwgY3VycmVudEludGVuZGVkQ29ubmVjdG9ycywgY3VycmVudENtZEhvcml6Q29ubmVjdG9ycyk7XG4gICAgICAgIH0pLFxuICAgICAgICBsb2FkU3RhdGU6IGJ1dHRvbigoKSA9PiB7IFxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZCByZXF1ZXN0ZWRcIik7XG4gICAgICAgICAgY29uc3QganNvbklucHV0ID0gcHJvbXB0KFwiUGFzdGUgR3JpZCBTdGF0ZSBKU09OOlwiKTtcbiAgICAgICAgICBpZiAoIWpzb25JbnB1dCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWQgY2FuY2VsbGVkLlwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhOiBBZGphY2VuY3lMaXN0RGF0YSA9IEpTT04ucGFyc2UoanNvbklucHV0KTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJQYXJzZWQgSlNPTiBkYXRhOlwiLCBkYXRhKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIEluc3RlYWQgb2YgY2FsbGluZyB0aGUgbG9hZEdyaWRTdGF0ZSBmdW5jdGlvbiwgcHJvY2VzcyB0aGUgZGF0YSBkaXJlY3RseVxuICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBiYXNpYyBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgdHlwZW9mIGRhdGEuZ3JpZFdpZHRoICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgICAgdHlwZW9mIGRhdGEuZ3JpZEhlaWdodCAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICAgICFBcnJheS5pc0FycmF5KGRhdGEubm9kZXMpIHx8XG4gICAgICAgICAgICAgICAgICAhQXJyYXkuaXNBcnJheShkYXRhLmVkZ2VzKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBzdHJ1Y3R1cmUuXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHcmlkIGRpbWVuc2lvbnMgdG8gYmUgc2V0OlwiLCBkYXRhLmdyaWRXaWR0aCwgXCJ4XCIsIGRhdGEuZ3JpZEhlaWdodCk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm9kZXMgdG8gbG9hZDpcIiwgZGF0YS5ub2Rlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVkZ2VzIHRvIGxvYWQ6XCIsIGRhdGEuZWRnZXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAvLyAtLS0gVXNlIHRoZSBjYXB0dXJlZCBzZXRMZXZhQ29udHJvbCBmdW5jdGlvbiAtLS1cbiAgICAgICAgICAgICAgc2V0TGV2YUNvbnRyb2woeyBHUklEX1dJRFRIOiBkYXRhLmdyaWRXaWR0aCwgR1JJRF9IRUlHSFQ6IGRhdGEuZ3JpZEhlaWdodCB9KTtcblxuICAgICAgICAgICAgICAvLyAtLS0gUHJvY2VzcyBOb2RlcyBhbmQgRWRnZXMgLS0tXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gVXNlIGRhdGEuZ3JpZFdpZHRoL0hlaWdodCBoZXJlIGFzIGNvbnRyb2xzIG1pZ2h0IG5vdCBoYXZlIHVwZGF0ZWQgeWV0XG4gICAgICAgICAgICAgICAgICBjb25zdCBuZXdUb3RhbENpcmNsZXMgPSBkYXRhLmdyaWRXaWR0aCAqIGRhdGEuZ3JpZEhlaWdodDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2YXRpb25TdGF0ZSA9IG5ldyBGbG9hdDMyQXJyYXkobmV3VG90YWxDaXJjbGVzKS5maWxsKDAuMCk7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBhY3RpdmUgbm9kZXMuLi5cIik7XG4gICAgICAgICAgICAgICAgICBkYXRhLm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUueCA+PSAwICYmIG5vZGUueCA8IGRhdGEuZ3JpZFdpZHRoICYmIG5vZGUueSA+PSAwICYmIG5vZGUueSA8IGRhdGEuZ3JpZEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGdldEluZGV4KG5vZGUueSwgbm9kZS54LCBkYXRhLmdyaWRXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2YXRpb25TdGF0ZVtpbmRleF0gPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBY3RpdmF0aW5nIG5vZGUgYXQgKCR7bm9kZS54fSwgJHtub2RlLnl9KSwgaW5kZXg6ICR7aW5kZXh9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBOb2RlIG91dCBvZiBib3VuZHMgaWdub3JlZDogKCR7bm9kZS54fSwgJHtub2RlLnl9KWApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBjb25zdCBuZXdJbnRlbmRlZENvbm5lY3RvcnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NtZEhvcml6Q29ubmVjdG9yczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlByb2Nlc3NpbmcgZWRnZXMuLi5cIik7XG4gICAgICAgICAgICAgICAgICBkYXRhLmVkZ2VzLmZvckVhY2goZWRnZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvY2Vzc2luZyBlZGdlOlwiLCBlZGdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RvclR5cGU6IG51bWJlciA9IENPTk5FQ1RPUl9OT05FO1xuICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWRnZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpYWdfdGxfYnInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yVHlwZSA9IENPTk5FQ1RPUl9ESUFHX1RMX0JSO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGVkZ2UueCA+PSAwICYmIGVkZ2UueCA8IGRhdGEuZ3JpZFdpZHRoIC0gMSAmJiBlZGdlLnkgPj0gMCAmJiBlZGdlLnkgPCBkYXRhLmdyaWRIZWlnaHQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpYWdfYmxfdHInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yVHlwZSA9IENPTk5FQ1RPUl9ESUFHX0JMX1RSO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGVkZ2UueCA+PSAwICYmIGVkZ2UueCA8IGRhdGEuZ3JpZFdpZHRoIC0gMSAmJiBlZGdlLnkgPj0gMCAmJiBlZGdlLnkgPCBkYXRhLmdyaWRIZWlnaHQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvcml6X3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yVHlwZSA9IENPTk5FQ1RPUl9IT1JJWl9UO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGVkZ2UueCA+PSAwICYmIGVkZ2UueCA8IGRhdGEuZ3JpZFdpZHRoIC0gMSAmJiBlZGdlLnkgPj0gMCAmJiBlZGdlLnkgPCBkYXRhLmdyaWRIZWlnaHQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvcml6X2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yVHlwZSA9IENPTk5FQ1RPUl9IT1JJWl9CO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGVkZ2UueCA+PSAwICYmIGVkZ2UueCA8IGRhdGEuZ3JpZFdpZHRoIC0gMSAmJiBlZGdlLnkgPj0gMCAmJiBlZGdlLnkgPCBkYXRhLmdyaWRIZWlnaHQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NtZF9ob3Jpeic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHR5cGUgdXBkYXRlcyBhIGRpZmZlcmVudCBzdGF0ZSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBlZGdlLnggPj0gMCAmJiBlZGdlLnggPCBkYXRhLmdyaWRXaWR0aCAtIDEgJiYgZWRnZS55ID49IDAgJiYgZWRnZS55IDwgZGF0YS5ncmlkSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRIb3JpekNtZENvbm5lY3RvcktleShlZGdlLngsIGVkZ2UueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q21kSG9yaXpDb25uZWN0b3JzW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBZGRlZCBjbWRfaG9yaXogY29ubmVjdG9yIGF0ICgke2VkZ2UueH0sICR7ZWRnZS55fSkgd2l0aCBrZXkgJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBlZGdlIHR5cGUgaWdub3JlZDogJHtlZGdlLnR5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3NpZ24gdG8gaW50ZW5kZWRDb25uZWN0b3JzICphZnRlciogdGhlIHN3aXRjaCwgaWYgdmFsaWQgYW5kIGFwcGxpY2FibGVcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgZWRnZS50eXBlICE9PSAnY21kX2hvcml6JyAmJiBjb25uZWN0b3JUeXBlICE9PSBDT05ORUNUT1JfTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldENlbGxHcm91cEtleShlZGdlLngsIGVkZ2UueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW50ZW5kZWRDb25uZWN0b3JzW2tleV0gPSBjb25uZWN0b3JUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBZGRlZCAke2VkZ2UudHlwZX0gY29ubmVjdG9yIGF0ICgke2VkZ2UueH0sICR7ZWRnZS55fSkgd2l0aCBrZXkgJHtrZXl9IGFuZCB0eXBlIHZhbHVlICR7Y29ubmVjdG9yVHlwZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBFZGdlIG91dCBvZiBib3VuZHMgb3IgaW52YWxpZCBpZ25vcmVkOmAsIGVkZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXR0aW5nIGFjdGl2YXRpb24gc3RhdGUgd2l0aFwiLCBPYmplY3QudmFsdWVzKG5ld0FjdGl2YXRpb25TdGF0ZSkuZmlsdGVyKHYgPT4gdiA9PT0gMS4wKS5sZW5ndGgsIFwiYWN0aXZlIG5vZGVzXCIpO1xuICAgICAgICAgICAgICAgICAgc2V0QWN0aXZhdGlvblN0YXRlKG5ld0FjdGl2YXRpb25TdGF0ZSk7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBpbnRlbmRlZCBjb25uZWN0b3JzOlwiLCBPYmplY3Qua2V5cyhuZXdJbnRlbmRlZENvbm5lY3RvcnMpLmxlbmd0aCwgXCJjb25uZWN0b3JzXCIpO1xuICAgICAgICAgICAgICAgICAgc2V0SW50ZW5kZWRDb25uZWN0b3JzKG5ld0ludGVuZGVkQ29ubmVjdG9ycyk7XG4gICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJlZiBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgICBpbnRlbmRlZENvbm5lY3RvcnNSZWYuY3VycmVudCA9IHsgLi4ubmV3SW50ZW5kZWRDb25uZWN0b3JzIH07XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBjbWQtaG9yaXogY29ubmVjdG9yczpcIiwgT2JqZWN0LmtleXMobmV3Q21kSG9yaXpDb25uZWN0b3JzKS5sZW5ndGgsIFwiY29ubmVjdG9yc1wiKTtcbiAgICAgICAgICAgICAgICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyhuZXdDbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZWYgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgY21kSG9yaXpDb25uZWN0b3JzUmVmLmN1cnJlbnQgPSB7IC4uLm5ld0NtZEhvcml6Q29ubmVjdG9ycyB9O1xuXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdyaWQgc3RhdGUgbG9hZGVkIHN1Y2Nlc3NmdWxseS5cIik7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIC8vIFZlcmlmeSB0aGUgbG9hZGVkIHN0YXRlIGFmdGVyIGEgc2hvcnQgZGVsYXlcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVmVyaWZpY2F0aW9uIG9mIGxvYWRlZCBzdGF0ZTpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCItIEFjdGl2ZSBub2RlczpcIiwgT2JqZWN0LnZhbHVlcyhhY3RpdmF0aW9uU3RhdGUpLmZpbHRlcih2ID0+IHYgPT09IDEuMCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0gSW50ZW5kZWQgY29ubmVjdG9yczpcIiwgT2JqZWN0LmVudHJpZXMoaW50ZW5kZWRDb25uZWN0b3JzKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiAhPT0gQ09OTkVDVE9SX05PTkUpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCItIENtZC1ob3JpeiBjb25uZWN0b3JzOlwiLCBPYmplY3QuZW50cmllcyhjbWRIb3JpekNvbm5lY3RvcnMpLmZpbHRlcigoW18sIHZdKSA9PiB2ID09PSAxKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIG9yIHByb2Nlc3MgSlNPTjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICBhbGVydChgRXJyb3I6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuICAgIC8vIERlYnVnIGNvbnRyb2xzIHdpbGwgYmUgYWRkZWQgbGF0ZXIgd2l0aCBhbm90aGVyIHVzZUNvbnRyb2xzIGNhbGxcbiAgfSksIHtcbiAgICAgIC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgYXJyYXkgaWYgY29udHJvbHMgZGVwZW5kIG9uIGV4dGVybmFsIHN0YXRlL3Byb3BzXG4gICAgICAvLyBGb3IgdGhpcyBjYXNlLCBpdCBzZWVtcyBmaW5lIHdpdGhvdXQsIGJ1dCBrZWVwIGluIG1pbmQgZm9yIGNvbXBsZXggc2NlbmFyaW9zXG4gIH0pO1xuXG4gIC8vIERlcml2ZWQgdmFsdWVzIGNhbGN1bGF0aW9uIC0gdXNlICdjb250cm9scycgbm93XG4gIGNvbnN0IHsgVE9UQUxfQ0lSQ0xFUywgY2VudGVyT2Zmc2V0LCBwbGFuZVdpZHRoLCBwbGFuZUhlaWdodCB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBjb25zdCB0b3RhbCA9IGNvbnRyb2xzLkdSSURfV0lEVEggKiBjb250cm9scy5HUklEX0hFSUdIVDtcbiAgICAgIGNvbnN0IG9mZnNldCA9IGdldENlbnRlck9mZnNldChjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgRklYRURfU1BBQ0lORyk7XG4gICAgICBjb25zdCB3aWR0aCA9IChjb250cm9scy5HUklEX1dJRFRIID4gMSA/IChjb250cm9scy5HUklEX1dJRFRIIC0gMSkgKiBGSVhFRF9TUEFDSU5HIDogMCkgKyAoY29udHJvbHMudmlzdWFsU2NhbGUgKiBCQVNFX1JBRElVU19BICogMik7XG4gICAgICBjb25zdCBoZWlnaHQgPSAoY29udHJvbHMuR1JJRF9IRUlHSFQgPiAxID8gKGNvbnRyb2xzLkdSSURfSEVJR0hUIC0gMSkgKiBGSVhFRF9TUEFDSU5HIDogMCkgKyAoY29udHJvbHMudmlzdWFsU2NhbGUgKiBCQVNFX1JBRElVU19BICogMik7XG4gICAgICByZXR1cm4geyBUT1RBTF9DSVJDTEVTOiB0b3RhbCwgY2VudGVyT2Zmc2V0OiBvZmZzZXQsIHBsYW5lV2lkdGg6IHdpZHRoLCBwbGFuZUhlaWdodDogaGVpZ2h0IH07XG4gIH0sIFtjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgY29udHJvbHMudmlzdWFsU2NhbGVdKTsgLy8gVXBkYXRlIGRlcGVuZGVuY2llc1xuXG4gIC8vIFJlZnMgZm9yIG1lc2ggYW5kIG1hdGVyaWFsXG4gIGNvbnN0IG1lc2hSZWYgPSB1c2VSZWY8VEhSRUUuSW5zdGFuY2VkTWVzaD4obnVsbCEpO1xuICBjb25zdCBtYXRlcmlhbFJlZiA9IHVzZVJlZjxhbnk+KG51bGwhKTsgLy8gVXNlICdhbnknIG9yIHNwZWNpZmljIHR5cGUgZm9yIENpcmNsZU1hdGVyaWFsXG4gIGNvbnN0IGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYgPSB1c2VSZWY8VEhSRUUuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlPihudWxsISk7XG4gIGNvbnN0IGNvbm5lY3Rvck1hdGVyaWFsUmVmID0gdXNlUmVmPGFueT4obnVsbCEpOyAvLyBSZWYgZm9yIGNvbm5lY3RvciBtYXRlcmlhbFxuICBjb25zdCBjbWRIb3Jpek1hdGVyaWFsUmVmID0gdXNlUmVmPGFueT4obnVsbCk7XG4gIFxuICAvLyBSZWZzIHRvIHRyYWNrIGN1cnJlbnQgc3RhdGVcbiAgY29uc3QgaW50ZW5kZWRDb25uZWN0b3JzUmVmID0gdXNlUmVmPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KTtcbiAgY29uc3QgY21kSG9yaXpDb25uZWN0b3JzUmVmID0gdXNlUmVmPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KTtcblxuICAvLyA9PT0gRmVhdHVyZSAzOiBDaXJjbGUgQWN0aXZhdGlvbiBTdGF0ZSA9PT1cbiAgY29uc3QgW2FjdGl2YXRpb25TdGF0ZSwgc2V0QWN0aXZhdGlvblN0YXRlXSA9IHVzZVN0YXRlPEZsb2F0MzJBcnJheT4oKCkgPT4gXG4gICAgbmV3IEZsb2F0MzJBcnJheShUT1RBTF9DSVJDTEVTKS5maWxsKDAuMCkgLy8gMC4wIGluYWN0aXZlLCAxLjAgYWN0aXZlXG4gICk7XG5cbiAgLy8gTmV3OiBBZGQgaG9yaXpvbnRhbCBjbWQtY2xpY2sgY29ubmVjdG9yIHN0YXRlXG4gIGNvbnN0IFtjbWRIb3JpekNvbm5lY3RvcnMsIHNldENtZEhvcml6Q29ubmVjdG9yc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBudW1iZXI+Pih7fSk7XG5cbiAgLy8gPT09IEZlYXR1cmUgODogQ29ubmVjdG9yIEludGVyYWN0aW9uIFN0YXRlIGFuZCBIZWxwZXJzIChNb3ZlZCBVUCkgPT09XG4gIGNvbnN0IFtpbnRlbmRlZENvbm5lY3RvcnMsIHNldEludGVuZGVkQ29ubmVjdG9yc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBudW1iZXI+Pih7fSk7XG5cbiAgLy8gSGVscGVyIHRvIGdldCB0aGUgaW50ZW5kZWQgY29ubmVjdG9yIGZvciBhIDJ4MiBjZWxsIGdyb3VwIChNb3ZlZCBVUClcbiAgY29uc3QgZ2V0SW50ZW5kZWRDb25uZWN0b3IgPSB1c2VDYWxsYmFjaygoY2VsbFg6IG51bWJlciwgY2VsbFk6IG51bWJlcikgPT4ge1xuICAgIGlmIChjZWxsWCA8IDAgfHwgY2VsbFggPj0gY29udHJvbHMuR1JJRF9XSURUSCAtIDEgfHwgY2VsbFkgPCAwIHx8IGNlbGxZID49IGNvbnRyb2xzLkdSSURfSEVJR0hUIC0gMSkge1xuICAgICAgICByZXR1cm4gQ09OTkVDVE9SX05PTkU7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGdldENlbGxHcm91cEtleShjZWxsWCwgY2VsbFkpO1xuICAgIHJldHVybiBpbnRlbmRlZENvbm5lY3RvcnNba2V5XSB8fCBDT05ORUNUT1JfTk9ORTtcbiAgfSwgW2ludGVuZGVkQ29ubmVjdG9ycywgY29udHJvbHMuR1JJRF9XSURUSCwgY29udHJvbHMuR1JJRF9IRUlHSFRdKTtcblxuICAvLyBTdGF0ZSBuZWVkcyB0byBiZSByZXNldCBpZiBUT1RBTF9DSVJDTEVTIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUmVzZXR0aW5nIGFjdGl2YXRpb24gc3RhdGUgZHVlIHRvIGdyaWQgc2l6ZSBjaGFuZ2UnKTtcbiAgICBzZXRBY3RpdmF0aW9uU3RhdGUobmV3IEZsb2F0MzJBcnJheShUT1RBTF9DSVJDTEVTKS5maWxsKDAuMCkpO1xuICAgIHNldEludGVuZGVkQ29ubmVjdG9ycyh7fSk7IC8vIEFsc28gcmVzZXQgaW50ZW5kZWQgY29ubmVjdG9yc1xuICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyh7fSk7IC8vIEFsc28gcmVzZXQgY21kLWhvcml6IGNvbm5lY3RvcnNcbiAgICBcbiAgICAvLyBBbHNvIHJlc2V0IHRoZSByZWZzXG4gICAgaW50ZW5kZWRDb25uZWN0b3JzUmVmLmN1cnJlbnQgPSB7fTtcbiAgICBjbWRIb3JpekNvbm5lY3RvcnNSZWYuY3VycmVudCA9IHt9O1xuICB9LCBbVE9UQUxfQ0lSQ0xFU10pO1xuXG4gIC8vIFVwZGF0ZSBidWZmZXIgYXR0cmlidXRlIHdoZW4gc3RhdGUgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY3RpdmF0aW9uQXR0cmlidXRlUmVmLmN1cnJlbnQpIHtcbiAgICAgIGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYuY3VycmVudC5hcnJheSA9IGFjdGl2YXRpb25TdGF0ZTtcbiAgICAgIGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYuY3VycmVudC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAvLyBjb25zb2xlLmxvZygnVXBkYXRlZCBhY3RpdmF0aW9uIGJ1ZmZlciBhdHRyaWJ1dGUuJyk7IC8vIExlc3Mgbm9pc3kgbG9nXG4gICAgfVxuICB9LCBbYWN0aXZhdGlvblN0YXRlXSk7XG5cbiAgLy8gPT09IEZlYXR1cmUgMjogU3RhdGljIENpcmNsZSBSZW5kZXJpbmcgPT09XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFtZXNoUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIC8vIENhbGN1bGF0ZSBhbmQgc2V0IGluc3RhbmNlIG1hdHJpY2VzXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IFRPVEFMX0NJUkNMRVM7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHsgcm93LCBjb2wgfSA9IGdldENvb3JkcyhpbmRleCwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgICBjb25zdCB7IHgsIHkgfSA9IGdldFdvcmxkUG9zaXRpb24oXG4gICAgICAgIHJvdyxcbiAgICAgICAgY29sLFxuICAgICAgICBjb250cm9scy5HUklEX1dJRFRILFxuICAgICAgICBjb250cm9scy5HUklEX0hFSUdIVCxcbiAgICAgICAgRklYRURfU1BBQ0lORyxcbiAgICAgICAgY2VudGVyT2Zmc2V0XG4gICAgICApO1xuICAgICAgZHVtbXkucG9zaXRpb24uc2V0KHgsIHksIDApOyAvLyBaPTAgZm9yIGNpcmNsZXNcbiAgICAgICAvLyBSZXRyaWV2ZSBleGlzdGluZyBzY2FsZS9yb3RhdGlvbiBiZWZvcmUgc2V0dGluZyBwb3NpdGlvbiB0byBhdm9pZCBvdmVyd3JpdGluZyBzY2FsZSBlZmZlY3RcbiAgICAgIGNvbnN0IGN1cnJlbnRNYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgICAgbWVzaFJlZi5jdXJyZW50LmdldE1hdHJpeEF0KGluZGV4LCBjdXJyZW50TWF0cml4KTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgICAgY29uc3Qgc2NhbGVWZWMgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgY3VycmVudE1hdHJpeC5kZWNvbXBvc2UocG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlVmVjKTtcbiAgICAgIC8vIFVwZGF0ZSBvbmx5IHBvc2l0aW9uXG4gICAgICBwb3NpdGlvbi5zZXQoeCwgeSwgMCk7XG4gICAgICBkdW1teS5tYXRyaXguY29tcG9zZShwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGVWZWMpOyAvLyBSZWNvbXBvc2Ugd2l0aCBvcmlnaW5hbCBzY2FsZS9yb3RhdGlvblxuICAgICAgbWVzaFJlZi5jdXJyZW50LnNldE1hdHJpeEF0KGluZGV4LCBkdW1teS5tYXRyaXgpO1xuICAgIH1cbiAgICBtZXNoUmVmLmN1cnJlbnQuaW5zdGFuY2VNYXRyaXgubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgLy8gY29uc29sZS5sb2coYFVwZGF0ZWQgJHtUT1RBTF9DSVJDTEVTfSBpbnN0YW5jZSBtYXRyaWNlcyAocG9zaXRpb24pLmApO1xuXG4gIH0sIFtjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgRklYRURfU1BBQ0lORywgVE9UQUxfQ0lSQ0xFUywgY2VudGVyT2Zmc2V0XSk7XG5cbiAgLy8gVXBkYXRlIHNoYWRlciB1bmlmb3JtcyB3aGVuIHNjYWxlZCByYWRpaSBjaGFuZ2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWF0ZXJpYWxSZWYuY3VycmVudCkge1xuICAgICAgLy8gU2hhZGVyIGV4cGVjdHMgcmFkaWkgcmVsYXRpdmUgdG8gcGxhbmUgc2l6ZSAoMC4wIHRvIDAuNSByYW5nZSBpZiBwbGFuZSBpcyBzaXplIDEpXG4gICAgICAvLyBMZXQncyB1c2UgcGxhbmUgc2l6ZSAxIGFuZCBzY2FsZSByYWRpaSB0byAwLjAtMC41IHJhbmdlIGZvciBzaGFkZXIuXG4gICAgICBtYXRlcmlhbFJlZi5jdXJyZW50LnVuaWZvcm1zLnVfcmFkaXVzQS52YWx1ZSA9IEJBU0VfUkFESVVTX0E7IC8vIFVzZSBiYXNlIHJhZGl1cyByZWxhdGl2ZSB0byBwbGFuZSBzaXplIDFcbiAgICAgIG1hdGVyaWFsUmVmLmN1cnJlbnQudW5pZm9ybXMudV9yYWRpdXNCLnZhbHVlID0gQkFTRV9SQURJVVNfQjsgLy8gVXNlIGJhc2UgcmFkaXVzIHJlbGF0aXZlIHRvIHBsYW5lIHNpemUgMVxuICAgICAgLy8gU2NhbGUgdGhlIHdob2xlIGluc3RhbmNlIGluc3RlYWQgdG8gbWF0Y2ggc3BhY2luZ1xuICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGVkIG1hdGVyaWFsIHJhZGlpIHVuaWZvcm1zOiBBPSR7QkFTRV9SQURJVVNfQX0sIEI9JHtCQVNFX1JBRElVU19CfWApO1xuICAgIH1cbiAgfSwgW10pOyAvLyBEZXBlbmQgb24gc2NhbGVkIHJhZGlpLCB0aG91Z2ggdXNpbmcgYmFzZSBmb3IgdW5pZm9ybSBub3dcblxuIC8vIEFkanVzdCBpbnN0YW5jZSBzY2FsZSBiYXNlZCBvbiBzcGFjaW5nXG4gdXNlRWZmZWN0KCgpID0+IHtcbiAgaWYgKCFtZXNoUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgY29uc3Qgc2NhbGUgPSBjb250cm9scy52aXN1YWxTY2FsZTsgLy8gVXNlIHRoZSBsZXZhIGNvbnRyb2wgdmFsdWUgZm9yIHNjYWxlXG4gIGNvbnNvbGUubG9nKGBVcGRhdGluZyBpbnN0YW5jZSBzY2FsZXMgdG86ICR7c2NhbGUudG9GaXhlZCgyKX1gKTtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IFRPVEFMX0NJUkNMRVM7IGluZGV4KyspIHtcbiAgICAgIG1lc2hSZWYuY3VycmVudC5nZXRNYXRyaXhBdChpbmRleCwgdGVtcE1hdHJpeCk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHRlbXBWZWMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRlbXBNYXRyaXgpO1xuICAgICAgY29uc3QgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVJvdGF0aW9uTWF0cml4KHRlbXBNYXRyaXgpO1xuICAgICAgLy8gVXBkYXRlIG9ubHkgc2NhbGVcbiAgICAgIGNvbnN0IHNjYWxlVmVjID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5zZXQoc2NhbGUsIHNjYWxlLCAxKTtcbiAgICAgIFxuICAgICAgdGVtcE1hdHJpeC5jb21wb3NlKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZVZlYyk7XG4gICAgICBtZXNoUmVmLmN1cnJlbnQuc2V0TWF0cml4QXQoaW5kZXgsIHRlbXBNYXRyaXgpO1xuICB9XG4gIG1lc2hSZWYuY3VycmVudC5pbnN0YW5jZU1hdHJpeC5uZWVkc1VwZGF0ZSA9IHRydWU7XG59LCBbY29udHJvbHMudmlzdWFsU2NhbGUsIFRPVEFMX0NJUkNMRVNdKTsgLy8gRGVwZW5kcyBvbiBzY2FsZSBjb250cm9sIGFuZCBjb3VudFxuXG4gIC8vID09PSBGZWF0dXJlIDQ6IENpcmNsZSBJbnRlcmFjdGlvbiAoTm93IHVzZXMgaGVscGVycyBkZWZpbmVkIGFib3ZlKSA9PT1cbiAgY29uc3QgaGFuZGxlQ2lyY2xlQ2xpY2sgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IGFueSkgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChldmVudC5pbnN0YW5jZUlkID09PSB1bmRlZmluZWQgfHwgIW1lc2hSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgY29uc3QgaW5kZXggPSBldmVudC5pbnN0YW5jZUlkO1xuICAgIGNvbnN0IHsgcm93OiB5LCBjb2w6IHggfSA9IGdldENvb3JkcyhpbmRleCwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0NpcmNsZSBjbGlja2VkOicsIHtcbiAgICAgIGluZGV4LFxuICAgICAgeCwgeSxcbiAgICAgIGlzQ21kQ2xpY2s6IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSxcbiAgICAgIHBvaW50OiBldmVudC5wb2ludCxcbiAgICAgIGN1cnJlbnRTdGF0ZTogYWN0aXZhdGlvblN0YXRlW2luZGV4XVxuICAgIH0pO1xuXG4gICAgLy8gR2V0IHRoZSBjZW50ZXIgb2YgdGhlIGNsaWNrZWQgaW5zdGFuY2VcbiAgICBtZXNoUmVmLmN1cnJlbnQuZ2V0TWF0cml4QXQoaW5kZXgsIHRlbXBNYXRyaXgpO1xuICAgIGNvbnN0IGluc3RhbmNlQ2VudGVyID0gdGVtcFZlYy5zZXRGcm9tTWF0cml4UG9zaXRpb24odGVtcE1hdHJpeCk7XG5cbiAgICAvLyBDYWxjdWxhdGUgZGlzdGFuY2UgZnJvbSBjbGljayBwb2ludCB0byBpbnN0YW5jZSBjZW50ZXJcbiAgICBjb25zdCBkaXN0RnJvbUNlbnRlciA9IGV2ZW50LnBvaW50LmRpc3RhbmNlVG8oaW5zdGFuY2VDZW50ZXIpO1xuXG4gICAgLy8gR2V0IHRoZSBDVVJSRU5UIHdvcmxkLXNwYWNlIGlubmVyIHJhZGl1c1xuICAgIGNvbnN0IGN1cnJlbnRJbm5lclJhZGl1cyA9IEJBU0VfUkFESVVTX0IgKiBjb250cm9scy52aXN1YWxTY2FsZTsgXG5cbiAgICBjb25zb2xlLmxvZygnQ2xpY2sgZGV0YWlsczonLCB7XG4gICAgICBkaXN0RnJvbUNlbnRlcixcbiAgICAgIGN1cnJlbnRJbm5lclJhZGl1cyxcbiAgICAgIGlzSW5zaWRlOiBkaXN0RnJvbUNlbnRlciA8PSBjdXJyZW50SW5uZXJSYWRpdXNcbiAgICB9KTtcblxuICAgIC8vIENoZWNrIGlmIGNsaWNrIGlzIGluc2lkZSB0aGUgaW5uZXIgY2lyY2xlXG4gICAgaWYgKGRpc3RGcm9tQ2VudGVyIDw9IGN1cnJlbnRJbm5lclJhZGl1cykge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGNtZC9jdHJsIGNsaWNrXG4gICAgICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgICAgIC8vIENoZWNrIGNvbmRpdGlvbnMgZm9yIGhvcml6b250YWwgY29ubmVjdG9yXG4gICAgICAgIGNvbnN0IHJpZ2h0SW5kZXggPSBnZXRJbmRleCh5LCB4ICsgMSwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgICAgIGNvbnN0IGNhbkNvbm5lY3RCYXNlID0geCA8IGNvbnRyb2xzLkdSSURfV0lEVEggLSAxICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb25TdGF0ZVtpbmRleF0gPT09IDEuMCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uU3RhdGVbcmlnaHRJbmRleF0gPT09IDEuMDtcblxuICAgICAgICAvLyAtLS0gTkVXOiBDaGVjayBmb3IgYmxvY2tpbmcgZGlhZ29uYWwgY29ubmVjdG9ycyAtLS1cbiAgICAgICAgY29uc3QgY29ubmVjdG9yQmVsb3cgPSBnZXRJbnRlbmRlZENvbm5lY3Rvcih4LCB5IC0gMSk7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RvckFkamFjZW50ID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoeCwgeSk7XG4gICAgICAgIGNvbnN0IGlzQmxvY2tlZEJ5RGlhZ29uYWwgPSBcbiAgICAgICAgICAoY29ubmVjdG9yQmVsb3cgPT09IENPTk5FQ1RPUl9ESUFHX1RMX0JSIHx8IGNvbm5lY3RvckJlbG93ID09PSBDT05ORUNUT1JfRElBR19CTF9UUikgfHxcbiAgICAgICAgICAoY29ubmVjdG9yQWRqYWNlbnQgPT09IENPTk5FQ1RPUl9ESUFHX1RMX0JSIHx8IGNvbm5lY3RvckFkamFjZW50ID09PSBDT05ORUNUT1JfRElBR19CTF9UUik7XG4gICAgICAgIC8vIC0tLSBFbmQgTkVXIGNoZWNrIC0tLVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGNtZC1jbGljayBvbiBjaXJjbGU6Jywge1xuICAgICAgICAgIHgsIHksXG4gICAgICAgICAgcmlnaHRJbmRleCxcbiAgICAgICAgICBsZWZ0QWN0aXZlOiBhY3RpdmF0aW9uU3RhdGVbaW5kZXhdID09PSAxLjAsXG4gICAgICAgICAgcmlnaHRBY3RpdmU6IHggPCBjb250cm9scy5HUklEX1dJRFRIIC0gMSA/IGFjdGl2YXRpb25TdGF0ZVtyaWdodEluZGV4XSA9PT0gMS4wIDogZmFsc2UsXG4gICAgICAgICAgY2FuQ29ubmVjdEJhc2UsXG4gICAgICAgICAgaXNCbG9ja2VkQnlEaWFnb25hbCwgLy8gTG9nIHRoZSBibG9ja2luZyBzdGF0dXNcbiAgICAgICAgICBjb25uZWN0b3JCZWxvdyxcbiAgICAgICAgICBjb25uZWN0b3JBZGphY2VudFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBPbmx5IGFsbG93IHRvZ2dsZSBpZiBiYXNlIGNvbmRpdGlvbnMgbWV0IEFORCBub3QgYmxvY2tlZCBieSBkaWFnb25hbFxuICAgICAgICBpZiAoY2FuQ29ubmVjdEJhc2UgJiYgIWlzQmxvY2tlZEJ5RGlhZ29uYWwpIHsgXG4gICAgICAgICAgY29uc3QgY29ubmVjdG9yS2V5ID0gZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoeCwgeSk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1RvZ2dsaW5nIGhvcml6b250YWwgY29ubmVjdG9yIChhbGxvd2VkKTonLCB7IGtleTogY29ubmVjdG9yS2V5IH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyhwcmV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcHJldltjb25uZWN0b3JLZXldID8gMCA6IDE7XG4gICAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHsgLi4ucHJldiwgW2Nvbm5lY3RvcktleV06IG5ld1ZhbHVlIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVmIHRvIHRyYWNrIHRoZSBsYXRlc3Qgc3RhdGVcbiAgICAgICAgICAgIGNtZEhvcml6Q29ubmVjdG9yc1JlZi5jdXJyZW50ID0gbmV3U3RhdGU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGVkIGNtZC1ob3JpeiBjb25uZWN0b3Igc3RhdGU6JywgeyBcbiAgICAgICAgICAgICAga2V5OiBjb25uZWN0b3JLZXksIFxuICAgICAgICAgICAgICBuZXdWYWx1ZSwgXG4gICAgICAgICAgICAgIGFsbENvbm5lY3RvcnM6IG5ld1N0YXRlLFxuICAgICAgICAgICAgICBrZXlzOiBPYmplY3Qua2V5cyhuZXdTdGF0ZSksXG4gICAgICAgICAgICAgIGFjdGl2ZUNvbm5lY3RvcnM6IE9iamVjdC5lbnRyaWVzKG5ld1N0YXRlKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiA9PT0gMSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybjsgLy8gRXhpdCBhZnRlciBoYW5kbGluZyBjbWQtY2xpY2tcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgY29uc29sZS5sb2coJ0NtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciBibG9ja2VkIG9yIGJhc2UgY29uZGl0aW9ucyBub3QgbWV0LicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGJsb2NrZWQgb3IgY2FuJ3QgY29ubmVjdCwgZmFsbCB0aHJvdWdoIHRvIHJlZ3VsYXIgY2xpY2s/IFxuICAgICAgICAvLyBPciBtYXliZSBkbyBub3RoaW5nIG9uIGNtZC1jbGljayBpZiBibG9ja2VkPyBMZXQncyBkbyBub3RoaW5nIGZvciBub3cuXG4gICAgICAgIHJldHVybjsgLy8gRXhwbGljaXRseSBkbyBub3RoaW5nIG1vcmUgaWYgY21kLWNsaWNrIHdhcyBibG9ja2VkIG9yIGludmFsaWRcbiAgICAgIH1cblxuICAgICAgLy8gUmVndWxhciBjbGljayBiZWhhdmlvciAodG9nZ2xlIGFjdGl2YXRpb24pIC0gb25seSBydW5zIGlmIG5vdCBhIGhhbmRsZWQgY21kLWNsaWNrXG4gICAgICBjb25zb2xlLmxvZygnVG9nZ2xpbmcgY2lyY2xlIGFjdGl2YXRpb24gKHJlZ3VsYXIgY2xpY2spJyk7XG4gICAgICBzZXRBY3RpdmF0aW9uU3RhdGUoY3VycmVudCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3IEZsb2F0MzJBcnJheShjdXJyZW50KTtcbiAgICAgICAgbmV3U3RhdGVbaW5kZXhdID0gbmV3U3RhdGVbaW5kZXhdID09PSAxLjAgPyAwLjAgOiAxLjA7XG4gICAgICAgIGNvbnNvbGUubG9nKCdOZXcgYWN0aXZhdGlvbiBzdGF0ZSBmb3IgY2lyY2xlOicsIHtcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBvbGRWYWx1ZTogY3VycmVudFtpbmRleF0sXG4gICAgICAgICAgbmV3VmFsdWU6IG5ld1N0YXRlW2luZGV4XVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbWVzaFJlZiwgc2V0QWN0aXZhdGlvblN0YXRlLCBjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy52aXN1YWxTY2FsZSwgc2V0Q21kSG9yaXpDb25uZWN0b3JzLCBjbWRIb3JpekNvbm5lY3RvcnMsIGludGVuZGVkQ29ubmVjdG9ycywgY29udHJvbHMuR1JJRF9IRUlHSFRdKTsgLy8gRGVwZW5kZW5jaWVzIGFyZSBjb3JyZWN0IG5vd1xuXG4gIC8vID09PSBGZWF0dXJlIDU6IFN0YXRlIERhdGEgVGV4dHVyZSA9PT1cbiAgY29uc3Qgc3RhdGVUZXh0dXJlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYENyZWF0aW5nIHN0YXRlIHRleHR1cmU6ICR7Y29udHJvbHMuR1JJRF9XSURUSH14JHtjb250cm9scy5HUklEX0hFSUdIVH1gKTtcbiAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlKFxuICAgICAgbmV3IEZsb2F0MzJBcnJheShUT1RBTF9DSVJDTEVTKS5maWxsKDAuMCksIC8vIEluaXRpYWwgZGF0YSBidWZmZXJcbiAgICAgIGNvbnRyb2xzLkdSSURfV0lEVEgsXG4gICAgICBjb250cm9scy5HUklEX0hFSUdIVCxcbiAgICAgIFRIUkVFLlJlZEZvcm1hdCwgLy8gU3RvcmUgYWN0aXZhdGlvbiAoMC4wIG9yIDEuMCkgaW4gUmVkIGNoYW5uZWxcbiAgICAgIFRIUkVFLkZsb2F0VHlwZVxuICAgICk7XG4gICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyOyAvLyBDcnVjaWFsOiBObyBpbnRlcnBvbGF0aW9uXG4gICAgdGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOyAvLyBJbml0aWFsIHVwZGF0ZSBuZWVkZWRcbiAgICByZXR1cm4gdGV4dHVyZTtcbiAgfSwgW2NvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBUT1RBTF9DSVJDTEVTXSk7IC8vIFJlY3JlYXRlIHRleHR1cmUgaWYgZ3JpZCBkaW1lbnNpb25zIGNoYW5nZVxuXG4gIC8vIFVwZGF0ZSB0ZXh0dXJlIGRhdGEgd2hlbiBhY3RpdmF0aW9uU3RhdGUgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZVRleHR1cmUgJiYgYWN0aXZhdGlvblN0YXRlLmxlbmd0aCA9PT0gc3RhdGVUZXh0dXJlLmltYWdlLmRhdGEubGVuZ3RoKSB7XG4gICAgICBzdGF0ZVRleHR1cmUuaW1hZ2UuZGF0YS5zZXQoYWN0aXZhdGlvblN0YXRlKTsgLy8gVXBkYXRlIHRleHR1cmUgZGF0YSBkaXJlY3RseVxuICAgICAgc3RhdGVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gTWFyayBmb3IgR1BVIHVwbG9hZFxuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgc3RhdGUgdGV4dHVyZSBkYXRhLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1NraXBwaW5nIHRleHR1cmUgdXBkYXRlOiBNaXNtYXRjaCBiZXR3ZWVuIHN0YXRlIGFycmF5IGFuZCB0ZXh0dXJlIHNpemUgb3IgdGV4dHVyZSBub3QgcmVhZHkuJyk7XG4gICAgfVxuICB9LCBbYWN0aXZhdGlvblN0YXRlLCBzdGF0ZVRleHR1cmVdKTsgLy8gRGVwZW5kIG9uIGFjdGl2YXRpb24gc3RhdGUgYW5kIHRoZSB0ZXh0dXJlIGl0c2VsZlxuXG4gIC8vID09PSBGZWF0dXJlIDg6IENvbm5lY3RvciBQbGFuZSBJbnRlcmFjdGlvbiAoTW92ZWQgRE9XTiwgdXNlcyBoZWxwZXJzIGRlZmluZWQgYWJvdmUpID09PVxuICBjb25zdCBoYW5kbGVDb25uZWN0b3JDbGljayA9IHVzZUNhbGxiYWNrKChldmVudDogYW55KSA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc29sZS5sb2coJ0Nvbm5lY3RvciBwbGFuZSBjbGlja2VkOicsIHtcbiAgICAgIHBvaW50OiBldmVudC5wb2ludCxcbiAgICAgIGlzQ21kQ2xpY2s6IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEdldCB0aGUgY2xpY2sgcG9pbnQgaW4gd29ybGQgc3BhY2VcbiAgICBjb25zdCBjbGlja1BvaW50ID0gZXZlbnQucG9pbnQ7XG4gICAgXG4gICAgLy8gRmlyc3QsIGNoZWNrIGlmIHRoZSBjbGljayBpcyBvbiBhIGNpcmNsZVxuICAgIC8vIERldGVybWluZSB3aGljaCBncmlkIGNlbGwgdGhpcyBwb2ludCBpcyBjbG9zZXN0IHRvXG4gICAgY29uc3QgZ3JpZFggPSBNYXRoLnJvdW5kKChjbGlja1BvaW50LnggLSBjZW50ZXJPZmZzZXQueCkgLyBGSVhFRF9TUEFDSU5HKTtcbiAgICBjb25zdCBncmlkWSA9IE1hdGgucm91bmQoKGNsaWNrUG9pbnQueSAtIGNlbnRlck9mZnNldC55KSAvIEZJWEVEX1NQQUNJTkcpO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHRoaXMgY2VsbCBpcyB3aXRoaW4gZ3JpZCBib3VuZHNcbiAgICBpZiAoZ3JpZFggPj0gMCAmJiBncmlkWCA8IGNvbnRyb2xzLkdSSURfV0lEVEggJiYgZ3JpZFkgPj0gMCAmJiBncmlkWSA8IGNvbnRyb2xzLkdSSURfSEVJR0hUKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGNlbGwgY2VudGVyIGluIHdvcmxkIHNwYWNlXG4gICAgICBjb25zdCBjZWxsQ2VudGVyID0gZ2V0V29ybGRQb3NpdGlvbihncmlkWSwgZ3JpZFgsIGNvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgZGlzdGFuY2UgZnJvbSBjbGljayB0byBjZWxsIGNlbnRlclxuICAgICAgY29uc3QgZGlzdEZyb21DZW50ZXIgPSBNYXRoLnNxcnQoXG4gICAgICAgIE1hdGgucG93KGNsaWNrUG9pbnQueCAtIGNlbGxDZW50ZXIueCwgMikgKyBcbiAgICAgICAgTWF0aC5wb3coY2xpY2tQb2ludC55IC0gY2VsbENlbnRlci55LCAyKVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgY2xpY2sgaXMgaW5zaWRlIHRoZSBpbm5lciBjaXJjbGVcbiAgICAgIGNvbnN0IGN1cnJlbnRJbm5lclJhZGl1cyA9IEJBU0VfUkFESVVTX0IgKiBjb250cm9scy52aXN1YWxTY2FsZTtcbiAgICAgIGlmIChkaXN0RnJvbUNlbnRlciA8PSBjdXJyZW50SW5uZXJSYWRpdXMpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIGNsaWNrIG9uIGEgY2lyY2xlIC0gdG9nZ2xlIGl0cyBhY3RpdmF0aW9uIHN0YXRlXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZ2V0SW5kZXgoZ3JpZFksIGdyaWRYLCBjb250cm9scy5HUklEX1dJRFRIKTtcblxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgY21kL2N0cmwgY2xpY2sgYW5kIHRoZXJlJ3MgYW4gYWN0aXZlIGNpcmNsZSB0byB0aGUgcmlnaHRcbiAgICAgICAgaWYgKChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpICYmIGdyaWRYIDwgY29udHJvbHMuR1JJRF9XSURUSCAtIDEpIHtcbiAgICAgICAgICBjb25zdCByaWdodEluZGV4ID0gZ2V0SW5kZXgoZ3JpZFksIGdyaWRYICsgMSwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgICAgICAgY29uc3QgbGVmdEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVtpbmRleF0gPT09IDEuMDtcbiAgICAgICAgICBjb25zdCByaWdodEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVtyaWdodEluZGV4XSA9PT0gMS4wO1xuICAgICAgICAgIGNvbnN0IGNhbkNvbm5lY3RCYXNlID0gbGVmdEFjdGl2ZSAmJiByaWdodEFjdGl2ZTtcblxuICAgICAgICAgIC8vIC0tLSBORVc6IENoZWNrIGZvciBibG9ja2luZyBkaWFnb25hbCBjb25uZWN0b3JzIC0tLVxuICAgICAgICAgIGNvbnN0IGNvbm5lY3RvckJlbG93ID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoZ3JpZFgsIGdyaWRZIC0gMSk7XG4gICAgICAgICAgY29uc3QgY29ubmVjdG9yQWRqYWNlbnQgPSBnZXRJbnRlbmRlZENvbm5lY3RvcihncmlkWCwgZ3JpZFkpO1xuICAgICAgICAgIGNvbnN0IGlzQmxvY2tlZEJ5RGlhZ29uYWwgPSBcbiAgICAgICAgICAgIChjb25uZWN0b3JCZWxvdyA9PT0gQ09OTkVDVE9SX0RJQUdfVExfQlIgfHwgY29ubmVjdG9yQmVsb3cgPT09IENPTk5FQ1RPUl9ESUFHX0JMX1RSKSB8fFxuICAgICAgICAgICAgKGNvbm5lY3RvckFkamFjZW50ID09PSBDT05ORUNUT1JfRElBR19UTF9CUiB8fCBjb25uZWN0b3JBZGphY2VudCA9PT0gQ09OTkVDVE9SX0RJQUdfQkxfVFIpO1xuICAgICAgICAgIC8vIC0tLSBFbmQgTkVXIGNoZWNrIC0tLVxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgY21kLWNsaWNrICh2aWEgcGxhbmUgb24gY2lyY2xlKTonLCB7XG4gICAgICAgICAgICB4OiBncmlkWCwgeTogZ3JpZFksXG4gICAgICAgICAgICBsZWZ0QWN0aXZlLCByaWdodEFjdGl2ZSxcbiAgICAgICAgICAgIGNhbkNvbm5lY3RCYXNlLCBpc0Jsb2NrZWRCeURpYWdvbmFsLFxuICAgICAgICAgICAgY29ubmVjdG9yQmVsb3csIGNvbm5lY3RvckFkamFjZW50XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBPbmx5IGFsbG93IHRvZ2dsZSBpZiBiYXNlIGNvbmRpdGlvbnMgbWV0IEFORCBub3QgYmxvY2tlZCBieSBkaWFnb25hbFxuICAgICAgICAgIGlmIChjYW5Db25uZWN0QmFzZSAmJiAhaXNCbG9ja2VkQnlEaWFnb25hbCkge1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdG9yS2V5ID0gZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoZ3JpZFgsIGdyaWRZKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2dnbGluZyBjbWQtaG9yaXogY29ubmVjdG9yIChhbGxvd2VkKTonLCB7IGtleTogY29ubmVjdG9yS2V5IH0pO1xuICAgICAgICAgICAgc2V0Q21kSG9yaXpDb25uZWN0b3JzKHByZXYgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBuZXdDb25uZWN0b3JzID0geyAuLi5wcmV2IH07XG4gICAgICAgICAgICAgIG5ld0Nvbm5lY3RvcnNbY29ubmVjdG9yS2V5XSA9IHByZXZbY29ubmVjdG9yS2V5XSA/IDAgOiAxO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZWYgdG8gdHJhY2sgdGhlIGxhdGVzdCBzdGF0ZVxuICAgICAgICAgICAgICBjbWRIb3JpekNvbm5lY3RvcnNSZWYuY3VycmVudCA9IG5ld0Nvbm5lY3RvcnM7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBjbWQtaG9yaXogY29ubmVjdG9yIHN0YXRlICh2aWEgcGxhbmUpOicsIHsgXG4gICAgICAgICAgICAgICAga2V5OiBjb25uZWN0b3JLZXksIFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdDb25uZWN0b3JzW2Nvbm5lY3RvcktleV0sIFxuICAgICAgICAgICAgICAgIGFsbENvbm5lY3RvcnM6IG5ld0Nvbm5lY3RvcnMsXG4gICAgICAgICAgICAgICAga2V5czogT2JqZWN0LmtleXMobmV3Q29ubmVjdG9ycyksXG4gICAgICAgICAgICAgICAgYWN0aXZlQ29ubmVjdG9yczogT2JqZWN0LmVudHJpZXMobmV3Q29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgPT09IDEpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3Q29ubmVjdG9ycztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGFmdGVyIGhhbmRsaW5nIGNtZC1jbGlja1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgY29uc29sZS5sb2coJ0NtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciBibG9ja2VkIG9yIGJhc2UgY29uZGl0aW9ucyBub3QgbWV0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiBibG9ja2VkIG9yIGNhbid0IGNvbm5lY3QsIGZhbGwgdGhyb3VnaCB0byByZWd1bGFyIGNsaWNrPyBMZXQncyBkbyBub3RoaW5nIG1vcmUuXG4gICAgICAgICAgcmV0dXJuOyAvLyBFeHBsaWNpdGx5IGRvIG5vdGhpbmcgbW9yZSBpZiBjbWQtY2xpY2sgd2FzIGJsb2NrZWQgb3IgaW52YWxpZFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVndWxhciBjbGljayBiZWhhdmlvciAodG9nZ2xlIGFjdGl2YXRpb24pIC0gb25seSBydW5zIGlmIG5vdCBhIGhhbmRsZWQgY21kLWNsaWNrXG4gICAgICAgIGNvbnNvbGUubG9nKCdUb2dnbGluZyBjaXJjbGUgYWN0aXZhdGlvbiAocmVndWxhciBjbGljayBvbiBwbGFuZSknKTtcbiAgICAgICAgc2V0QWN0aXZhdGlvblN0YXRlKGN1cnJlbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3IEZsb2F0MzJBcnJheShjdXJyZW50KTtcbiAgICAgICAgICBuZXdTdGF0ZVtpbmRleF0gPSBuZXdTdGF0ZVtpbmRleF0gPT09IDEuMCA/IDAuMCA6IDEuMDtcbiAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgVG9nZ2xpbmcgY2lyY2xlIGF0ICgke2dyaWRYfSwke2dyaWRZfSlgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlIGNsaWNrIHdhc24ndCBvbiBhIGNpcmNsZSwgc28gdHJlYXQgaXQgYXMgYSBjb25uZWN0b3IgY2xpY2tcbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggZ3JpZCBjZWxsIChib3R0b20tbGVmdCBvZiBhIDJ4MiBncm91cCkgdGhpcyBwb2ludCBpcyBjbG9zZXN0IHRvXG4gICAgY29uc3QgZ3JvdXBYID0gTWF0aC5mbG9vcigoY2xpY2tQb2ludC54IC0gY2VudGVyT2Zmc2V0LngpIC8gRklYRURfU1BBQ0lORyk7XG4gICAgY29uc3QgZ3JvdXBZID0gTWF0aC5mbG9vcigoY2xpY2tQb2ludC55IC0gY2VudGVyT2Zmc2V0LnkpIC8gRklYRURfU1BBQ0lORyk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBpbmRpY2VzIG9mIHRoZSBmb3VyIGNlbGxzIGluIHRoZSAyeDIgZ3JvdXBcbiAgICBjb25zdCBibEluZGV4ID0gZ2V0SW5kZXgoZ3JvdXBZLCBncm91cFgsIGNvbnRyb2xzLkdSSURfV0lEVEgpO1xuICAgIGNvbnN0IGJySW5kZXggPSBnZXRJbmRleChncm91cFksIGdyb3VwWCArIDEsIGNvbnRyb2xzLkdSSURfV0lEVEgpO1xuICAgIGNvbnN0IHRsSW5kZXggPSBnZXRJbmRleChncm91cFkgKyAxLCBncm91cFgsIGNvbnRyb2xzLkdSSURfV0lEVEgpO1xuICAgIGNvbnN0IHRySW5kZXggPSBnZXRJbmRleChncm91cFkgKyAxLCBncm91cFggKyAxLCBjb250cm9scy5HUklEX1dJRFRIKTtcbiAgICBcbiAgICAvLyBDaGVjayB3aGljaCBjZWxscyBhcmUgd2l0aGluIGdyaWQgYm91bmRzXG4gICAgY29uc3QgaXNWYWxpZEdyb3VwID0gXG4gICAgICBncm91cFggPj0gMCAmJiBncm91cFggPCBjb250cm9scy5HUklEX1dJRFRIIC0gMSAmJiBcbiAgICAgIGdyb3VwWSA+PSAwICYmIGdyb3VwWSA8IGNvbnRyb2xzLkdSSURfSEVJR0hUIC0gMTtcbiAgICBcbiAgICBpZiAoIWlzVmFsaWRHcm91cCkgcmV0dXJuO1xuICAgIFxuICAgIC8vIEdldCBhY3RpdmF0aW9uIHN0YXRlcyBmb3IgdGhlIGZvdXIgY2VsbHNcbiAgICBjb25zdCBibEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVtibEluZGV4XSA9PT0gMS4wO1xuICAgIGNvbnN0IGJyQWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW2JySW5kZXhdID09PSAxLjA7XG4gICAgY29uc3QgdGxBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbdGxJbmRleF0gPT09IDEuMDtcbiAgICBjb25zdCB0ckFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVt0ckluZGV4XSA9PT0gMS4wO1xuICAgIFxuICAgIC8vIEdldCB0aGUgd29ybGQgcG9zaXRpb25zIG9mIHRoZSBjZWxsIGNlbnRlcnNcbiAgICBjb25zdCBibFBvcyA9IGdldFdvcmxkUG9zaXRpb24oZ3JvdXBZLCBncm91cFgsIGNvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IGJyUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFksIGdyb3VwWCArIDEsIGNvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IHRsUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFkgKyAxLCBncm91cFgsIGNvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQpO1xuICAgIGNvbnN0IHRyUG9zID0gZ2V0V29ybGRQb3NpdGlvbihncm91cFkgKyAxLCBncm91cFggKyAxLCBjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgRklYRURfU1BBQ0lORywgY2VudGVyT2Zmc2V0KTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNlbnRlciBvZiB0aGUgMngyIGdyb3VwXG4gICAgY29uc3QgY2VudGVyWCA9IChibFBvcy54ICsgYnJQb3MueCArIHRsUG9zLnggKyB0clBvcy54KSAvIDQ7XG4gICAgY29uc3QgY2VudGVyWSA9IChibFBvcy55ICsgYnJQb3MueSArIHRsUG9zLnkgKyB0clBvcy55KSAvIDQ7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGZyb20gY2xpY2sgdG8gY2VudGVyIG9mIDJ4MiBncm91cFxuICAgIGNvbnN0IGRpc3RUb0NlbnRlciA9IE1hdGguc3FydChcbiAgICAgIE1hdGgucG93KGNsaWNrUG9pbnQueCAtIGNlbnRlclgsIDIpICsgXG4gICAgICBNYXRoLnBvdyhjbGlja1BvaW50LnkgLSBjZW50ZXJZLCAyKVxuICAgICk7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrIGlzIGluIHRoZSBjZW50ZXIgem9uZSAoMzAlIG9mIGNlbGwgc3BhY2luZylcbiAgICBjb25zdCBpc0NlbnRlckNsaWNrID0gZGlzdFRvQ2VudGVyIDwgRklYRURfU1BBQ0lORyAqIDAuMyAqIGNvbnRyb2xzLnZpc3VhbFNjYWxlO1xuICAgIFxuICAgIC8vIEdldCB0aGUgcG9zc2libGUgZGlhZ29uYWwgY29ubmVjdG9yc1xuICAgIGNvbnN0IGNhblVzZURpYWdUTEJSID0gdGxBY3RpdmUgJiYgYnJBY3RpdmU7XG4gICAgY29uc3QgY2FuVXNlRGlhZ0JMVFIgPSBibEFjdGl2ZSAmJiB0ckFjdGl2ZTtcbiAgICBjb25zdCBoYXNEaWFnb25hbE9wdGlvbnMgPSBjYW5Vc2VEaWFnVExCUiB8fCBjYW5Vc2VEaWFnQkxUUjtcbiAgICBcbiAgICAvLyBHZXQgY3VycmVudCBpbnRlbmRlZCBjb25uZWN0b3JcbiAgICBjb25zdCBjdXJyZW50Q29ubmVjdG9yID0gZ2V0SW50ZW5kZWRDb25uZWN0b3IoZ3JvdXBYLCBncm91cFkpO1xuICAgIGNvbnN0IGdyb3VwS2V5ID0gZ2V0Q2VsbEdyb3VwS2V5KGdyb3VwWCwgZ3JvdXBZKTtcbiAgICBcbiAgICAvLyAtLS0gTkVXOiBDaGVjayBmb3IgYmxvY2tpbmcgaG9yaXpvbnRhbCBjb25uZWN0b3JzIC0tLVxuICAgIGNvbnN0IGhhc0hvcml6Q21kQmVsb3cgPSBjbWRIb3JpekNvbm5lY3RvcnNbZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoZ3JvdXBYLCBncm91cFkpXSA9PT0gMTtcbiAgICBjb25zdCBoYXNIb3JpekNtZEFib3ZlID0gY21kSG9yaXpDb25uZWN0b3JzW2dldEhvcml6Q21kQ29ubmVjdG9yS2V5KGdyb3VwWCwgZ3JvdXBZICsgMSldID09PSAxO1xuICAgIGNvbnN0IGlzQmxvY2tlZEJ5SG9yaXogPSBoYXNIb3JpekNtZEJlbG93IHx8IGhhc0hvcml6Q21kQWJvdmU7XG4gICAgLy8gLS0tIEVuZCBORVcgQ2hlY2sgLS0tXG5cbiAgICBsZXQgbmV3Q29ubmVjdG9yID0gQ09OTkVDVE9SX05PTkU7IC8vIEluaXRpYWxpemUgcG90ZW50aWFsIG5ldyBzdGF0ZVxuICAgIGxldCBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7IC8vIFN0b3JlIHRoZSB0eXBlIGRldGVybWluZWQgYnkgY2xpY2sgbG9naWNcbiAgICBcbiAgICAvLyBJZiBjbGlja2VkIGluIHRoZSBjZW50ZXIgYW5kIGRpYWdvbmFsIGNvbm5lY3RvcnMgYXJlIGF2YWlsYWJsZSwgY3ljbGUgdGhyb3VnaCB0aGVtXG4gICAgaWYgKGlzQ2VudGVyQ2xpY2sgJiYgaGFzRGlhZ29uYWxPcHRpb25zKSB7XG4gICAgICBpZiAoY2FuVXNlRGlhZ1RMQlIgJiYgY2FuVXNlRGlhZ0JMVFIpIHtcbiAgICAgICAgLy8gQm90aCBkaWFnb25hbHMgYXJlIGF2YWlsYWJsZSwgY3ljbGUgdGhyb3VnaCB0aGUgb3B0aW9uczogTk9ORSAtPiBUTC1CUiAtPiBCTC1UUiAtPiBOT05FXG4gICAgICAgIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfTk9ORSkge1xuICAgICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBDT05ORUNUT1JfRElBR19UTF9CUjtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfRElBR19UTF9CUikge1xuICAgICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBDT05ORUNUT1JfRElBR19CTF9UUjtcbiAgICAgICAgfSBlbHNlIHsgLy8gY3VycmVudCB3YXMgQkxfVFJcbiAgICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FuVXNlRGlhZ1RMQlIpIHtcbiAgICAgICAgLy8gT25seSBUTC1CUiBkaWFnb25hbCBpcyBhdmFpbGFibGUsIHRvZ2dsZSBpdFxuICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gY3VycmVudENvbm5lY3RvciA9PT0gQ09OTkVDVE9SX0RJQUdfVExfQlIgPyBDT05ORUNUT1JfTk9ORSA6IENPTk5FQ1RPUl9ESUFHX1RMX0JSO1xuICAgICAgfSBlbHNlIHsgLy8gT25seSBjYW5Vc2VEaWFnQkxUUlxuICAgICAgICAvLyBPbmx5IEJMLVRSIGRpYWdvbmFsIGlzIGF2YWlsYWJsZSwgdG9nZ2xlIGl0XG4gICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBjdXJyZW50Q29ubmVjdG9yID09PSBDT05ORUNUT1JfRElBR19CTF9UUiA/IENPTk5FQ1RPUl9OT05FIDogQ09OTkVDVE9SX0RJQUdfQkxfVFI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNDZW50ZXJDbGljaykgeyAvLyBDaGVjayBub24tY2VudGVyIGNsaWNrcyBvbmx5IGlmIG5vdCBhIGNlbnRlciBjbGlja1xuICAgICAgLy8gRm9yIGNsaWNrcyBvdXRzaWRlIHRoZSBjZW50ZXIsIGRldGVybWluZSB3aGljaCBkaWFnb25hbCB3YXMgY2xpY2tlZCAoaWYgYW55KVxuICAgICAgbGV0IGNsaWNrZWRUeXBlID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZXMgZnJvbSBjbGljayB0byBlYWNoIGRpYWdvbmFsXG4gICAgICBjb25zdCBkaXN0VG9CTFRSID0gTWF0aC5hYnMoKGNsaWNrUG9pbnQueCAtIGJsUG9zLngpICogKHRyUG9zLnkgLSBibFBvcy55KSAtIChjbGlja1BvaW50LnkgLSBibFBvcy55KSAqICh0clBvcy54IC0gYmxQb3MueCkpIC8gXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3codHJQb3MueCAtIGJsUG9zLngsIDIpICsgTWF0aC5wb3codHJQb3MueSAtIGJsUG9zLnksIDIpKTtcbiAgICAgIGNvbnN0IGRpc3RUb1RMQlIgPSBNYXRoLmFicygoY2xpY2tQb2ludC54IC0gdGxQb3MueCkgKiAoYnJQb3MueSAtIHRsUG9zLnkpIC0gKGNsaWNrUG9pbnQueSAtIHRsUG9zLnkpICogKGJyUG9zLnggLSB0bFBvcy54KSkgLyBcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc3FydChNYXRoLnBvdyhiclBvcy54IC0gdGxQb3MueCwgMikgKyBNYXRoLnBvdyhiclBvcy55IC0gdGxQb3MueSwgMikpO1xuICAgICAgICAgICAgXG4gICAgICBpZiAoZGlzdFRvQkxUUiA8IGRpc3RUb1RMQlIpIHtcbiAgICAgICAgLy8gQ2xvc2VyIHRvIEJMLVRSIGRpYWdvbmFsICgvKVxuICAgICAgICBpZiAoY2FuVXNlRGlhZ0JMVFIpIHsgLy8gQ2hlY2sgaWYgcG9zc2libGVcbiAgICAgICAgICBjbGlja2VkVHlwZSA9IENPTk5FQ1RPUl9ESUFHX0JMX1RSO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbG9zZXIgdG8gVEwtQlIgZGlhZ29uYWwgKFxcKVxuICAgICAgICBpZiAoY2FuVXNlRGlhZ1RMQlIpIHsgLy8gQ2hlY2sgaWYgcG9zc2libGVcbiAgICAgICAgICBjbGlja2VkVHlwZSA9IENPTk5FQ1RPUl9ESUFHX1RMX0JSO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFRvZ2dsZSBsb2dpYyAtIGlmIHRoZSBjbGlja2VkIGNvbm5lY3RvciBpcyBhbHJlYWR5IGFjdGl2ZSwgdHVybiBpdCBvZmZcbiAgICAgIC8vIE90aGVyd2lzZSwgdHVybiBvbiB0aGUgY2xpY2tlZCBvbmVcbiAgICAgIGlmIChjdXJyZW50Q29ubmVjdG9yID09PSBjbGlja2VkVHlwZSkge1xuICAgICAgICBwb3RlbnRpYWxDb25uZWN0b3JUeXBlID0gQ09OTkVDVE9SX05PTkU7IC8vIFRvZ2dsZSBvZmZcbiAgICAgIH0gZWxzZSBpZiAoY2xpY2tlZFR5cGUgIT09IENPTk5FQ1RPUl9OT05FKSB7XG4gICAgICAgIHBvdGVudGlhbENvbm5lY3RvclR5cGUgPSBjbGlja2VkVHlwZTsgLy8gVG9nZ2xlIG9uIG5ldyBjb25uZWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAtLS0gQXBwbHkgQmxvY2tpbmcgTG9naWMgLS0tXG4gICAgaWYgKGlzQmxvY2tlZEJ5SG9yaXogJiYgKHBvdGVudGlhbENvbm5lY3RvclR5cGUgPT09IENPTk5FQ1RPUl9ESUFHX1RMX0JSIHx8IHBvdGVudGlhbENvbm5lY3RvclR5cGUgPT09IENPTk5FQ1RPUl9ESUFHX0JMX1RSKSkge1xuICAgICAgbmV3Q29ubmVjdG9yID0gQ09OTkVDVE9SX05PTkU7IC8vIEZvcmNlIHRvIE5PTkUgaWYgYmxvY2tlZCBieSBob3Jpem9udGFsXG4gICAgICBjb25zb2xlLmxvZyhgRGlhZ29uYWwgY29ubmVjdG9yIGJsb2NrZWQgYnkgZXhpc3RpbmcgaG9yaXpvbnRhbCBjb25uZWN0b3IgYXQgZ3JvdXAgKCR7Z3JvdXBYfSwke2dyb3VwWX0pYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0Nvbm5lY3RvciA9IHBvdGVudGlhbENvbm5lY3RvclR5cGU7IC8vIE90aGVyd2lzZSwgdXNlIHRoZSB0eXBlIGRldGVybWluZWQgYnkgY2xpY2sgbG9naWNcbiAgICB9XG4gICAgLy8gLS0tIEVuZCBCbG9ja2luZyBMb2dpYyAtLS1cbiAgICBcbiAgICAvLyBVcGRhdGUgdGhlIGludGVuZGVkIGNvbm5lY3RvciBzdGF0ZVxuICAgIHNldEludGVuZGVkQ29ubmVjdG9ycyhwcmV2ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBDb25uZWN0b3IgdXBkYXRlIGF0ICgke2dyb3VwWH0sJHtncm91cFl9KTogcHJldmlvdXM9JHtwcmV2W2dyb3VwS2V5XX0gLT4gbmV3PSR7bmV3Q29ubmVjdG9yfWApO1xuICAgICAgY29uc3QgdXBkYXRlZCA9IHtcbiAgICAgICAgLi4ucHJldixcbiAgICAgICAgW2dyb3VwS2V5XTogbmV3Q29ubmVjdG9yXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgdGhlIHJlZiB0byB0cmFjayB0aGUgbGF0ZXN0IHN0YXRlXG4gICAgICBpbnRlbmRlZENvbm5lY3RvcnNSZWYuY3VycmVudCA9IHVwZGF0ZWQ7XG4gICAgICBcbiAgICAgIC8vIExvZyB0aGUgY2hhbmdlIHRoYXQgd2FzIG1hZGVcbiAgICAgIGlmIChwcmV2W2dyb3VwS2V5XSAhPT0gbmV3Q29ubmVjdG9yKSB7XG4gICAgICAgIGlmIChuZXdDb25uZWN0b3IgPT09IENPTk5FQ1RPUl9OT05FKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFJlbW92ZWQgY29ubmVjdG9yIGF0ICgke2dyb3VwWH0sJHtncm91cFl9KWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSBcbiAgICAgICAgICAgIG5ld0Nvbm5lY3RvciA9PT0gQ09OTkVDVE9SX0RJQUdfVExfQlIgPyBcIkRJQUdfVExfQlIgKFxcXFwpXCIgOlxuICAgICAgICAgICAgbmV3Q29ubmVjdG9yID09PSBDT05ORUNUT1JfRElBR19CTF9UUiA/IFwiRElBR19CTF9UUiAoLylcIiA6XG4gICAgICAgICAgICBuZXdDb25uZWN0b3IgPT09IENPTk5FQ1RPUl9IT1JJWl9UID8gXCJIT1JJWl9UXCIgOlxuICAgICAgICAgICAgbmV3Q29ubmVjdG9yID09PSBDT05ORUNUT1JfSE9SSVpfQiA/IFwiSE9SSVpfQlwiIDpcbiAgICAgICAgICAgIGB1bmtub3duICgke25ld0Nvbm5lY3Rvcn0pYDtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgQWRkZWQgJHt0eXBlU3RyfSBjb25uZWN0b3IgYXQgKCR7Z3JvdXBYfSwke2dyb3VwWX0pYCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTG9nIHVwZGF0ZWQgY29ubmVjdG9yIHN0YXRlIHRvIGhlbHAgd2l0aCBkZWJ1Z2dpbmdcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIk5ldyBjb25uZWN0b3Igc3RhdGU6XCIsIHVwZGF0ZWQpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdG9yIGtleXM6XCIsIE9iamVjdC5rZXlzKHVwZGF0ZWQpKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vbi16ZXJvIGNvbm5lY3RvcnM6XCIsIE9iamVjdC5lbnRyaWVzKHVwZGF0ZWQpLmZpbHRlcigoW18sIHZdKSA9PiB2ICE9PSBDT05ORUNUT1JfTk9ORSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBDbGlja2VkIGNlbGwgZ3JvdXAgKCR7Z3JvdXBYfSwke2dyb3VwWX0pLCBzZXR0aW5nIGNvbm5lY3RvciB0byAke25ld0Nvbm5lY3Rvcn1gKTtcbiAgICBcbiAgfSwgW2NvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBGSVhFRF9TUEFDSU5HLCBjZW50ZXJPZmZzZXQsIGFjdGl2YXRpb25TdGF0ZSwgaW50ZW5kZWRDb25uZWN0b3JzLCBjb250cm9scy52aXN1YWxTY2FsZSwgc2V0Q21kSG9yaXpDb25uZWN0b3JzLCBjbWRIb3JpekNvbm5lY3RvcnNdKTsgLy8gRGVwZW5kZW5jaWVzIGFyZSBjb3JyZWN0IG5vd1xuXG4gIC8vIFJlc2V0IGNvbm5lY3RvciBpbnRlbnQgd2hlbiBhIGNpcmNsZSBpcyBkZWFjdGl2YXRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIENoZWNrIGFsbCBjZWxsIGdyb3Vwc1xuICAgIGNvbnN0IG5ld0ludGVuZGVkQ29ubmVjdG9ycyA9IHsgLi4uaW50ZW5kZWRDb25uZWN0b3JzIH07XG4gICAgY29uc3QgbmV3Q21kSG9yaXpDb25uZWN0b3JzID0geyAuLi5jbWRIb3JpekNvbm5lY3RvcnMgfTtcbiAgICBsZXQgaGFzQ2hhbmdlcyA9IGZhbHNlO1xuICAgIGxldCBoYXNDbWRIb3JpekNoYW5nZXMgPSBmYWxzZTtcbiAgICBcbiAgICAvLyBGaXJzdCBjaGVjayByZWd1bGFyIGNvbm5lY3RvcnNcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnRlbmRlZENvbm5lY3RvcnMpIHtcbiAgICAgIGNvbnN0IGNvbm5lY3RvciA9IGludGVuZGVkQ29ubmVjdG9yc1trZXldO1xuICAgICAgaWYgKGNvbm5lY3RvciA9PT0gQ09OTkVDVE9SX05PTkUpIGNvbnRpbnVlO1xuICAgICAgXG4gICAgICAvLyBQYXJzZSB4LHkgZnJvbSBrZXlcbiAgICAgIGNvbnN0IFt4LCB5XSA9IGtleS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgXG4gICAgICAvLyBHZXQgdGhlIGluZGljZXMgb2YgdGhlIGZvdXIgY2VsbHNcbiAgICAgIGNvbnN0IGJsSW5kZXggPSBnZXRJbmRleCh5LCB4LCBjb250cm9scy5HUklEX1dJRFRIKTtcbiAgICAgIGNvbnN0IGJySW5kZXggPSBnZXRJbmRleCh5LCB4ICsgMSwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgICBjb25zdCB0bEluZGV4ID0gZ2V0SW5kZXgoeSArIDEsIHgsIGNvbnRyb2xzLkdSSURfV0lEVEgpO1xuICAgICAgY29uc3QgdHJJbmRleCA9IGdldEluZGV4KHkgKyAxLCB4ICsgMSwgY29udHJvbHMuR1JJRF9XSURUSCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBhY3RpdmF0aW9uIHN0YXRlc1xuICAgICAgY29uc3QgYmxBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbYmxJbmRleF0gPT09IDEuMDtcbiAgICAgIGNvbnN0IGJyQWN0aXZlID0gYWN0aXZhdGlvblN0YXRlW2JySW5kZXhdID09PSAxLjA7XG4gICAgICBjb25zdCB0bEFjdGl2ZSA9IGFjdGl2YXRpb25TdGF0ZVt0bEluZGV4XSA9PT0gMS4wO1xuICAgICAgY29uc3QgdHJBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbdHJJbmRleF0gPT09IDEuMDtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbm5lY3RvciBpcyBzdGlsbCB2YWxpZFxuICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgICAgXG4gICAgICBzd2l0Y2ggKGNvbm5lY3Rvcikge1xuICAgICAgICBjYXNlIENPTk5FQ1RPUl9ESUFHX1RMX0JSOlxuICAgICAgICAgIGlzVmFsaWQgPSB0bEFjdGl2ZSAmJiBickFjdGl2ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDT05ORUNUT1JfRElBR19CTF9UUjpcbiAgICAgICAgICBpc1ZhbGlkID0gYmxBY3RpdmUgJiYgdHJBY3RpdmU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ09OTkVDVE9SX0hPUklaX1Q6XG4gICAgICAgICAgaXNWYWxpZCA9IHRsQWN0aXZlICYmIHRyQWN0aXZlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENPTk5FQ1RPUl9IT1JJWl9COlxuICAgICAgICAgIGlzVmFsaWQgPSBibEFjdGl2ZSAmJiBickFjdGl2ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIG5ld0ludGVuZGVkQ29ubmVjdG9yc1trZXldID0gQ09OTkVDVE9SX05PTkU7XG4gICAgICAgIGhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdyBjaGVjayBjbWQtY2xpY2sgaG9yaXpvbnRhbCBjb25uZWN0b3JzXG4gICAgZm9yIChjb25zdCBrZXkgaW4gY21kSG9yaXpDb25uZWN0b3JzKSB7XG4gICAgICBpZiAoY21kSG9yaXpDb25uZWN0b3JzW2tleV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBQYXJzZSB4LHkgZnJvbSBrZXkgKHJlbW92ZSAnaGNtZDonIHByZWZpeClcbiAgICAgIGNvbnN0IFt4LCB5XSA9IGtleS5zdWJzdHJpbmcoNSkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcblxuICAgICAgLy8gR2V0IGluZGljZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IGNpcmNsZXNcbiAgICAgIGNvbnN0IGxlZnRJbmRleCA9IGdldEluZGV4KHksIHgsIGNvbnRyb2xzLkdSSURfV0lEVEgpO1xuICAgICAgY29uc3QgcmlnaHRJbmRleCA9IGdldEluZGV4KHksIHggKyAxLCBjb250cm9scy5HUklEX1dJRFRIKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgYm90aCBjaXJjbGVzIGFyZSBzdGlsbCBhY3RpdmVcbiAgICAgIGNvbnN0IGxlZnRBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbbGVmdEluZGV4XSA9PT0gMS4wO1xuICAgICAgY29uc3QgcmlnaHRBY3RpdmUgPSBhY3RpdmF0aW9uU3RhdGVbcmlnaHRJbmRleF0gPT09IDEuMDtcblxuICAgICAgaWYgKCFsZWZ0QWN0aXZlIHx8ICFyaWdodEFjdGl2ZSkge1xuICAgICAgICBuZXdDbWRIb3JpekNvbm5lY3RvcnNba2V5XSA9IDA7XG4gICAgICAgIGhhc0NtZEhvcml6Q2hhbmdlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChoYXNDaGFuZ2VzKSB7XG4gICAgICBzZXRJbnRlbmRlZENvbm5lY3RvcnMobmV3SW50ZW5kZWRDb25uZWN0b3JzKTtcbiAgICB9XG4gICAgaWYgKGhhc0NtZEhvcml6Q2hhbmdlcykge1xuICAgICAgc2V0Q21kSG9yaXpDb25uZWN0b3JzKG5ld0NtZEhvcml6Q29ubmVjdG9ycyk7XG4gICAgfVxuICB9LCBbYWN0aXZhdGlvblN0YXRlLCBjb250cm9scy5HUklEX1dJRFRILCBpbnRlbmRlZENvbm5lY3RvcnMsIGNtZEhvcml6Q29ubmVjdG9yc10pO1xuXG4gIC8vIENyZWF0ZSBhIGRhdGEgdGV4dHVyZSBmb3IgaW50ZW5kZWQgY29ubmVjdG9yc1xuICBjb25zdCBpbnRlbmRlZENvbm5lY3RvclRleHR1cmUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRpbmcgaW50ZW5kZWQgY29ubmVjdG9yIHRleHR1cmU6ICR7Y29udHJvbHMuR1JJRF9XSURUSC0xfXgke2NvbnRyb2xzLkdSSURfSEVJR0hULTF9YCk7XG4gICAgXG4gICAgLy8gVGV4dHVyZSBoYXMgb25lIHBpeGVsIHBlciAyeDIgY2VsbCBncm91cCAoZ3JpZCBjZWxscyBtaW51cyAxIGluIGVhY2ggZGltZW5zaW9uKVxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgY29udHJvbHMuR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWF4KDEsIGNvbnRyb2xzLkdSSURfSEVJR0hUIC0gMSk7XG4gICAgXG4gICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShcbiAgICAgIG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKiBoZWlnaHQpLmZpbGwoMC4wKSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgVEhSRUUuUmVkRm9ybWF0LFxuICAgICAgVEhSRUUuRmxvYXRUeXBlXG4gICAgKTtcbiAgICBcbiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgdGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIFxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9LCBbY29udHJvbHMuR1JJRF9XSURUSCwgY29udHJvbHMuR1JJRF9IRUlHSFRdKTtcbiAgXG4gIC8vIFVwZGF0ZSB0aGUgaW50ZW5kZWQgY29ubmVjdG9yIHRleHR1cmUgd2hlbiBzdGF0ZSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heCgxLCBjb250cm9scy5HUklEX1dJRFRIIC0gMSk7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKiBNYXRoLm1heCgxLCBjb250cm9scy5HUklEX0hFSUdIVCAtIDEpKTtcbiAgICBcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNvbnRyb2xzLkdSSURfSEVJR0hUIC0gMTsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNvbnRyb2xzLkdSSURfV0lEVEggLSAxOyB4KyspIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB5ICogd2lkdGggKyB4O1xuICAgICAgICBjb25zdCBjb25uZWN0b3IgPSBnZXRJbnRlbmRlZENvbm5lY3Rvcih4LCB5KTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBjb25uZWN0b3I7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChpbnRlbmRlZENvbm5lY3RvclRleHR1cmUgJiYgZGF0YS5sZW5ndGggPT09IGludGVuZGVkQ29ubmVjdG9yVGV4dHVyZS5pbWFnZS5kYXRhLmxlbmd0aCkge1xuICAgICAgaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlLmltYWdlLmRhdGEuc2V0KGRhdGEpO1xuICAgICAgaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH0sIFtpbnRlbmRlZENvbm5lY3RvcnMsIGNvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hULCBpbnRlbmRlZENvbm5lY3RvclRleHR1cmVdKTtcblxuICAvLyBDcmVhdGUgaG9yaXpvbnRhbCBjbWQtY2xpY2sgY29ubmVjdG9yIHRleHR1cmVcbiAgY29uc3QgY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYENyZWF0aW5nIGNtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciB0ZXh0dXJlOiAke2NvbnRyb2xzLkdSSURfV0lEVEgtMX14JHtjb250cm9scy5HUklEX0hFSUdIVH1gKTtcbiAgICBcbiAgICAvLyBUZXh0dXJlIGhhcyBvbmUgcGl4ZWwgcGVyIGhvcml6b250YWwgY29ubmVjdGlvbiBwb3NzaWJpbGl0eVxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgY29udHJvbHMuR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGhlaWdodCA9IGNvbnRyb2xzLkdSSURfSEVJR0hUO1xuICAgIFxuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YVRleHR1cmUoXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0KS5maWxsKDAuMCksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIFRIUkVFLlJlZEZvcm1hdCxcbiAgICAgIFRIUkVFLkZsb2F0VHlwZVxuICAgICk7XG4gICAgXG4gICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgIHRleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICBcbiAgICByZXR1cm4gdGV4dHVyZTtcbiAgfSwgW2NvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hUXSk7XG4gIFxuICAvLyBVcGRhdGUgdGhlIGNtZC1jbGljayBob3Jpem9udGFsIGNvbm5lY3RvciB0ZXh0dXJlIHdoZW4gc3RhdGUgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoMSwgY29udHJvbHMuR1JJRF9XSURUSCAtIDEpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogY29udHJvbHMuR1JJRF9IRUlHSFQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBjbWQtaG9yaXogY29ubmVjdG9yIHRleHR1cmU6Jywge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQ6IGNvbnRyb2xzLkdSSURfSEVJR0hULFxuICAgICAgY29ubmVjdG9yczogY21kSG9yaXpDb25uZWN0b3JzXG4gICAgfSk7XG4gICAgXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjb250cm9scy5HUklEX0hFSUdIVDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoeCwgeSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY21kSG9yaXpDb25uZWN0b3JzW2tleV0gfHwgMDtcbiAgICAgICAgZGF0YVt5ICogd2lkdGggKyB4XSA9IHZhbHVlO1xuICAgICAgICBcbiAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBhY3RpdmUgY29ubmVjdG9yOicsIHsgeCwgeSwga2V5LCB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlICYmIGRhdGEubGVuZ3RoID09PSBjbWRIb3JpekNvbm5lY3RvclRleHR1cmUuaW1hZ2UuZGF0YS5sZW5ndGgpIHtcbiAgICAgIGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZS5pbWFnZS5kYXRhLnNldChkYXRhKTtcbiAgICAgIGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBjbWQtaG9yaXogY29ubmVjdG9yIHRleHR1cmUgZGF0YScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1NraXBwaW5nIGNtZC1ob3JpeiB0ZXh0dXJlIHVwZGF0ZTogc2l6ZSBtaXNtYXRjaCBvciB0ZXh0dXJlIG5vdCByZWFkeScsIHtcbiAgICAgICAgdGV4dHVyZVNpemU6IGNtZEhvcml6Q29ubmVjdG9yVGV4dHVyZT8uaW1hZ2UuZGF0YS5sZW5ndGgsXG4gICAgICAgIGRhdGFTaXplOiBkYXRhLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY21kSG9yaXpDb25uZWN0b3JzLCBjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW1lc2hSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIFxuICAgIC8vIEVuYWJsZSBmcnVzdHVtIGN1bGxpbmdcbiAgICBtZXNoUmVmLmN1cnJlbnQuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XG4gICAgXG4gICAgLy8gVXBkYXRlIGJvdW5kaW5nIHNwaGVyZSBmb3IgYmV0dGVyIGN1bGxpbmdcbiAgICBpZiAobWVzaFJlZi5jdXJyZW50Lmdlb21ldHJ5KSB7XG4gICAgICBtZXNoUmVmLmN1cnJlbnQuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG4gICAgICBpZiAobWVzaFJlZi5jdXJyZW50Lmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKSB7XG4gICAgICAgIG1lc2hSZWYuY3VycmVudC5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKj0gTWF0aC5tYXgoY29udHJvbHMudmlzdWFsU2NhbGUsIDEuMCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbY29udHJvbHMudmlzdWFsU2NhbGVdKTtcblxuICAvLyAtLS0gUGVyZm9ybWFuY2UgTW9uaXRvcmluZyBTZXR1cCAtLS1cbiAgY29uc3Qgc3RhdHNSZWYgPSB1c2VSZWY8YW55IHwgbnVsbD4obnVsbCk7IC8vIFVzZSB1c2VSZWYgdG8gaG9sZCB0aGUgaW5zdGFuY2VcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFN0YXRzIGlzIGRpc2FibGVkIGZvciBub3cgZHVlIHRvIGltcG9ydCBpc3N1ZXNcbiAgICAvLyBJbml0aWFsaXplIFN0YXRzLmpzIG9uIGNvbXBvbmVudCBtb3VudFxuICAgIC8qXG4gICAgc3RhdHNSZWYuY3VycmVudCA9IG5ldyBTdGF0cygpO1xuICAgIHN0YXRzUmVmLmN1cnJlbnQuc2hvd1BhbmVsKDApOyAvLyAwOiBmcHMsIDE6IG1zLCAyOiBtYiwgMys6IGN1c3RvbVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3RhdHNSZWYuY3VycmVudC5kb20pO1xuICAgICovXG5cbiAgICAvLyBDbGVhbnVwIGZ1bmN0aW9uIHRvIHJlbW92ZSBTdGF0cy5qcyBvbiB1bm1vdW50XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzdGF0c1JlZi5jdXJyZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3RhdHNSZWYuY3VycmVudC5kb20pO1xuICAgICAgICBzdGF0c1JlZi5jdXJyZW50ID0gbnVsbDsgLy8gQ2xlYXIgdGhlIHJlZlxuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTsgLy8gRW1wdHkgZGVwZW5kZW5jeSBhcnJheSBlbnN1cmVzIHRoaXMgcnVucyBvbmx5IG9uY2Ugb24gbW91bnQvdW5tb3VudFxuXG4gIC8vIEZyYW1lIHVwZGF0ZSBsb2dpYyAoaW5jbHVkaW5nIHN0YXRzKVxuICB1c2VGcmFtZSgoc3RhdGUpID0+IHtcbiAgICBpZiAoc3RhdHNSZWYuY3VycmVudCkgeyAvLyBDaGVjayBpZiBzdGF0c1JlZi5jdXJyZW50IGV4aXN0c1xuICAgICAgc3RhdHNSZWYuY3VycmVudC51cGRhdGUoKTsgLy8gVXBkYXRlIEZQUyBjb3VudGVyXG4gICAgfVxuXG4gICAgLy8gT3B0aW9uYWw6IExvZyBmcmFtZSB0aW1lIHBlcmlvZGljYWxseVxuICAgIC8vIGlmIChzdGF0ZS5jbG9jay5lbGFwc2VkVGltZSAlIDUgPCBzdGF0ZS5jbG9jay5nZXREZWx0YSgpKSB7IC8vIENoZWNrIGV2ZXJ5IDVzXG4gICAgLy8gICBjb25zb2xlLmxvZygnRnJhbWUgdGltZTonLCBzdGF0ZS5jbG9jay5nZXREZWx0YSgpICogMTAwMCwgJ21zJyk7XG4gICAgLy8gfVxuICB9KTtcblxuICAvLyBTYXZlIHdpdGggZGlyZWN0IHZhbHVlc1xuICBjb25zdCBzYXZlR3JpZFN0YXRlV2l0aERpcmVjdFZhbHVlcyA9IHVzZUNhbGxiYWNrKChcbiAgICBjdXJyZW50QWN0aXZhdGlvbjogRmxvYXQzMkFycmF5LFxuICAgIGRpcmVjdEludGVuZGVkQ29ubmVjdG9yczogUmVjb3JkPHN0cmluZywgbnVtYmVyPixcbiAgICBkaXJlY3RDbWRIb3JpekNvbm5lY3RvcnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT09IFNBVkUgRElBR05PU1RJQ1MgU1RBUlQgPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGRpcmVjdCBzYXZlIGdyaWQgc3RhdGUgd2l0aCBkYXRhOlwiKTtcbiAgICBcbiAgICAvLyBFeHBsaWNpdGx5IHVzZSB0aGUgY3VycmVudCBjb250cm9sIHZhbHVlcyBmb3IgZ3JpZCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgY29uc3QgY3VycmVudEdyaWRXaWR0aCA9IGNvbnRyb2xzLkdSSURfV0lEVEg7XG4gICAgY29uc3QgY3VycmVudEdyaWRIZWlnaHQgPSBjb250cm9scy5HUklEX0hFSUdIVDtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgQ3VycmVudCBncmlkIGRpbWVuc2lvbnM6ICR7Y3VycmVudEdyaWRXaWR0aH0geCAke2N1cnJlbnRHcmlkSGVpZ2h0fWApO1xuICAgIFxuICAgIC8vIExvZyB0aGUgc3RhdGUgZGV0YWlsc1xuICAgIGNvbnNvbGUubG9nKFwiLSBDdXJyZW50IGFjdGl2YXRpb24gc3RhdGUgaGFzIGxlbmd0aDpcIiwgY3VycmVudEFjdGl2YXRpb24ubGVuZ3RoKTtcbiAgICBjb25zb2xlLmxvZyhcIi0gQWN0aXZlIG5vZGVzIGNvdW50OlwiLCBBcnJheS5mcm9tKGN1cnJlbnRBY3RpdmF0aW9uKS5maWx0ZXIodmFsID0+IHZhbCA9PT0gMS4wKS5sZW5ndGgpO1xuICAgIFxuICAgIC8vIExvZyB0aGUgcmF3IHN0YXRlIGZvciBkZWJ1Z2dpbmdcbiAgICBjb25zb2xlLmxvZyhcIlJBVyBpbnRlbmRlZENvbm5lY3RvcnM6XCIsIGRpcmVjdEludGVuZGVkQ29ubmVjdG9ycyk7XG4gICAgY29uc29sZS5sb2coXCJSQVcgY21kSG9yaXpDb25uZWN0b3JzOlwiLCBkaXJlY3RDbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgIFxuICAgIC8vIE1ha2UgZGVlcCBjb3BpZXMgdG8gZW5zdXJlIHdlIGRvbid0IG11dGF0ZSB0aGUgb3JpZ2luYWwgb2JqZWN0c1xuICAgIGNvbnN0IGludGVuZGVkQ29ubmVjdG9yc0NvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRpcmVjdEludGVuZGVkQ29ubmVjdG9ycykpO1xuICAgIGNvbnN0IGNtZEhvcml6Q29ubmVjdG9yc0NvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRpcmVjdENtZEhvcml6Q29ubmVjdG9ycykpO1xuICAgIFxuICAgIC8vIERFQlVHOiBMb2cgdGhlIGludGVuZGVkIGNvbm5lY3RvcnMgaW4gZGV0YWlsXG4gICAgY29uc29sZS5sb2coXCItIEludGVuZGVkIGNvbm5lY3RvcnMgKGRpcmVjdCkga2V5czpcIiwgT2JqZWN0LmtleXMoaW50ZW5kZWRDb25uZWN0b3JzQ29weSkpO1xuICAgIGNvbnNvbGUubG9nKFwiLSBJbnRlbmRlZCBjb25uZWN0b3JzIChkaXJlY3QpIGNvdW50OlwiLCBPYmplY3Qua2V5cyhpbnRlbmRlZENvbm5lY3RvcnNDb3B5KS5sZW5ndGgpO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIGNvbm5lY3RvcnMgaGF2ZSBhY3R1YWwgdmFsdWVzIG9yIGFyZSBqdXN0IGVtcHR5IG9iamVjdHNcbiAgICBjb25zdCBub25aZXJvSW50ZW5kZWRDb25uZWN0b3JzID0gT2JqZWN0LmVudHJpZXMoaW50ZW5kZWRDb25uZWN0b3JzQ29weSkuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHZhbHVlICE9PSBDT05ORUNUT1JfTk9ORSk7XG4gICAgY29uc29sZS5sb2coXCItIE5vbi16ZXJvIGludGVuZGVkIGNvbm5lY3RvcnM6XCIsIG5vblplcm9JbnRlbmRlZENvbm5lY3RvcnMubGVuZ3RoKTtcbiAgICBjb25zb2xlLmxvZyhcIi0gTm9uLXplcm8gaW50ZW5kZWQgY29ubmVjdG9ycyBkYXRhOlwiLCBub25aZXJvSW50ZW5kZWRDb25uZWN0b3JzKTtcbiAgICBcbiAgICAvLyBERUJVRzogTG9nIHRoZSBjbWQgaG9yaXogY29ubmVjdG9ycyBpbiBkZXRhaWxcbiAgICBjb25zb2xlLmxvZyhcIi0gQ21kIGhvcml6IGNvbm5lY3RvcnMgKGRpcmVjdCkga2V5czpcIiwgT2JqZWN0LmtleXMoY21kSG9yaXpDb25uZWN0b3JzQ29weSkpO1xuICAgIGNvbnNvbGUubG9nKFwiLSBDbWQgaG9yaXogY29ubmVjdG9ycyBjb3VudDpcIiwgT2JqZWN0LmtleXMoY21kSG9yaXpDb25uZWN0b3JzQ29weSkubGVuZ3RoKTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBjbWQgaG9yaXogY29ubmVjdG9ycyBoYXZlIGFjdHVhbCB2YWx1ZXMgb3IgYXJlIGp1c3QgZW1wdHkgb2JqZWN0c1xuICAgIGNvbnN0IGFjdGl2ZUhvcml6Q29ubmVjdG9ycyA9IE9iamVjdC5lbnRyaWVzKGNtZEhvcml6Q29ubmVjdG9yc0NvcHkpLmZpbHRlcigoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSA9PT0gMSk7XG4gICAgY29uc29sZS5sb2coXCItIEFjdGl2ZSBob3JpeiBjb25uZWN0b3JzOlwiLCBhY3RpdmVIb3JpekNvbm5lY3RvcnMubGVuZ3RoKTtcbiAgICBjb25zb2xlLmxvZyhcIi0gQWN0aXZlIGhvcml6IGNvbm5lY3RvcnMgZGF0YTpcIiwgYWN0aXZlSG9yaXpDb25uZWN0b3JzKTtcbiAgICBcbiAgICAvLyBGaW5kIGFsbCBhY3RpdmUgbm9kZXNcbiAgICBjb25zdCBub2RlczogR3JpZE5vZGVbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudEFjdGl2YXRpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdXJyZW50QWN0aXZhdGlvbltpXSA9PT0gMS4wKSB7XG4gICAgICAgIGNvbnN0IHsgcm93OiB5LCBjb2w6IHggfSA9IGdldENvb3JkcyhpLCBjdXJyZW50R3JpZFdpZHRoKTtcbiAgICAgICAgbm9kZXMucHVzaCh7IHgsIHkgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBhY3RpdmUgbm9kZSBhdCAoJHt4fSwgJHt5fSlgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coYFRvdGFsIGFjdGl2ZSBub2RlcyBmb3VuZDogJHtub2Rlcy5sZW5ndGh9YCk7XG5cbiAgICAvLyBGaW5kIGFsbCBlZGdlcyAtIGNvbm5lY3RvcnMgYmV0d2VlbiBhY3RpdmUgbm9kZXNcbiAgICBjb25zdCBlZGdlczogR3JpZEVkZ2VbXSA9IFtdO1xuICAgIFxuICAgIC8vIFByb2Nlc3MgaW50ZW5kZWQgY29ubmVjdG9ycyAoZGlhZ29uYWxzLCBldGMuKVxuICAgIGNvbnNvbGUubG9nKFwiUHJvY2Vzc2luZyBpbnRlbmRlZCBjb25uZWN0b3JzLi4uXCIpO1xuICAgIC8vIE5lZWQgdG8gbWFudWFsbHkgaXRlcmF0ZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBjb25uZWN0b3IgcG9zaXRpb25zIHNpbmNlIHN0YXRlIG1pZ2h0IG5vdCBjb250YWluIGFsbCBrZXlzXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjdXJyZW50R3JpZEhlaWdodCAtIDE7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBjdXJyZW50R3JpZFdpZHRoIC0gMTsgeCsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldENlbGxHcm91cEtleSh4LCB5KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYENoZWNraW5nIHBvc2l0aW9uICgke3h9LCR7eX0pIHdpdGgga2V5ICR7a2V5fWApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdHlwZSA9IGludGVuZGVkQ29ubmVjdG9yc0NvcHlba2V5XTtcbiAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBDT05ORUNUT1JfTk9ORSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgY29ubmVjdG9yIGF0ICgke3h9LCR7eX0pIHdpdGgga2V5ICR7a2V5fSwgdHlwZT0ke3R5cGV9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBNYXAgdGhlIG51bWVyaWMgY29ubmVjdG9yIHR5cGUgdG8gdGhlIHN0cmluZyB0eXBlIGZvciB0aGUgSlNPTlxuICAgICAgICBsZXQgZWRnZVR5cGU6IEdyaWRFZGdlWyd0eXBlJ10gfCBudWxsID0gbnVsbDtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBDT05ORUNUT1JfRElBR19UTF9CUjogXG4gICAgICAgICAgICBlZGdlVHlwZSA9ICdkaWFnX3RsX2JyJzsgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVydGluZyBDT05ORUNUT1JfRElBR19UTF9CUiAoJHtDT05ORUNUT1JfRElBR19UTF9CUn0pIHRvICdkaWFnX3RsX2JyJ2ApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDT05ORUNUT1JfRElBR19CTF9UUjogXG4gICAgICAgICAgICBlZGdlVHlwZSA9ICdkaWFnX2JsX3RyJzsgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVydGluZyBDT05ORUNUT1JfRElBR19CTF9UUiAoJHtDT05ORUNUT1JfRElBR19CTF9UUn0pIHRvICdkaWFnX2JsX3RyJ2ApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDT05ORUNUT1JfSE9SSVpfVDogXG4gICAgICAgICAgICBlZGdlVHlwZSA9ICdob3Jpel90JzsgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVydGluZyBDT05ORUNUT1JfSE9SSVpfVCAoJHtDT05ORUNUT1JfSE9SSVpfVH0pIHRvICdob3Jpel90J2ApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDT05ORUNUT1JfSE9SSVpfQjogXG4gICAgICAgICAgICBlZGdlVHlwZSA9ICdob3Jpel9iJzsgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVydGluZyBDT05ORUNUT1JfSE9SSVpfQiAoJHtDT05ORUNUT1JfSE9SSVpfQn0pIHRvICdob3Jpel9iJ2ApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBjb25uZWN0b3IgdHlwZSBpZ25vcmVkOiAke3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChlZGdlVHlwZSkge1xuICAgICAgICAgIGVkZ2VzLnB1c2goeyB0eXBlOiBlZGdlVHlwZSwgeCwgeSB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgQWRkZWQgJHtlZGdlVHlwZX0gY29ubmVjdG9yIGF0ICgke3h9LCAke3l9KSB0byBlZGdlcyBhcnJheWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBjbWQtaG9yaXpvbnRhbCBjb25uZWN0b3JzXG4gICAgY29uc29sZS5sb2coXCJQcm9jZXNzaW5nIGNtZC1ob3Jpem9udGFsIGNvbm5lY3RvcnMuLi5cIik7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjdXJyZW50R3JpZEhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGN1cnJlbnRHcmlkV2lkdGggLSAxOyB4KyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0SG9yaXpDbWRDb25uZWN0b3JLZXkoeCwgeSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY21kSG9yaXpDb25uZWN0b3JzQ29weVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgICBlZGdlcy5wdXNoKHsgdHlwZTogJ2NtZF9ob3JpeicsIHgsIHkgfSk7XG4gICAgICAgICAgY29uc29sZS5sb2coYEFkZGVkIGNtZF9ob3JpeiBjb25uZWN0b3IgYXQgKCR7eH0sICR7eX0pIHRvIGVkZ2VzIGFycmF5YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coYFRvdGFsIGVkZ2VzIGZvdW5kOiAke2VkZ2VzLmxlbmd0aH1gKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgZmluYWwgSlNPTiBkYXRhIHN0cnVjdHVyZVxuICAgIGNvbnN0IGRhdGE6IEFkamFjZW5jeUxpc3REYXRhID0ge1xuICAgICAgZ3JpZFdpZHRoOiBjdXJyZW50R3JpZFdpZHRoLFxuICAgICAgZ3JpZEhlaWdodDogY3VycmVudEdyaWRIZWlnaHQsXG4gICAgICBub2RlcyxcbiAgICAgIGVkZ2VzLFxuICAgIH07XG5cbiAgICAvLyBDcmVhdGUgSlNPTiBzdHJpbmdcbiAgICBjb25zdCBkYXRhU3RyID0gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMik7XG4gICAgY29uc29sZS5sb2coJ0dyaWQgU3RhdGUgSlNPTjonLCBkYXRhU3RyKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT0gU0FWRSBESUFHTk9TVElDUyBFTkQgPT09PT09PT09PVwiKTtcblxuICAgIC8vIFRyaWdnZXIgZG93bmxvYWRcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2RhdGFTdHJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgYS5ocmVmID0gdXJsO1xuICAgIGEuZG93bmxvYWQgPSBgZ3JpZF9zdGF0ZV8ke2N1cnJlbnRHcmlkV2lkdGh9eCR7Y3VycmVudEdyaWRIZWlnaHR9Lmpzb25gO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgYS5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XG4gICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICB9LCBbY29udHJvbHMuR1JJRF9XSURUSCwgY29udHJvbHMuR1JJRF9IRUlHSFRdKTtcblxuICAvLyAtLS0gU2F2ZSBHcmlkIFN0YXRlIEZ1bmN0aW9uIC0tLVxuICBjb25zdCBzYXZlR3JpZFN0YXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgc2F2ZSBncmlkIHN0YXRlIHdpdGggZGF0YTpcIik7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IGFjdGl2YXRpb24gc3RhdGUgZGlyZWN0bHkgZnJvbSB0aGUgYnVmZmVyIGF0dHJpYnV0ZVxuICAgIC8vIHdoaWNoIGlzIHRoZSBtb3N0IHVwLXRvLWRhdGUgc291cmNlIG9mIHRydXRoXG4gICAgbGV0IGN1cnJlbnRBY3RpdmF0aW9uOiBGbG9hdDMyQXJyYXk7XG4gICAgaWYgKGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYuY3VycmVudCAmJiBhY3RpdmF0aW9uQXR0cmlidXRlUmVmLmN1cnJlbnQuYXJyYXkpIHtcbiAgICAgIGN1cnJlbnRBY3RpdmF0aW9uID0gYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZi5jdXJyZW50LmFycmF5IGFzIEZsb2F0MzJBcnJheTtcbiAgICAgIGNvbnNvbGUubG9nKFwiLSBVc2luZyBhY3RpdmF0aW9uIHN0YXRlIGZyb20gYnVmZmVyIGF0dHJpYnV0ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudEFjdGl2YXRpb24gPSBhY3RpdmF0aW9uU3RhdGU7XG4gICAgICBjb25zb2xlLmxvZyhcIi0gVXNpbmcgYWN0aXZhdGlvbiBzdGF0ZSBmcm9tIFJlYWN0IHN0YXRlIChmYWxsYmFjaylcIik7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSByZWYgdmFsdWVzIHdoaWNoIHNob3VsZCBiZSBpbiBzeW5jIHdpdGggc3RhdGVcbiAgICBjb25zdCBjdXJyZW50SW50ZW5kZWRDb25uZWN0b3JzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnRlbmRlZENvbm5lY3RvcnNSZWYuY3VycmVudCB8fCB7fSkpO1xuICAgIGNvbnN0IGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNtZEhvcml6Q29ubmVjdG9yc1JlZi5jdXJyZW50IHx8IHt9KSk7XG5cbiAgICAvLyBEZWJ1ZyBjdXJyZW50IHN0YXRlXG4gICAgY29uc29sZS5sb2coXCJDdXJyZW50IGludGVuZGVkIGNvbm5lY3RvcnMgYmVmb3JlIHNhdmU6XCIsIGN1cnJlbnRJbnRlbmRlZENvbm5lY3RvcnMpO1xuICAgIGNvbnNvbGUubG9nKFwiS2V5cyBpbiBpbnRlbmRlZCBjb25uZWN0b3JzOlwiLCBPYmplY3Qua2V5cyhjdXJyZW50SW50ZW5kZWRDb25uZWN0b3JzKSk7XG4gICAgY29uc29sZS5sb2coXCJBY3RpdmUgaW50ZW5kZWQgY29ubmVjdG9yczpcIiwgT2JqZWN0LmVudHJpZXMoY3VycmVudEludGVuZGVkQ29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgIT09IENPTk5FQ1RPUl9OT05FKSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJDdXJyZW50IGNtZCBob3JpeiBjb25uZWN0b3JzIGJlZm9yZSBzYXZlOlwiLCBjdXJyZW50Q21kSG9yaXpDb25uZWN0b3JzKTtcbiAgICBjb25zb2xlLmxvZyhcIkFjdGl2ZSBjbWQgaG9yaXogY29ubmVjdG9yczpcIiwgT2JqZWN0LmVudHJpZXMoY3VycmVudENtZEhvcml6Q29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgPT09IDEpKTtcblxuICAgIGNvbnNvbGUubG9nKFwiVXNpbmcgZGlyZWN0IHNhdmUgbWV0aG9kIHRvIGVuc3VyZSB1cC10by1kYXRlIHN0YXRlIGNhcHR1cmVcIik7XG4gICAgc2F2ZUdyaWRTdGF0ZVdpdGhEaXJlY3RWYWx1ZXMoY3VycmVudEFjdGl2YXRpb24sIGN1cnJlbnRJbnRlbmRlZENvbm5lY3RvcnMsIGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgIFxuICB9LCBbY29udHJvbHMuR1JJRF9XSURUSCwgY29udHJvbHMuR1JJRF9IRUlHSFQsIGFjdGl2YXRpb25TdGF0ZSwgYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZl0pO1xuXG4gIC8vIERlYnVnIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHRlc3QgcGF0dGVybiBzaW1pbGFyIHRvIHdoYXQncyBpbiB0aGUgaW1hZ2VcbiAgY29uc3QgY3JlYXRlVGVzdFBhdHRlcm4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT09IFRFU1QgUEFUVEVSTiBDUkVBVElPTiBTVEFSVCA9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgdGVzdCBwYXR0ZXJuXCIpO1xuICAgIC8vIENyZWF0ZSBhIG5ldyBhY3RpdmF0aW9uIHN0YXRlIGFycmF5XG4gICAgY29uc3QgbmV3QWN0aXZhdGlvblN0YXRlID0gbmV3IEZsb2F0MzJBcnJheShUT1RBTF9DSVJDTEVTKS5maWxsKDAuMCk7XG4gICAgXG4gICAgLy8gQWN0aXZhdGUgbm9kZXMgaW4gYSBwYXR0ZXJuIHNpbWlsYXIgdG8gdGhlIGltYWdlXG4gICAgLy8gVGhlIHBhdHRlcm4gc2hvd3MgYSB2ZXJ0aWNhbCBsaW5lIHdpdGggc29tZSBob3Jpem9udGFsIGNvbm5lY3RvcnMgYW5kIGRpYWdvbmFsIGJyYW5jaGVzXG4gICAgY29uc3QgcGF0dGVybiA9IFtcbiAgICAgIC8vIFZlcnRpY2FsIGNlbnRyYWwgY29sdW1uICh0b3AgdG8gYm90dG9tKVxuICAgICAgeyB4OiA1LCB5OiAyIH0sIC8vIFRvcCBub2RlXG4gICAgICB7IHg6IDUsIHk6IDMgfSwgXG4gICAgICB7IHg6IDUsIHk6IDQgfSwgXG4gICAgICB7IHg6IDUsIHk6IDUgfSwgXG4gICAgICB7IHg6IDUsIHk6IDYgfSwgXG4gICAgICB7IHg6IDUsIHk6IDcgfSwgLy8gQm90dG9tIG5vZGVcbiAgICAgIFxuICAgICAgLy8gSG9yaXpvbnRhbCBjb25uZWN0aW9uIGluIHRoZSBtaWRkbGUgcm93XG4gICAgICB7IHg6IDQsIHk6IDQgfSwgLy8gTGVmdCBub2RlIG9uIG1pZGRsZSByb3dcbiAgICAgIHsgeDogNiwgeTogNCB9LCAvLyBSaWdodCBub2RlIG9uIG1pZGRsZSByb3dcbiAgICAgIFxuICAgICAgLy8gRGlhZ29uYWwgY2x1c3RlciBhdCBib3R0b21cbiAgICAgIHsgeDogNCwgeTogNiB9LCAvLyBCb3R0b20gbGVmdFxuICAgICAgeyB4OiA2LCB5OiA2IH0sIC8vIEJvdHRvbSByaWdodFxuICAgICAgXG4gICAgICAvLyBEaWFnb25hbCBub2RlIGF0IHRvcFxuICAgICAgeyB4OiA2LCB5OiAzIH0sIC8vIFRvcCByaWdodCBkaWFnb25hbFxuICAgIF07XG4gICAgXG4gICAgLy8gU2V0IGFjdGl2ZSBub2Rlc1xuICAgIHBhdHRlcm4uZm9yRWFjaCgoe3gsIHl9KSA9PiB7XG4gICAgICBpZiAoeCA+PSAwICYmIHggPCBjb250cm9scy5HUklEX1dJRFRIICYmIHkgPj0gMCAmJiB5IDwgY29udHJvbHMuR1JJRF9IRUlHSFQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleCh5LCB4LCBjb250cm9scy5HUklEX1dJRFRIKTtcbiAgICAgICAgbmV3QWN0aXZhdGlvblN0YXRlW2luZGV4XSA9IDEuMDtcbiAgICAgICAgY29uc29sZS5sb2coYFNldHRpbmcgYWN0aXZlIG5vZGUgYXQgKCR7eH0sICR7eX0pLCBpbmRleDogJHtpbmRleH1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgY29ubmVjdG9yc1xuICAgIGNvbnN0IG5ld0ludGVuZGVkQ29ubmVjdG9yczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHtcbiAgICAgIC8vIERpYWdvbmFsIGNvbm5lY3Rpb25zIC0gdGhleSB1c2UgYm90dG9tLWxlZnQgY29vcmRpbmF0ZXMgb2YgdGhlIDJ4MiBncm91cFxuICAgICAgXCI1LDJcIjogQ09OTkVDVE9SX0RJQUdfQkxfVFIsIC8vIERpYWdvbmFsIGZyb20gKDUsMykgdG8gKDYsMikgLSB0b3BcbiAgICAgIFwiNCw1XCI6IENPTk5FQ1RPUl9ESUFHX0JMX1RSLCAvLyBEaWFnb25hbCBmcm9tICg0LDUpIHRvICg1LDYpIC0gYm90dG9tIGxlZnRcbiAgICAgIFwiNSw1XCI6IENPTk5FQ1RPUl9ESUFHX1RMX0JSICAvLyBEaWFnb25hbCBmcm9tICg1LDYpIHRvICg2LDUpIC0gYm90dG9tIHJpZ2h0XG4gICAgfTtcbiAgICBcbiAgICAvLyBDcmVhdGUgY21kLWhvcml6IGNvbm5lY3RvcnMgLSB0aGVzZSBjb25uZWN0IGRvdHMgaG9yaXpvbnRhbGx5IHdpdGggY21kLWNsaWNrXG4gICAgY29uc3QgbmV3Q21kSG9yaXpDb25uZWN0b3JzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xuICAgICAgLy8gTWlkZGxlIHJvdyBob3Jpem9udGFsIGNvbm5lY3RvclxuICAgICAgW1wiaGNtZDo0LDRcIl06IDEgIC8vIEhvcml6b250YWwgY29ubmVjdG9yIGZyb20gKDQsNCkgdG8gKDUsNClcbiAgICB9O1xuICAgIFxuICAgIC8vIExvZyBkZXRhaWxzIG9mIHRoZSB0ZXN0IHBhdHRlcm5cbiAgICBjb25zb2xlLmxvZyhcIlRlc3QgcGF0dGVybiBkZXRhaWxzOlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIi0gVG90YWwgYWN0aXZlIG5vZGVzOlwiLCBwYXR0ZXJuLmxlbmd0aCk7XG4gICAgXG4gICAgLy8gTG9nIGRpYWdvbmFsIGNvbm5lY3RvciBkZXRhaWxzIFxuICAgIE9iamVjdC5lbnRyaWVzKG5ld0ludGVuZGVkQ29ubmVjdG9ycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdmFsdWUgPT09IENPTk5FQ1RPUl9ESUFHX0JMX1RSID8gXCJkaWFnb25hbCBCTC1UUiAoLylcIiA6IFxuICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSBDT05ORUNUT1JfRElBR19UTF9CUiA/IFwiZGlhZ29uYWwgVEwtQlIgKFxcXFwpXCIgOiBcbiAgICAgICAgICAgICAgICAgICBgdW5rbm93biB0eXBlICR7dmFsdWV9YDtcbiAgICAgIGNvbnNvbGUubG9nKGAtIERpYWdvbmFsIGNvbm5lY3RvciBhdCAke2tleX06ICR7dHlwZX0gKHZhbHVlOiAke3ZhbHVlfSlgKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBMb2cgY21kLWhvcml6IGNvbm5lY3RvciBkZXRhaWxzXG4gICAgT2JqZWN0LmVudHJpZXMobmV3Q21kSG9yaXpDb25uZWN0b3JzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gMSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgLSBDbWQtaG9yaXogY29ubmVjdG9yIGF0ICR7a2V5LnN1YnN0cmluZyg1KX06IGFjdGl2ZWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFNldCBzdGF0ZXNcbiAgICBjb25zb2xlLmxvZyhcIlNldHRpbmcgYWN0aXZhdGlvbiBzdGF0ZSwgaW50ZW5kZWQgY29ubmVjdG9ycywgYW5kIGNtZC1ob3JpeiBjb25uZWN0b3JzLi4uXCIpO1xuICAgIHNldEFjdGl2YXRpb25TdGF0ZShuZXdBY3RpdmF0aW9uU3RhdGUpO1xuICAgIHNldEludGVuZGVkQ29ubmVjdG9ycyhuZXdJbnRlbmRlZENvbm5lY3RvcnMpO1xuICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyhuZXdDbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiVGVzdCBwYXR0ZXJuIGNyZWF0ZWRcIik7XG4gICAgXG4gICAgLy8gQWRkIGNoZWNrIGFmdGVyIHNtYWxsIGRlbGF5IHRvIHZlcmlmeSBzdGF0ZSB3YXMgdXBkYXRlZFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJWZXJpZmljYXRpb24gb2Ygc3RhdGUgdXBkYXRlOlwiKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiLSBpbnRlbmRlZENvbm5lY3RvcnM6XCIsIGludGVuZGVkQ29ubmVjdG9ycyk7XG4gICAgICBjb25zb2xlLmxvZyhcIi0gbm9uemVybyBpbnRlbmRlZENvbm5lY3RvcnM6XCIsIE9iamVjdC5lbnRyaWVzKGludGVuZGVkQ29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgIT09IENPTk5FQ1RPUl9OT05FKSk7XG4gICAgICBjb25zb2xlLmxvZyhcIi0gY21kSG9yaXpDb25uZWN0b3JzOlwiLCBjbWRIb3JpekNvbm5lY3RvcnMpO1xuICAgICAgY29uc29sZS5sb2coXCItIGFjdGl2ZSBjbWRIb3JpekNvbm5lY3RvcnM6XCIsIE9iamVjdC5lbnRyaWVzKGNtZEhvcml6Q29ubmVjdG9ycykuZmlsdGVyKChbXywgdl0pID0+IHYgPT09IDEpKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgb3VyIGV4cGVjdGF0aW9uIG1hdGNoZXMgcmVhbGl0eVxuICAgICAgY29uc3QgYWxsQ29ubmVjdG9yc01hdGNoID0gXG4gICAgICAgIE9iamVjdC5rZXlzKG5ld0ludGVuZGVkQ29ubmVjdG9ycykubGVuZ3RoID09PSBcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhpbnRlbmRlZENvbm5lY3RvcnMpLmZpbHRlcigoW18sIHZdKSA9PiB2ICE9PSBDT05ORUNUT1JfTk9ORSkubGVuZ3RoICYmXG4gICAgICAgIE9iamVjdC5rZXlzKG5ld0NtZEhvcml6Q29ubmVjdG9ycykuZmlsdGVyKGsgPT4gbmV3Q21kSG9yaXpDb25uZWN0b3JzW2tdID09PSAxKS5sZW5ndGggPT09XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoY21kSG9yaXpDb25uZWN0b3JzKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiA9PT0gMSkubGVuZ3RoO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhcIkFsbCBjb25uZWN0b3JzIHNldCBjb3JyZWN0bHk6XCIsIGFsbENvbm5lY3RvcnNNYXRjaCA/IFwiWUVTXCIgOiBcIk5PXCIpO1xuICAgIH0sIDEwMCk7XG4gICAgXG4gICAgLy8gQXV0b21hdGljYWxseSB0cmlnZ2VyIGN1c3RvbSBzYXZlIGFmdGVyIGEgZGVsYXlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09PSBBVVRPLVNBVkUgVEVTVCBQQVRURVJOIFNUQVJUID09PT09PT09PT1cIik7XG4gICAgICBjb25zb2xlLmxvZyhcIkF1dG8tc2F2aW5nIHRlc3QgcGF0dGVybiB3aXRoIGRpcmVjdCByZWZlcmVuY2UgdG8gbmV3IHN0YXRlcy4uLlwiKTtcbiAgICAgIC8vIENhbGwgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHNhdmVHcmlkU3RhdGUgdGhhdCB1c2VzIHRoZSBuZXcgY29ubmVjdG9yIHN0YXRlcyBkaXJlY3RseVxuICAgICAgc2F2ZUdyaWRTdGF0ZVdpdGhEaXJlY3RWYWx1ZXMobmV3QWN0aXZhdGlvblN0YXRlLCBuZXdJbnRlbmRlZENvbm5lY3RvcnMsIG5ld0NtZEhvcml6Q29ubmVjdG9ycyk7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT0gQVVUTy1TQVZFIFRFU1QgUEFUVEVSTiBFTkQgPT09PT09PT09PVwiKTtcbiAgICB9LCA1MDApOyAvLyA1MDBtcyBkZWxheSBzaG91bGQgYmUgc3VmZmljaWVudFxuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09PSBURVNUIFBBVFRFUk4gQ1JFQVRJT04gRU5EID09PT09PT09PT1cIik7XG4gIH0sIFtUT1RBTF9DSVJDTEVTLCBjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVCwgc2V0QWN0aXZhdGlvblN0YXRlLCBzZXRJbnRlbmRlZENvbm5lY3RvcnMsIHNldENtZEhvcml6Q29ubmVjdG9ycywgaW50ZW5kZWRDb25uZWN0b3JzLCBjbWRIb3JpekNvbm5lY3RvcnNdKTtcbiAgXG4gIC8vIERlYnVnIGZ1bmN0aW9uIHRvIGNsZWFyIGV2ZXJ5dGhpbmdcbiAgY29uc3QgY2xlYXJBbGwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJDbGVhcmluZyBhbGwgc3RhdGVcIik7XG4gICAgc2V0QWN0aXZhdGlvblN0YXRlKG5ldyBGbG9hdDMyQXJyYXkoVE9UQUxfQ0lSQ0xFUykuZmlsbCgwLjApKTtcbiAgICBzZXRJbnRlbmRlZENvbm5lY3RvcnMoe30pO1xuICAgIHNldENtZEhvcml6Q29ubmVjdG9ycyh7fSk7XG4gICAgXG4gICAgLy8gQWxzbyBjbGVhciB0aGUgcmVmc1xuICAgIGludGVuZGVkQ29ubmVjdG9yc1JlZi5jdXJyZW50ID0ge307XG4gICAgY21kSG9yaXpDb25uZWN0b3JzUmVmLmN1cnJlbnQgPSB7fTtcbiAgfSwgW1RPVEFMX0NJUkNMRVMsIHNldEFjdGl2YXRpb25TdGF0ZSwgc2V0SW50ZW5kZWRDb25uZWN0b3JzLCBzZXRDbWRIb3JpekNvbm5lY3RvcnNdKTtcbiAgXG4gIC8vIE5vdyB0aGF0IHdlJ3ZlIGRlZmluZWQgdGhlIGRlYnVnIGZ1bmN0aW9ucywgYWRkIHRoZSBkZWJ1ZyBjb250cm9sc1xuICB1c2VDb250cm9scygnRGVidWcnLCAoKSA9PiAoe1xuICAgIGNyZWF0ZVRlc3RQYXR0ZXJuOiBidXR0b24oKCkgPT4gY3JlYXRlVGVzdFBhdHRlcm4oKSksXG4gICAgY2xlYXJBbGw6IGJ1dHRvbigoKSA9PiBjbGVhckFsbCgpKSxcbiAgICBkaXJlY3RTYXZlOiBidXR0b24oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJEaXJlY3Qgc2F2ZSB0cmlnZ2VyZWQgbWFudWFsbHlcIik7XG4gICAgICAvLyBVc2UgdGhlIHJlZiBkaXJlY3RseSB0byBlbnN1cmUgd2UgZ2V0IHRoZSBsYXRlc3Qgc3RhdGVcbiAgICAgIGNvbnN0IGN1cnJlbnRBY3RpdmF0aW9uID0gYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZi5jdXJyZW50IFxuICAgICAgICA/IGFjdGl2YXRpb25BdHRyaWJ1dGVSZWYuY3VycmVudC5hcnJheSBhcyBGbG9hdDMyQXJyYXkgXG4gICAgICAgIDogYWN0aXZhdGlvblN0YXRlO1xuICAgICAgXG4gICAgICAvLyBVc2UgdGhlIHJlZiB2YWx1ZXMgd2hpY2ggc2hvdWxkIGhhdmUgdGhlIG1vc3QgdXAtdG8tZGF0ZSBzdGF0ZVxuICAgICAgY29uc3QgY3VycmVudEludGVuZGVkQ29ubmVjdG9ycyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW50ZW5kZWRDb25uZWN0b3JzUmVmLmN1cnJlbnQgfHwge30pKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNtZEhvcml6Q29ubmVjdG9yc1JlZi5jdXJyZW50IHx8IHt9KSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKFwiUmVmIHZhbHVlcyBmb3IgY29ubmVjdG9yczpcIiwge1xuICAgICAgICBpbnRlbmRlZDogY3VycmVudEludGVuZGVkQ29ubmVjdG9ycyxcbiAgICAgICAgY21kSG9yaXo6IGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnNcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBzYXZlR3JpZFN0YXRlV2l0aERpcmVjdFZhbHVlcyhcbiAgICAgICAgY3VycmVudEFjdGl2YXRpb24sXG4gICAgICAgIGN1cnJlbnRJbnRlbmRlZENvbm5lY3RvcnMsXG4gICAgICAgIGN1cnJlbnRDbWRIb3JpekNvbm5lY3RvcnNcbiAgICAgICk7XG4gICAgfSlcbiAgfSkpO1xuXG4gIHJldHVybiAoXG4gICAgPGdyb3VwPlxuICAgICAgPGluc3RhbmNlZE1lc2ggXG4gICAgICAgIHJlZj17bWVzaFJlZn0gXG4gICAgICAgIGFyZ3M9e1t1bmRlZmluZWQsIHVuZGVmaW5lZCwgVE9UQUxfQ0lSQ0xFU119XG4gICAgICAgIGtleT17YGNpcmNsZXMtJHtUT1RBTF9DSVJDTEVTfWB9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNpcmNsZUNsaWNrfSAvLyBBdHRhY2ggY2xpY2sgaGFuZGxlclxuICAgICAgICBwb3NpdGlvbj17WzAsIDAsIC0wLjFdfSAvLyBQb3NpdGlvbiBjaXJjbGVzIGJlaGluZCBjb25uZWN0b3JzXG4gICAgICA+XG4gICAgICAgIHsvKiBQYXNzIGFyZ3MgZGlyZWN0bHkgdG8gZml4IFR5cGVTY3JpcHQgZXJyb3IgKi99XG4gICAgICAgIDxwbGFuZUdlb21ldHJ5IGFyZ3M9e1sxLCAxXX0+IFxuICAgICAgICAgIHsvKiBBdHRhY2ggdGhlIGluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlIGZvciBhY3RpdmF0aW9uIHN0YXRlICovfVxuICAgICAgICAgIDxpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGVcbiAgICAgICAgICAgIHJlZj17YWN0aXZhdGlvbkF0dHJpYnV0ZVJlZn1cbiAgICAgICAgICAgIGF0dGFjaD1cImF0dHJpYnV0ZXMtYV9hY3RpdmF0ZWRcIlxuICAgICAgICAgICAgYXJncz17W2FjdGl2YXRpb25TdGF0ZSwgMV19IC8vIFBhc3MgaW5pdGlhbCBzdGF0ZSwgaXRlbSBzaXplIDFcbiAgICAgICAgICAgIHVzYWdlPXtUSFJFRS5EeW5hbWljRHJhd1VzYWdlfSAvLyBNYXJrIGFzIGR5bmFtaWNcbiAgICAgICAgICAvPlxuICAgICAgICA8L3BsYW5lR2VvbWV0cnk+IFxuICAgICAgICA8Y2lyY2xlTWF0ZXJpYWwgXG4gICAgICAgICAgICByZWY9e21hdGVyaWFsUmVmfSBcbiAgICAgICAgICAgIHRyYW5zcGFyZW50PXt0cnVlfSBcbiAgICAgICAgICAgIGtleT17Q2lyY2xlTWF0ZXJpYWwua2V5fSAvLyBBZGQga2V5IGZvciBtYXRlcmlhbCBob3Rzd2FwcGluZyBpZiBuZWVkZWRcbiAgICAgICAgLz5cbiAgICAgIDwvaW5zdGFuY2VkTWVzaD5cblxuICAgICAgey8qIE1haW4gQ29ubmVjdG9yIFBsYW5lIChFeGlzdGluZykgKi99XG4gICAgICA8bWVzaFxuICAgICAgICBwb3NpdGlvbj17WzAsIDAsIDAuMV19IC8vIEtlZXAgdGhpcyBzbGlnaHRseSBpbiBmcm9udCBvZiBjaXJjbGVzXG4gICAgICAgIGtleT17YGNvbm5lY3Rvci1wbGFuZS0ke2NvbnRyb2xzLkdSSURfV0lEVEh9LSR7Y29udHJvbHMuR1JJRF9IRUlHSFR9LSR7Y29udHJvbHMudmlzdWFsU2NhbGV9YH1cbiAgICAgICAgb25DbGljaz17aGFuZGxlQ29ubmVjdG9yQ2xpY2t9IFxuICAgICAgPlxuICAgICAgICA8cGxhbmVHZW9tZXRyeSBhcmdzPXtbcGxhbmVXaWR0aCwgcGxhbmVIZWlnaHRdfSAvPlxuICAgICAgICA8Y29ubmVjdG9yTWF0ZXJpYWwgXG4gICAgICAgICAgcmVmPXtjb25uZWN0b3JNYXRlcmlhbFJlZn1cbiAgICAgICAgICBrZXk9e0Nvbm5lY3Rvck1hdGVyaWFsLmtleX1cbiAgICAgICAgICB0cmFuc3BhcmVudD17dHJ1ZX0gXG4gICAgICAgICAgc2lkZT17VEhSRUUuRG91YmxlU2lkZX0gXG4gICAgICAgICAgLy8gUGFzcyByZXF1aXJlZCB1bmlmb3JtcyAoY21kSG9yaXogdGV4dHVyZSByZW1vdmVkKVxuICAgICAgICAgIHVfc3RhdGVUZXh0dXJlPXtzdGF0ZVRleHR1cmV9IFxuICAgICAgICAgIHVfaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlPXtpbnRlbmRlZENvbm5lY3RvclRleHR1cmV9XG4gICAgICAgICAgLy8gdV9jbWRIb3JpekNvbm5lY3RvclRleHR1cmUgcmVtb3ZlZFxuICAgICAgICAgIHVfZ3JpZERpbWVuc2lvbnM9e1tjb250cm9scy5HUklEX1dJRFRILCBjb250cm9scy5HUklEX0hFSUdIVF19XG4gICAgICAgICAgdV90ZXh0dXJlUmVzb2x1dGlvbj17W2NvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hUXX0gXG4gICAgICAgICAgdV9yYWRpdXNBPXtCQVNFX1JBRElVU19BfVxuICAgICAgICAgIHVfcmFkaXVzQj17QkFTRV9SQURJVVNfQn1cbiAgICAgICAgICB1X2dyaWRTcGFjaW5nPXtjb250cm9scy52aXN1YWxTY2FsZX1cbiAgICAgICAgICB1X2NlbnRlck9mZnNldD17W2NlbnRlck9mZnNldC54LCBjZW50ZXJPZmZzZXQueV19XG4gICAgICAgICAgdV9wbGFuZVNpemU9e1twbGFuZVdpZHRoLCBwbGFuZUhlaWdodF19XG4gICAgICAgIC8+XG4gICAgICA8L21lc2g+XG5cbiAgICAgIHsvKiBOZXcgQ21kLUNsaWNrIEhvcml6b250YWwgQ29ubmVjdG9yIFBsYW5lICovfVxuICAgICAgPG1lc2hcbiAgICAgICAgcG9zaXRpb249e1swLCAwLCAwLjJdfSAvLyBQb3NpdGlvbiB0aGlzIHNsaWdodGx5IGluIGZyb250IG9mIHRoZSBtYWluIGNvbm5lY3RvcnNcbiAgICAgICAga2V5PXtgY21kLWhvcml6LWNvbm5lY3Rvci1wbGFuZS0ke2NvbnRyb2xzLkdSSURfV0lEVEh9LSR7Y29udHJvbHMuR1JJRF9IRUlHSFR9LSR7Y29udHJvbHMudmlzdWFsU2NhbGV9YH1cbiAgICAgICAgLy8gTm8gY2xpY2sgaGFuZGxlciBuZWVkZWQgaGVyZSwgaW50ZXJhY3Rpb24gaXMgdmlhIGNpcmNsZXNcbiAgICAgID5cbiAgICAgICAgey8qIFVzZSB0aGUgc2FtZSBwbGFuZSBnZW9tZXRyeSBkaW1lbnNpb25zICovfVxuICAgICAgICA8cGxhbmVHZW9tZXRyeSBhcmdzPXtbcGxhbmVXaWR0aCwgcGxhbmVIZWlnaHRdfSAvPiBcbiAgICAgICAgPGNtZEhvcml6Q29ubmVjdG9yTWF0ZXJpYWxcbiAgICAgICAgICByZWY9e2NtZEhvcml6TWF0ZXJpYWxSZWZ9XG4gICAgICAgICAga2V5PXtDbWRIb3JpekNvbm5lY3Rvck1hdGVyaWFsLmtleX1cbiAgICAgICAgICB0cmFuc3BhcmVudD17dHJ1ZX1cbiAgICAgICAgICBzaWRlPXtUSFJFRS5Eb3VibGVTaWRlfVxuICAgICAgICAgIC8vIFBhc3MgbmVjZXNzYXJ5IHVuaWZvcm1zIGZvciB0aGlzIHNwZWNpZmljIG1hdGVyaWFsXG4gICAgICAgICAgdV9zdGF0ZVRleHR1cmU9e3N0YXRlVGV4dHVyZX0gICAgICAgICAgICAgICAgIC8vIE5lZWQgZm9yIGNoZWNraW5nIGFjdGl2ZSBjaXJjbGVzXG4gICAgICAgICAgdV9jbWRIb3JpekNvbm5lY3RvclRleHR1cmU9e2NtZEhvcml6Q29ubmVjdG9yVGV4dHVyZX0gLy8gVGhlIHRleHR1cmUgd2l0aCBjbWQtaG9yaXogc3RhdGVcbiAgICAgICAgICB1X2dyaWREaW1lbnNpb25zPXtbY29udHJvbHMuR1JJRF9XSURUSCwgY29udHJvbHMuR1JJRF9IRUlHSFRdfSAgLy8gR3JpZCBkaW1lbnNpb25zXG4gICAgICAgICAgdV90ZXh0dXJlUmVzb2x1dGlvbj17W2NvbnRyb2xzLkdSSURfV0lEVEgsIGNvbnRyb2xzLkdSSURfSEVJR0hUXX0gLy8gU3RhdGUgdGV4dHVyZSByZXNvbHV0aW9uXG4gICAgICAgICAgdV9yYWRpdXNBPXtCQVNFX1JBRElVU19BfSAgICAgICAgICAgICAgICAgICAgIC8vIEJhc2UgcmFkaWlcbiAgICAgICAgICB1X3JhZGl1c0I9e0JBU0VfUkFESVVTX0J9XG4gICAgICAgICAgdV9ncmlkU3BhY2luZz17Y29udHJvbHMudmlzdWFsU2NhbGV9ICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgdmlzdWFsIHNjYWxlXG4gICAgICAgICAgdV9maXhlZFNwYWNpbmc9e0ZJWEVEX1NQQUNJTkd9ICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIGJhc2UgZml4ZWQgc3BhY2luZ1xuICAgICAgICAgIHVfY2VudGVyT2Zmc2V0PXtbY2VudGVyT2Zmc2V0LngsIGNlbnRlck9mZnNldC55XX0gLy8gR3JpZCBvZmZzZXRcbiAgICAgICAgICB1X3BsYW5lU2l6ZT17W3BsYW5lV2lkdGgsIHBsYW5lSGVpZ2h0XX0gICAgICAgLy8gUGxhbmUgZGltZW5zaW9uc1xuICAgICAgICAvPlxuICAgICAgPC9tZXNoPlxuXG4gICAgPC9ncm91cD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyaWRTY2VuZTsgIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTWVtbyIsInVzZVJlZiIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJUSFJFRSIsInVzZUNvbnRyb2xzIiwiYnV0dG9uIiwiZm9sZGVyIiwidXNlRnJhbWUiLCJDaXJjbGVNYXRlcmlhbCIsIkNvbm5lY3Rvck1hdGVyaWFsIiwiQ21kSG9yaXpDb25uZWN0b3JNYXRlcmlhbCIsIkZJWEVEX1NQQUNJTkciLCJCQVNFX1JBRElVU19BIiwiQkFTRV9SQURJVVNfQiIsIkNPTk5FQ1RPUl9OT05FIiwiQ09OTkVDVE9SX0RJQUdfVExfQlIiLCJDT05ORUNUT1JfRElBR19CTF9UUiIsIkNPTk5FQ1RPUl9IT1JJWl9UIiwiQ09OTkVDVE9SX0hPUklaX0IiLCJCQVNFX0dSSURfU1BBQ0lORyIsImdldEluZGV4Iiwicm93IiwiY29sIiwiZ3JpZFdpZHRoIiwiZ2V0Q29vcmRzIiwiaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJnZXRDZW50ZXJPZmZzZXQiLCJncmlkSGVpZ2h0Iiwic3BhY2luZyIsInRvdGFsV2lkdGgiLCJ0b3RhbEhlaWdodCIsIlZlY3RvcjIiLCJnZXRXb3JsZFBvc2l0aW9uIiwiY2VudGVyT2Zmc2V0IiwieCIsInkiLCJkdW1teSIsIk9iamVjdDNEIiwidGVtcE1hdHJpeCIsIk1hdHJpeDQiLCJ0ZW1wVmVjIiwiVmVjdG9yMyIsImdldEhvcml6Q21kQ29ubmVjdG9yS2V5IiwiZ2V0Q2VsbEdyb3VwS2V5IiwiY2VsbFgiLCJjZWxsWSIsIkdyaWRTY2VuZSIsImNvbnRyb2xzIiwic2V0TGV2YUNvbnRyb2wiLCJHUklEX1dJRFRIIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJzdGVwIiwiR1JJRF9IRUlHSFQiLCJ2aXN1YWxTY2FsZSIsImxhYmVsIiwic2F2ZVN0YXRlIiwiY29uc29sZSIsImxvZyIsImN1cnJlbnRBY3RpdmF0aW9uIiwiYWN0aXZhdGlvbkF0dHJpYnV0ZVJlZiIsImN1cnJlbnQiLCJhcnJheSIsImFjdGl2YXRpb25TdGF0ZSIsImN1cnJlbnRJbnRlbmRlZENvbm5lY3RvcnMiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJpbnRlbmRlZENvbm5lY3RvcnNSZWYiLCJjdXJyZW50Q21kSG9yaXpDb25uZWN0b3JzIiwiY21kSG9yaXpDb25uZWN0b3JzUmVmIiwiT2JqZWN0Iiwia2V5cyIsImVudHJpZXMiLCJmaWx0ZXIiLCJfIiwidiIsInNhdmVHcmlkU3RhdGVXaXRoRGlyZWN0VmFsdWVzIiwibG9hZFN0YXRlIiwianNvbklucHV0IiwicHJvbXB0IiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIm5vZGVzIiwiZWRnZXMiLCJFcnJvciIsImxlbmd0aCIsInNldFRpbWVvdXQiLCJuZXdUb3RhbENpcmNsZXMiLCJuZXdBY3RpdmF0aW9uU3RhdGUiLCJGbG9hdDMyQXJyYXkiLCJmaWxsIiwiZm9yRWFjaCIsIm5vZGUiLCJ3YXJuIiwibmV3SW50ZW5kZWRDb25uZWN0b3JzIiwibmV3Q21kSG9yaXpDb25uZWN0b3JzIiwiZWRnZSIsImNvbm5lY3RvclR5cGUiLCJpc1ZhbGlkIiwidHlwZSIsImtleSIsInZhbHVlcyIsInNldEFjdGl2YXRpb25TdGF0ZSIsInNldEludGVuZGVkQ29ubmVjdG9ycyIsInNldENtZEhvcml6Q29ubmVjdG9ycyIsImludGVuZGVkQ29ubmVjdG9ycyIsImNtZEhvcml6Q29ubmVjdG9ycyIsImVycm9yIiwiYWxlcnQiLCJtZXNzYWdlIiwiU3RyaW5nIiwiVE9UQUxfQ0lSQ0xFUyIsInBsYW5lV2lkdGgiLCJwbGFuZUhlaWdodCIsInRvdGFsIiwib2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJtZXNoUmVmIiwibWF0ZXJpYWxSZWYiLCJjb25uZWN0b3JNYXRlcmlhbFJlZiIsImNtZEhvcml6TWF0ZXJpYWxSZWYiLCJnZXRJbnRlbmRlZENvbm5lY3RvciIsIm5lZWRzVXBkYXRlIiwicG9zaXRpb24iLCJzZXQiLCJjdXJyZW50TWF0cml4IiwiZ2V0TWF0cml4QXQiLCJxdWF0ZXJuaW9uIiwiUXVhdGVybmlvbiIsInNjYWxlVmVjIiwiZGVjb21wb3NlIiwibWF0cml4IiwiY29tcG9zZSIsInNldE1hdHJpeEF0IiwiaW5zdGFuY2VNYXRyaXgiLCJ1bmlmb3JtcyIsInVfcmFkaXVzQSIsInVfcmFkaXVzQiIsInNjYWxlIiwidG9GaXhlZCIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsImhhbmRsZUNpcmNsZUNsaWNrIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJpbnN0YW5jZUlkIiwidW5kZWZpbmVkIiwiaXNDbWRDbGljayIsIm1ldGFLZXkiLCJjdHJsS2V5IiwicG9pbnQiLCJjdXJyZW50U3RhdGUiLCJpbnN0YW5jZUNlbnRlciIsImRpc3RGcm9tQ2VudGVyIiwiZGlzdGFuY2VUbyIsImN1cnJlbnRJbm5lclJhZGl1cyIsImlzSW5zaWRlIiwicmlnaHRJbmRleCIsImNhbkNvbm5lY3RCYXNlIiwiY29ubmVjdG9yQmVsb3ciLCJjb25uZWN0b3JBZGphY2VudCIsImlzQmxvY2tlZEJ5RGlhZ29uYWwiLCJsZWZ0QWN0aXZlIiwicmlnaHRBY3RpdmUiLCJjb25uZWN0b3JLZXkiLCJwcmV2IiwibmV3VmFsdWUiLCJuZXdTdGF0ZSIsImFsbENvbm5lY3RvcnMiLCJhY3RpdmVDb25uZWN0b3JzIiwib2xkVmFsdWUiLCJzdGF0ZVRleHR1cmUiLCJ0ZXh0dXJlIiwiRGF0YVRleHR1cmUiLCJSZWRGb3JtYXQiLCJGbG9hdFR5cGUiLCJtaW5GaWx0ZXIiLCJOZWFyZXN0RmlsdGVyIiwibWFnRmlsdGVyIiwiaW1hZ2UiLCJoYW5kbGVDb25uZWN0b3JDbGljayIsImNsaWNrUG9pbnQiLCJncmlkWCIsInJvdW5kIiwiZ3JpZFkiLCJjZWxsQ2VudGVyIiwic3FydCIsInBvdyIsIm5ld0Nvbm5lY3RvcnMiLCJncm91cFgiLCJncm91cFkiLCJibEluZGV4IiwiYnJJbmRleCIsInRsSW5kZXgiLCJ0ckluZGV4IiwiaXNWYWxpZEdyb3VwIiwiYmxBY3RpdmUiLCJickFjdGl2ZSIsInRsQWN0aXZlIiwidHJBY3RpdmUiLCJibFBvcyIsImJyUG9zIiwidGxQb3MiLCJ0clBvcyIsImNlbnRlclgiLCJjZW50ZXJZIiwiZGlzdFRvQ2VudGVyIiwiaXNDZW50ZXJDbGljayIsImNhblVzZURpYWdUTEJSIiwiY2FuVXNlRGlhZ0JMVFIiLCJoYXNEaWFnb25hbE9wdGlvbnMiLCJjdXJyZW50Q29ubmVjdG9yIiwiZ3JvdXBLZXkiLCJoYXNIb3JpekNtZEJlbG93IiwiaGFzSG9yaXpDbWRBYm92ZSIsImlzQmxvY2tlZEJ5SG9yaXoiLCJuZXdDb25uZWN0b3IiLCJwb3RlbnRpYWxDb25uZWN0b3JUeXBlIiwiY2xpY2tlZFR5cGUiLCJkaXN0VG9CTFRSIiwiYWJzIiwiZGlzdFRvVExCUiIsInVwZGF0ZWQiLCJ0eXBlU3RyIiwiaGFzQ2hhbmdlcyIsImhhc0NtZEhvcml6Q2hhbmdlcyIsImNvbm5lY3RvciIsInNwbGl0IiwibWFwIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwibGVmdEluZGV4IiwiaW50ZW5kZWRDb25uZWN0b3JUZXh0dXJlIiwiY21kSG9yaXpDb25uZWN0b3JUZXh0dXJlIiwiY29ubmVjdG9ycyIsInRleHR1cmVTaXplIiwiZGF0YVNpemUiLCJmcnVzdHVtQ3VsbGVkIiwiZ2VvbWV0cnkiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJib3VuZGluZ1NwaGVyZSIsInJhZGl1cyIsInN0YXRzUmVmIiwiZG9jdW1lbnQiLCJib2R5IiwicmVtb3ZlQ2hpbGQiLCJkb20iLCJzdGF0ZSIsInVwZGF0ZSIsImRpcmVjdEludGVuZGVkQ29ubmVjdG9ycyIsImRpcmVjdENtZEhvcml6Q29ubmVjdG9ycyIsImN1cnJlbnRHcmlkV2lkdGgiLCJjdXJyZW50R3JpZEhlaWdodCIsImZyb20iLCJ2YWwiLCJpbnRlbmRlZENvbm5lY3RvcnNDb3B5IiwiY21kSG9yaXpDb25uZWN0b3JzQ29weSIsIm5vblplcm9JbnRlbmRlZENvbm5lY3RvcnMiLCJhY3RpdmVIb3JpekNvbm5lY3RvcnMiLCJpIiwicHVzaCIsImVkZ2VUeXBlIiwiZGF0YVN0ciIsImJsb2IiLCJCbG9iIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiYSIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiZG93bmxvYWQiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmV2b2tlT2JqZWN0VVJMIiwic2F2ZUdyaWRTdGF0ZSIsImNyZWF0ZVRlc3RQYXR0ZXJuIiwicGF0dGVybiIsImFsbENvbm5lY3RvcnNNYXRjaCIsImsiLCJjbGVhckFsbCIsImRpcmVjdFNhdmUiLCJpbnRlbmRlZCIsImNtZEhvcml6IiwiZ3JvdXAiLCJpbnN0YW5jZWRNZXNoIiwicmVmIiwiYXJncyIsIm9uQ2xpY2siLCJwbGFuZUdlb21ldHJ5IiwiaW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIiwiYXR0YWNoIiwidXNhZ2UiLCJEeW5hbWljRHJhd1VzYWdlIiwiY2lyY2xlTWF0ZXJpYWwiLCJ0cmFuc3BhcmVudCIsIm1lc2giLCJjb25uZWN0b3JNYXRlcmlhbCIsInNpZGUiLCJEb3VibGVTaWRlIiwidV9zdGF0ZVRleHR1cmUiLCJ1X2ludGVuZGVkQ29ubmVjdG9yVGV4dHVyZSIsInVfZ3JpZERpbWVuc2lvbnMiLCJ1X3RleHR1cmVSZXNvbHV0aW9uIiwidV9ncmlkU3BhY2luZyIsInVfY2VudGVyT2Zmc2V0IiwidV9wbGFuZVNpemUiLCJjbWRIb3JpekNvbm5lY3Rvck1hdGVyaWFsIiwidV9jbWRIb3JpekNvbm5lY3RvclRleHR1cmUiLCJ1X2ZpeGVkU3BhY2luZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/GridScene.tsx\n");

/***/ }),

/***/ "./components/constants.ts":
/*!*********************************!*\
  !*** ./components/constants.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE_RADIUS_A: () => (/* binding */ BASE_RADIUS_A),\n/* harmony export */   BASE_RADIUS_B: () => (/* binding */ BASE_RADIUS_B),\n/* harmony export */   CONNECTOR_DIAG_BL_TR: () => (/* binding */ CONNECTOR_DIAG_BL_TR),\n/* harmony export */   CONNECTOR_DIAG_TL_BR: () => (/* binding */ CONNECTOR_DIAG_TL_BR),\n/* harmony export */   CONNECTOR_HORIZ_B: () => (/* binding */ CONNECTOR_HORIZ_B),\n/* harmony export */   CONNECTOR_HORIZ_CMD: () => (/* binding */ CONNECTOR_HORIZ_CMD),\n/* harmony export */   CONNECTOR_HORIZ_T: () => (/* binding */ CONNECTOR_HORIZ_T),\n/* harmony export */   CONNECTOR_NONE: () => (/* binding */ CONNECTOR_NONE),\n/* harmony export */   FIXED_SPACING: () => (/* binding */ FIXED_SPACING)\n/* harmony export */ });\n// Base geometry values\nconst BASE_RADIUS_A = 0.5; // Outer radius\nconst BASE_RADIUS_B = 0.4; // Inner radius\n// Calculated fixed spacing based on desired overlap\nconst FIXED_SPACING = BASE_RADIUS_A + BASE_RADIUS_B; // 0.5 + 0.4 = 0.9 \n// Define connector types as constants\nconst CONNECTOR_NONE = 0;\nconst CONNECTOR_DIAG_TL_BR = 1; // Diagonal \\\nconst CONNECTOR_DIAG_BL_TR = 2; // Diagonal /\nconst CONNECTOR_HORIZ_T = 3; // Horizontal Top\nconst CONNECTOR_HORIZ_B = 4; // Horizontal Bottom\nconst CONNECTOR_HORIZ_CMD = 5; // Cmd-click horizontal connector \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbnN0YW50cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx1QkFBdUI7QUFDaEIsTUFBTUEsZ0JBQWdCLElBQUksQ0FBQyxlQUFlO0FBQzFDLE1BQU1DLGdCQUFnQixJQUFJLENBQUMsZUFBZTtBQUVqRCxvREFBb0Q7QUFDN0MsTUFBTUMsZ0JBQWdCRixnQkFBZ0JDLGNBQWMsQ0FBQyxtQkFBbUI7QUFFL0Usc0NBQXNDO0FBQy9CLE1BQU1FLGlCQUFpQixFQUFFO0FBQ3pCLE1BQU1DLHVCQUF1QixFQUFFLENBQUMsYUFBYTtBQUM3QyxNQUFNQyx1QkFBdUIsRUFBRSxDQUFDLGFBQWE7QUFDN0MsTUFBTUMsb0JBQW9CLEVBQUUsQ0FBSSxpQkFBaUI7QUFDakQsTUFBTUMsb0JBQW9CLEVBQUUsQ0FBSSxvQkFBb0I7QUFDcEQsTUFBTUMsc0JBQXNCLEVBQUUsQ0FBRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9jb21wb25lbnRzL2NvbnN0YW50cy50cz83N2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2UgZ2VvbWV0cnkgdmFsdWVzXG5leHBvcnQgY29uc3QgQkFTRV9SQURJVVNfQSA9IDAuNTsgLy8gT3V0ZXIgcmFkaXVzXG5leHBvcnQgY29uc3QgQkFTRV9SQURJVVNfQiA9IDAuNDsgLy8gSW5uZXIgcmFkaXVzXG5cbi8vIENhbGN1bGF0ZWQgZml4ZWQgc3BhY2luZyBiYXNlZCBvbiBkZXNpcmVkIG92ZXJsYXBcbmV4cG9ydCBjb25zdCBGSVhFRF9TUEFDSU5HID0gQkFTRV9SQURJVVNfQSArIEJBU0VfUkFESVVTX0I7IC8vIDAuNSArIDAuNCA9IDAuOSBcblxuLy8gRGVmaW5lIGNvbm5lY3RvciB0eXBlcyBhcyBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBDT05ORUNUT1JfTk9ORSA9IDA7XG5leHBvcnQgY29uc3QgQ09OTkVDVE9SX0RJQUdfVExfQlIgPSAxOyAvLyBEaWFnb25hbCBcXFxuZXhwb3J0IGNvbnN0IENPTk5FQ1RPUl9ESUFHX0JMX1RSID0gMjsgLy8gRGlhZ29uYWwgL1xuZXhwb3J0IGNvbnN0IENPTk5FQ1RPUl9IT1JJWl9UID0gMzsgICAgLy8gSG9yaXpvbnRhbCBUb3BcbmV4cG9ydCBjb25zdCBDT05ORUNUT1JfSE9SSVpfQiA9IDQ7ICAgIC8vIEhvcml6b250YWwgQm90dG9tXG5leHBvcnQgY29uc3QgQ09OTkVDVE9SX0hPUklaX0NNRCA9IDU7ICAvLyBDbWQtY2xpY2sgaG9yaXpvbnRhbCBjb25uZWN0b3IgIl0sIm5hbWVzIjpbIkJBU0VfUkFESVVTX0EiLCJCQVNFX1JBRElVU19CIiwiRklYRURfU1BBQ0lORyIsIkNPTk5FQ1RPUl9OT05FIiwiQ09OTkVDVE9SX0RJQUdfVExfQlIiLCJDT05ORUNUT1JfRElBR19CTF9UUiIsIkNPTk5FQ1RPUl9IT1JJWl9UIiwiQ09OTkVDVE9SX0hPUklaX0IiLCJDT05ORUNUT1JfSE9SSVpfQ01EIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/constants.ts\n");

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"@react-three/fiber\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/drei */ \"@react-three/drei\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_react_three_drei__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leva */ \"leva\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leva__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _components_GridScene__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/GridScene */ \"./components/GridScene.tsx\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../styles/Home.module.css */ \"./styles/Home.module.css\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_components_GridScene__WEBPACK_IMPORTED_MODULE_5__]);\n_components_GridScene__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n // Adjust path if necessary\n // Assuming you have this for styling\nconst App = ()=>{\n    // Leva controls for camera zoom\n    const { cameraZoom } = (0,leva__WEBPACK_IMPORTED_MODULE_4__.useControls)({\n        cameraZoom: {\n            value: 50,\n            min: 10,\n            max: 200,\n            step: 1\n        }\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_6___default().container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(leva__WEBPACK_IMPORTED_MODULE_4__.Leva, {\n                collapsed: true\n            }, void 0, false, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                lineNumber: 16,\n                columnNumber: 7\n            }, undefined),\n            \" \",\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.Canvas, {\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    width: \"100%\",\n                    height: \"100%\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera, {\n                        makeDefault: true,\n                        zoom: cameraZoom,\n                        position: [\n                            0,\n                            0,\n                            100\n                        ],\n                        near: 0.1,\n                        far: 1000\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 21,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ambientLight\", {\n                        intensity: 1.0\n                    }, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, undefined),\n                    \" \",\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GridScene__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ian/cursor_projects/webGL_meta/pages/index.js\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDa0I7QUFDVztBQUNkO0FBQ08sQ0FBQywyQkFBMkI7QUFDN0IsQ0FBQyxxQ0FBcUM7QUFFckYsTUFBTU8sTUFBTTtJQUNWLGdDQUFnQztJQUNoQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHSixpREFBV0EsQ0FBQztRQUNqQ0ksWUFBWTtZQUFFQyxPQUFPO1lBQUlDLEtBQUs7WUFBSUMsS0FBSztZQUFLQyxNQUFNO1FBQUU7SUFDdEQ7SUFFQSxxQkFDRSw4REFBQ0M7UUFBSUMsV0FBV1IsMEVBQWdCOzswQkFDOUIsOERBQUNILHNDQUFJQTtnQkFBQ2EsU0FBUzs7Ozs7O1lBQUc7MEJBQ2xCLDhEQUFDZixzREFBTUE7Z0JBQ0xnQixPQUFPO29CQUFFQyxVQUFVO29CQUFZQyxLQUFLO29CQUFHQyxNQUFNO29CQUFHQyxPQUFPO29CQUFRQyxRQUFRO2dCQUFPOztrQ0FHOUUsOERBQUNwQixpRUFBa0JBO3dCQUNqQnFCLFdBQVc7d0JBQ1hDLE1BQU1oQjt3QkFDTlUsVUFBVTs0QkFBQzs0QkFBRzs0QkFBRzt5QkFBSTt3QkFDckJPLE1BQU07d0JBQ05DLEtBQUs7Ozs7OztrQ0FFUCw4REFBQ0M7d0JBQWFDLFdBQVc7Ozs7OztvQkFBTztrQ0FHaEMsOERBQUN2Qiw2REFBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT2xCO0FBRUEsaUVBQWVFLEdBQUdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJnbC1kb3QtZ3JpZC1tdnAvLi9wYWdlcy9pbmRleC5qcz9iZWU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDYW52YXMgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnQHJlYWN0LXRocmVlL2RyZWknO1xuaW1wb3J0IHsgTGV2YSwgdXNlQ29udHJvbHMgfSBmcm9tICdsZXZhJztcbmltcG9ydCBHcmlkU2NlbmUgZnJvbSAnLi4vY29tcG9uZW50cy9HcmlkU2NlbmUnOyAvLyBBZGp1c3QgcGF0aCBpZiBuZWNlc3NhcnlcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vc3R5bGVzL0hvbWUubW9kdWxlLmNzcyc7IC8vIEFzc3VtaW5nIHlvdSBoYXZlIHRoaXMgZm9yIHN0eWxpbmdcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICAvLyBMZXZhIGNvbnRyb2xzIGZvciBjYW1lcmEgem9vbVxuICBjb25zdCB7IGNhbWVyYVpvb20gfSA9IHVzZUNvbnRyb2xzKHtcbiAgICBjYW1lcmFab29tOiB7IHZhbHVlOiA1MCwgbWluOiAxMCwgbWF4OiAyMDAsIHN0ZXA6IDEgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8TGV2YSBjb2xsYXBzZWQgLz4gey8qIExldmEgcGFuZWwgZm9yIGNvbnRyb2xzICovfVxuICAgICAgPENhbnZhc1xuICAgICAgICBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9fVxuICAgICAgPlxuICAgICAgICB7LyogVXNlIE9ydGhvZ3JhcGhpY0NhbWVyYSBmb3IgMkQgdmlldyAqL31cbiAgICAgICAgPE9ydGhvZ3JhcGhpY0NhbWVyYVxuICAgICAgICAgIG1ha2VEZWZhdWx0IC8vIFNldHMgdGhpcyBjYW1lcmEgYXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICB6b29tPXtjYW1lcmFab29tfVxuICAgICAgICAgIHBvc2l0aW9uPXtbMCwgMCwgMTAwXX0gLy8gUG9zaXRpb25lZCB0byBsb29rIGFsb25nIC1aIGF4aXNcbiAgICAgICAgICBuZWFyPXswLjF9XG4gICAgICAgICAgZmFyPXsxMDAwfVxuICAgICAgICAvPlxuICAgICAgICA8YW1iaWVudExpZ2h0IGludGVuc2l0eT17MS4wfSAvPiB7LyogQmFzaWMgbGlnaHRpbmcgKi99XG4gICAgICAgIFxuICAgICAgICB7LyogUmVuZGVyIHRoZSBtYWluIHNjZW5lIGNvbXBvbmVudCAqL31cbiAgICAgICAgPEdyaWRTY2VuZSAvPiBcbiAgICAgICAgXG4gICAgICAgIHsvKiBPcHRpb25hbDogQWRkIE9yYml0Q29udHJvbHMgaWYgbmVlZGVkIGZvciBkZWJ1Z2dpbmcvbmF2aWdhdGlvbiAqL31cbiAgICAgICAgey8qIDxPcmJpdENvbnRyb2xzIGVuYWJsZVJvdGF0ZT17ZmFsc2V9IC8+ICovfVxuICAgICAgPC9DYW52YXM+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7ICJdLCJuYW1lcyI6WyJSZWFjdCIsIkNhbnZhcyIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIkxldmEiLCJ1c2VDb250cm9scyIsIkdyaWRTY2VuZSIsInN0eWxlcyIsIkFwcCIsImNhbWVyYVpvb20iLCJ2YWx1ZSIsIm1pbiIsIm1heCIsInN0ZXAiLCJkaXYiLCJjbGFzc05hbWUiLCJjb250YWluZXIiLCJjb2xsYXBzZWQiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwibWFrZURlZmF1bHQiLCJ6b29tIiwibmVhciIsImZhciIsImFtYmllbnRMaWdodCIsImludGVuc2l0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ }),

/***/ "@react-three/drei":
/*!************************************!*\
  !*** external "@react-three/drei" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@react-three/drei");

/***/ }),

/***/ "@react-three/fiber":
/*!*************************************!*\
  !*** external "@react-three/fiber" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@react-three/fiber");

/***/ }),

/***/ "leva":
/*!***********************!*\
  !*** external "leva" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("leva");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "three" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("three");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%2Findex.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();